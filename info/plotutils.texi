\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename plotutils.info
@settitle The Plotutils Package
@c For double-sided printing, uncomment:
@c @setchapternewpage odd
@c %**end of header

@dircategory GNU Plotting Utilities
@direntry
* Plotting utilities: (plotutils).      GNU plotting utilities
* graph: (plotutils)graph Invocation.   Plot datasets, possibly in real time
* plot: (plotutils)plot Invocation.     Convert and display plot files
* tek2plot: (plotutils)tek2plot Invocation.   Translate legacy Tektronix data
* spline: (plotutils)spline Invocation. Interpolate between points in datasets
* ode: (plotutils)ode Invocation.       Integrate differential equations
* libplot: (plotutils)libplot.          A library for 2-D vector graphics
* Appendices: (plotutils)Appendices.    More info on the plotting utilities
@end direntry

@iftex
@hyphenation{Zapf-Ding-bats}
@end iftex

@ifinfo
This file documents version 2.1.1 of the GNU plotting
utilities package, including GNU libplot 1.1.

Copyright @copyright{} 1989--1998 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end ifinfo

@titlepage
@title The GNU Plotting Utilities
@subtitle Programs and functions for drawing and data plotting
@subtitle Version 2.1.1
@author Robert S. Maier and Nicholas B. Tufillaro
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1989--1998 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end titlepage
@page

@node Top, Plotutils Intro, (dir), (dir)
@ifnottex
This is the documentation for version 2.1.1 of the GNU plotting
utilities package, including GNU libplot 1.1.  The package consists of
programs and functions for data plotting and vector graphics.
@end ifnottex

@menu
* Plotutils Intro::     GNU plotting utilities
* graph::	        graph, a program for plotting datasets
* plot::        	plot, a plot format conversion program
* tek2plot::		tek2plot, a translator for legacy Tektronix files
* spline::              spline, an interpolation program
* ode::			ode, a differential equation integrator
* libplot::             A library for device-independent 2-D vector graphics
* Appendices::          Additional Information
@end menu

@node Plotutils Intro, graph, Top, Top
@chapter The GNU Plotting Utilities

The GNU plotting utilities currently consist of six user-level programs:
@code{graph}, @code{plot}, @code{tek2plot}, @code{spline}, @code{ode},
and @code{double}.  Distributed along with them is GNU @code{libplot},
a@: function library for device-independent two-dimensional vector
graphics, including vector graphics animations under the @w{X Window}
System.

@code{graph} is a program for plotting two-dimensional scientific data.
It reads one or more data files containing datasets, and outputs a plot.
The plot may be directed to a display device or to a file.  Six
different display devices are supported.  The corresponding commands are
@code{graph @w{-T X}}, @code{graph -T ps}, @code{graph -T fig}, @code{graph
-T hpgl}, @code{graph -T tek}, and @code{graph}.

@code{graph @w{-T X}} pops up a window on an @w{X Window} System display,
and draws the plot @w{in it}.  @code{graph -T ps} produces a plot in
encapsulated Postscript format that may be included in another document,
edited with the @code{idraw} drawing editor, or sent directly to a
printer.  @code{graph -T fig} produces output that may be displayed and
edited with the @code{xfig} drawing editor.  @code{graph -T hpgl}
produces a Hewlett--Packard Graphics Language (HP-GL or HP-GL/2) plot
that may be sent to a Hewlett--Packard LaserJet printer or plotter, or
included in another document.  @code{graph -T tek} produces output that
may be displayed on a Tektronix 4014 terminal or emulator.  @code{graph}
without a @samp{-T} option (referred to as `raw @code{graph}') produces
output in a device-independent format, @w{a so-called} GNU graphics
metafile.  This metafile may be translated into other formats.

@code{graph} can read datasets in both ASCII and binary format, and
datasets in the `table' format produced by the plotting program
@code{gnuplot}.  It produces a plot with or without axes and labels.
You may specify labels and ranges for the axes, and you may set the size
and position of the plot on the display device.  The labels may contain
subscripts and subscripts, Greek letters, and other special symbols;
there is also support for Cyrillic script (i.e., Russian) and Japanese.
You may specify the type of plotting symbol used for each dataset, and
such parameters as the style and thickness of the line @w{(if any)} used
to connect points in a dataset.  The plotting of filled regions is
supported, as is the drawing of error bars.  @code{graph} provides full
support for multiplotting.  With a single invocation of @code{graph},
you may produce a plot consisting of many sub-plots, either side by side
or inset.  Each sub-plot will have its own axes and data.

@code{graph @w{-T X}}, @code{graph -T tek}, and raw @code{graph} have a
feature which most plotting programs do not have.  They can accept input
from a pipe, and plot data points in real time.  For this to occur, the
user must specify ranges for both axes, so that @code{graph} does not
need to wait until the end of the input before determining them.

The @code{plot} program is a so-called plot filter.  It can translate
GNU graphics metafiles (produced for example by raw @code{graph}) into
the six supported output formats.  The corresponding commands are
@code{plot @w{-T X}}, @code{plot -T ps}, @code{plot -T fig}, @code{plot -T
hpgl}, @code{plot -T tek}, and @code{plot}.  The @code{plot} program is
useful if you wish to produce output in several different formats while
invoking @code{graph} only once.  @w{It is} also useful if you wish to
translate files in the traditional `plot(5)' format produced by, e.g.,
the non-GNU versions of @code{graph} provided with some operating
systems.  GNU metafile format is compatible with the traditional
`plot(5)' format.

The @code{tek2plot} program can translate from Tektronix format to any
of the abovementioned output formats.  The corresponding commands are
@code{tek2plot @w{-T X}}, @code{tek2plot -T ps}, @code{tek2plot -T fig},
@code{tek2plot -T hpgl}, and @code{tek2plot}.  @code{tek2plot} is useful
if you have a legacy application that produces drawings in Tektronix
format.

Among the other GNU plotting utilities, @code{spline} does spline
interpolation of scalar or vector-valued data.  It normally uses either
cubic spline interpolation or exponential splines in tension, but like
@code{graph} it can function as a real-time filter under some
circumstances.  Besides splining datasets, it can construct curves,
either open or closed, through arbitrarily chosen points in
@math{d}-dimensional space.  @code{ode} provides the ability to
integrate an ordinary differential equation or a system of ordinary
differential equations, when provided with an explicit expression for
each equation.  It supplements the plotting program @code{gnuplot},
which can plot functions but not integrate ordinary differential
equations.  The final plotting utility, @code{double}, is a filter for
converting, scaling and cutting binary or ASCII data streams.  It is
still under development and is not yet documented.

Distributed along with the plotting utilities is GNU @code{libplot}, the
function library for device-independent two-dimensional vector graphics
on which @code{graph}, @code{plot}, and @code{tek2plot} are based.
@code{libplot} can draw graphics on @w{X Window} System displays, and
perform smooth, double-buffered animation.  @w{It can} also generate
graphical output in any of five additional formats.  This includes
@w{(1) output} in encapsulated Postscript format that may be included in
another document, edited with the @code{idraw} drawing editor, or sent
directly to a printer, @w{(2) output} that may be displayed and edited
with the @code{xfig} drawing editor, @w{(3) output} in HP-GL or HP-GL/2
format that may be sent to a Hewlett--Packard LaserJet printer or
plotter, @w{(4) output} that may be displayed on a Tektronix 4014
terminal or emulator, and @w{(5) output} in the device-independent GNU
graphics metafile format.

@code{libplot} can draw such objects as lines, open and closed
polylines, arcs (both circular and elliptic), circles and ellipses,
points, marker symbols, and text strings.  The filling of objects other
than points, marker symbols, and text strings is supported (fill color,
@w{as well} as pen color, may be set arbitrarily).  The support for
drawing text strings is extensive.  The @w{X Window} System, Postscript,
and @code{xfig} drivers support the 35 standard Postscript fonts, and
the HP-GL/2 driver supports the 45 standard @w{PCL 5} fonts.  All
drivers, including the Tektronix and metafile drivers, support a set of
17 Hershey vector fonts, including HersheyCyrillic.  Text strings may
include subscripts and superscripts, and may include characters chosen
from more than one font in a typeface.  They may include many
non-alphanumeric characters.  The entire collection of 1641 `Hershey
glyphs' digitized @w{c.@: 1967} by @w{Allen V.} Hershey at the
U.S. Naval Surface Weapons Center, which includes many curious symbols,
is built into @code{libplot}.  Japanese text strings in the so-called
EUC (Extended Unix Code) format may be also be drawn.  Such strings may
include both syllabic characters (Hiragana and Katakana) and ideographic
characters (Kanji).  @w{A library} of over 600 Japanese Kanji digitized
by @w{Dr.@: Hershey} is built into @code{libplot}.

The drawing editors @code{idraw} and @code{xfig} are not distributed
along with the GNU plotting utilities.  However, they are free software,
and you may readily obtain them elsewhere (@pxref{Auxiliary Software}).

@node graph, plot, Plotutils Intro, Top
@chapter The @code{graph} Utility

Each invocation of @code{graph} reads one or more datasets from files
named on the command line or from standard input, and prepares a plot.
There are many command-line options for adjusting the visual appearance
of the plot.  
@iftex
@xref{graph Invocation}, for documentation on all options.
@end iftex
The following sections explain how to use the most frequently used
options, by giving examples.

@menu
* Simple Examples::	Simple examples using graph
* Non-Square Plots::	Changing the aspect ratio of a plot
* Multiple Datasets::	Preparing a plot from more than one dataset
* Multiplotting::	Multiple plots on a single page
* Data Formats::	Reading binary and other data formats
* graph Invocation::    Command-line options
@end menu

@node Simple Examples, Non-Square Plots, graph, graph
@section Simple examples using @code{graph}

By default, @code{graph} reads ASCII data from the files specified on
the command line, or from standard input if no files are specified.  The
data are pairs of numbers, interpreted as the @math{x} @w{and @math{y}}
coordinates of data points:

@example
0.0  0.0
1.0  0.2
2.0  0.0
3.0  0.4
4.0  0.2
5.0  0.6
@end example

@noindent
Data points do not need to be on different lines, nor do the @math{x}
and @math{y} coordinates of a data point need to be on the same line.
However, there should be no blank lines in the input if it is to be
viewed as forming a single dataset.

To plot such a dataset with @code{graph}, you could do

@example
graph -T ps ascii_data_file > plot.ps
@end example

@noindent
or equivalently

@example
graph -T ps < ascii_data_file > plot.ps
@end example

@noindent
This will produce an encapsulated Postscript file @code{plot.ps}, which
you may include in another document, display on a screen, or send
directly to a printer.  (The @samp{--page-size} option, or the
@code{PAGESIZE} environment variable, specifies the size of the printed
page.  The default is "letter", i.e., 8.5@dmn{in} by 11@dmn{in}, but
"a4" or other ISO or ANSI page sizes may be specified instead.)

You may also do

@example
graph -T fig < ascii_data_file > plot.fig
@end example

@noindent
to produce a file @code{plot.fig} that you may edit with the the
@code{xfig} drawing editor, or

@example
graph -T hpgl < ascii_data_file > plot.hpgl
@end example

@noindent
to produce a file @code{plot.hpgl} in the Hewlett--Packard Graphics
Language (HP-GL or HP-GL/2) that you may send to a Hewlett--Packard
LaserJet printer or plotter.

You may use @code{graph @w{-T X}} to @w{pop up} a window on an @w{X Window}
System display, and display the plot @w{in it}.  For that, you would do

@example
graph -T X < ascii_data_file
@end example

@noindent
If you use @code{graph @w{-T X}}, no output file will be produced; only a
window.  The window will vanish if you type @samp{q} or click your mouse
@w{in it}.

You may also use @code{graph -T tek}, to display a plot on a device that
can emulate a Tektronix 4014 graphics terminal.  @code{xterm}, the @w{X
Window} System terminal emulator, can do this.  Within an @code{xterm}
window, you would do

@example
graph -T tek < ascii_data_file
@end example

@noindent
@code{xterm} normally emulates a VT100 terminal, but when this command
is issued from @w{within it}, @w{it will} @w{pop up} a second window
(@w{a `Tektronix} window') and draw the plot @w{in it}.  The Japanese
terminal emulator @code{kterm} should be able to do the same, provided
that it is correctly installed.  Another piece of software that can
emulate a Tektronix 4014 terminal is the DOS version of @code{kermit}.

@code{graph} may behave differently depending on the environment in
which it is invoked.  We have already mentioned the @code{PAGESIZE}
environment variable, which affects the operation of @code{graph -T ps},
@code{graph -T fig}, and @code{graph -T hpgl}.  The @code{DISPLAY} and
@code{BITMAPSIZE} environment variables affect the operation of
@code{graph @w{-T X}}, and the @code{TERM} environment variable affects the
operation of @code{graph -T tek}.  There are also several environment
variables that affect the operation of @code{graph -T hpgl}.  For a
complete discussion of the effects of the environment on @code{graph},
see @ref{graph Environment}.  The following remarks apply irrespective
of which display device is specified.

By default, successive points in the dataset are joined by solid line
segments, which form a polygonal line or polyline that we call simply a
`line'.  You may choose the style of line (the `linemode') with the
@samp{-m} option:

@example
graph -T ps -m 2 < ascii_data_file > plot.ps
@end example

@noindent
Here @samp{-m 2} indicates that linemode #2 should be used.  If the
dataset is rendered in monochrome, which is the default, the line may be
drawn in one of five distinct styles.  Linemodes #1 through #5 signify
solid, dotted, dotdashed, shortdashed, and longdashed; thereafter the
sequence repeats.  If the @samp{-C} option is used, the dataset will be
rendered in color.  For colored datasets, the line may be drawn in one
of 25 distinct styles.  Linemodes #1 through #5 signify red, green,
blue, magenta, and cyan; all are solid.  Linemodes #6 through #10
signify the same five colors, but dotted rather than solid.  Linemodes
#11 through #16 signify the same five colors, but dotdashed, and so
forth.  After linemode #25, the sequence repeats.  Linemode #0,
irrespective of whether the rendering is in monochrome or color, means
that the line is not drawn.

If you wish to @emph{fill} the polygon bounded by the line (i.e., shade
it, or fill it with a solid color), you may use the @samp{-q} option.
For example,

@example
echo .1 .1 .1 .9 .9 .9 .9 .1 .1 .1 | graph -T ps -C -m 1 -q 0.3 > plot.ps
@end example

@noindent
will plot a square region with vertices (0.1,0.1), (0.1,0.9), (0.9,0.9),
and (0.9,0.1).  The repetition of the first vertex (0.1,0.1) at the end
of the sequence of vertices ensures that the square will be closed: all
four segments of its boundary will be drawn.  The square will be drawn
in red (since the colored version of linemode #1 is requested).  The
interior of the square will be filled with red to an intensity of 30%,
as the @samp{-q 0.3} option indicates.  @w{If the} intensity were zero,
the region would be filled with white, and if it were 1.0, the region
would be filled with solid color.  @w{If the} intensity were negative,
the region would be unfilled, or transparent (the default).

You may choose the width of the line, whether it is filled or not, by
using the @samp{-W} option.  For example, @samp{-W 0.01} means that the
line should have a width equal to 0.01 times the width of the display.
Also, you may put symbols at each data point along the line by doing,
for example,

@example
graph -T ps -S 3 0.1 < ascii_data_file > plot.ps
@end example

@noindent
where the first argument 3 indicates which symbol to plot.  The optional
second argument 0.1 specifies the symbol size as a fraction of the size
of the `plotting box': the square within which the plot is drawn.
Symbol #1 is a dot, symbol #2 is a plus sign, symbol #3 is an asterisk,
symbol #4 is a circle, symbol #5 is a cross, and so forth.
(@xref{Marker Symbols}.)  Symbols 1 through 31 are the same for all
display devices, and the color of a symbol will be the same as the color
of the line it is plotted along.

Actually, you would probably not want to plot symbols at each point in
the dataset unless you turn off the line joining the points.  For this
purpose, the `negative linemode' concept is useful.  @w{A line} whose
linemode is negative is not visible; however, any symbols plotted along
it will have the color associated with the corresponding positive
linemode.  So, for example,

@example
graph -T ps -C -m -3 -S 4 < ascii_data_file > plot.ps
@end example

@noindent
will plot a blue circle at each data point.  The circles will not be
joined by line segments.  By adding the optional second argument to the
@samp{-S} option, you may adjust the size of the circles.

@code{graph} will automatically generate abscissa (@w{i.e., @math{x}})
values for you if you use the @samp{-a} option.  @w{If this} option is
used, no abscissa values should be given in the data file.  The data
points will be taken to be regularly spaced along the abscissa.  The two
arguments following @samp{-a} on the command line will be taken as the
sampling interval and the abscissa value of the first data point.  If
they are absent, they default to 1.0 and 0.0 respectively.  For example,
the command

@example
echo 0 1 0 | graph -T ps -a > plot.ps
@end example

@noindent
produces exactly the same plot  as

@example
echo 0 0 1 1 2 0 | graph -T ps > plot.ps
@end example

@code{graph} will plot data with error bars, if the @samp{-I e} option
is specified.  If it is, the dataset should consist of triples
(@math{x},@math{y},@i{error}) rather than pairs @math{(x,y)}.  @w{A
vertical} error bar of the appropriate length will be plotted at each
data point.  You may plot a symbol at each data point, along with the
error bar, by using the @samp{-S} option in the usual way.  The symbol
will be the same for each point in the dataset.  You may use the
@samp{-a} option in conjunction with @samp{-I e}, if you wish.  If you
do, the dataset should contain no abscissa (@w{i.e., @math{x}}) values.

By default the limits on the @math{x} and @math{y} axes, and the spacing
between the labeled ticks on each axis, are computed automatically.
You may wish to set them manually.  You may accomplish this with the
@samp{-x} and @samp{-y} options.

@example
echo 0 0 1 1 2 0 | graph -T ps -x -1 3 -y -1 2 > plot.ps
@end example

@noindent
will produce a plot in which the @math{x} axis extends from @minus{}1
@w{to 3}, and the @math{y} axis from @minus{}1 @w{to 2}.  By default,
@code{graph} tries to place about six numbered ticks on each axis.  By
including an optional third argument to either @samp{-x} or @samp{-y},
you may manually set the spacing of these ticks, also.  For example,
using @samp{-y -1 2 1} rather than @samp{-y -1 2} will produce a
@w{@math{y} axis} with labeled ticks at @minus{}1, 0, 1, @w{and 2},
rather than at the locations that @code{graph} would choose by default.
@w{In general}, if a third argument is present then labeled ticks will
be placed at each of its integer multiples.

To make an axis logarithmic, you may use the @samp{-l} option.  For
example, 

@example
echo 1 1 2 3 3 1 | graph -T ps -l x > plot.ps
@end example

@noindent
will produce a plot in which the @math{x} axis is logarithmic, but the
@math{y} axis is linear.  To make both axes logarithmic, you would use
@samp{-l x -l y}.  By default, the upper and lower limits on a
logarithmic axis are powers of ten, and the tick marks at these powers
of ten, and no other tick marks, are labeled.  @w{If you} need more labeled
ticks on a logarithmic axis, you should specify a tick spacing manually.
For example, @samp{-l x -x 1 9 2} will produce a plot in which the
@w{@math{x} axis} is logarithmic and extends from 1 @w{to 9}.  Labeled
ticks will be located at each integer multiple @w{of 2}, i.e., at 2, 4,
6, @w{and 8}.

You may label the @math{x} and @math{y} axes with the @samp{-X} and
@samp{-Y} options, respectively.  For example,

@example
echo 1 1 2 3 3 1 | graph -T ps -l x -X "A Logarithmic Axis" > plot.ps
@end example

@noindent
will label the log axis in the preceding example.  By default the label
for the @math{y} axis (@w{if any}) will be rotated 90 degrees, unless
you use the @samp{--toggle-rotate-y-label} option.  You may specify a
`top label', or title for the plot, by using the @samp{-L} option.
Doing, for example,

@example
echo 1 1 2 3 3 1 | graph -T ps -l x -L "A Simple Example" > plot.ps
@end example

@noindent
will produce a plot with a title on top.  

The size of the @math{x} axis and @math{y} axis labels is specified with
the @samp{-f} option, and the size of the title is specified with the
@samp{--title-font-size} option.  For example,

@example
echo 1 1 2 3 3 1 | graph -T ps -X "Abscissa" -f 0.1 > plot.ps
@end example

@noindent
will produce a plot in which the font size of the @math{x} axis label,
and each of the numerical tick labels, is very large (0.1 times the size
of the plotting box, i.e., the square within which the plot is drawn).

The font in which the labels specified with the @samp{-X}, @samp{-Y},
and @samp{-L} options are drawn may be specified with the @samp{-F}
option.  For example, @samp{-F Times-Roman} will make the labels appear
in Times-Roman instead of the default font (which is Helvetica, unless
@samp{-T hpgl} or @samp{-T tek} is specified).  Font names are
case-insensitive, so @samp{-F times-roman} will work equally well.  The
available fonts include 35 Postscript fonts (for all variants of
@code{graph} other than @code{graph -T hpgl} and @code{graph -T tek}),
45 @w{PCL 5} fonts (for @code{graph -T hpgl}), and 17 Hershey fonts.
The Hershey fonts include HersheyCyrillic, for Russian, and HersheyEUC,
for Japanese.  For a discussion of the available fonts, see @ref{Text
Fonts}.

The format of the labels drawn with the @samp{-X}, @samp{-Y}, and
@samp{-L} options may be quite intricate.  Subscripts, superscripts,
square roots, and switching fonts within a typeface are all allowed.
The above examples do not illustrate this, but for details, see
@ref{Text String Format}.

Each of the preceding examples produced a plot containing the default
sort of grid (a square box, with ticks and labels drawn along its lower
edge and its left edge).  There are actually several sorts of grid you
may request.  The @samp{-g 0}, @samp{-g 1}, @samp{-g 2}, and @samp{-g 3}
options yield successively fancier grids.  What they yield,
respectively, is no grid at all, a pair of axes with ticks and labels, a
square box with ticks and labels, and a square box with ticks, labels,
and grid lines.  As you can see, @samp{-g 2} is the default.  There is
also a @samp{-g 4} option, which yields a slightly different sort of
grid: @w{a pair} of axes that cross at the origin.  This last sort of grid
is useful if the @math{x} @w{or @math{y}} coordinates of the data points
you are plotting are both positive and negative.

@node Non-Square Plots, Multiple Datasets, Simple Examples, graph
@section Non-square and displaced plots

To alter the linear dimensions of a plot, and also to position it in a
different part of your display, you could do something like

@example
graph -T ps -h .3 -w .6 -r .1 -u .1 < ascii_data_file > plot.ps
@end example

@noindent
Here the @samp{-h} and @samp{-w} options specify the height and width of
the plotting box, and the @samp{-r} and @samp{-u} options indicate how
far up and to the right the lower left corner of the plotting box should
be positioned.  All dimensions are expressed as fractions of the size of
the graphics display, which by convention is a square.  @w{By default},
the height and width of the plotting box equal 0.6, and the `upward
shift' and the `rightward shift' equal 0.2.  So the above example will
produce a plot that is half as tall as usual.  Compared to its usual
position, the plot will be shifted slightly downward and to the left.

The `graphics display', within which the plotting box is located, is an
abstraction.  For @code{graph @w{-T X}}, it is a square window on an @w{X
display}, the size of which may be set by using the @code{--bitmap-size}
option, or by setting the @code{BITMAPSIZE} environment variable.  For
@code{graph -T tek}, it is a square region occupying the central part of
a Tektronix display.  (Tektronix displays are 4/3 times as wide as they
are high.)  For @code{graph -T ps}, @w{by default} it is a square region
centered on an 8.5@dmn{in} by 11@dmn{in} page (@w{US letter} size),
occupying the full width of the page with allowance being made for
margins.  For @code{graph -T fig}, @w{by default} it is a square region
of the same size, positioned in the upper left corner of an @code{xfig}
display.  For @code{graph -T hpgl}, @w{by default} it is a square region
of the same size, with position and orientation on the page being
controlled by environment variables.  The page size used by @code{graph
-T ps}, @code{graph -T fig}, and @code{graph -T hpgl} may be set by
using the @code{--page-size} option, or by setting the environment
variable @code{PAGESIZE}.  For example, setting @code{PAGESIZE} to "a4"
would position the graphics display appropriately on an A4-size page
(21@dmn{cm} by 29.7@dmn{cm}).

Changing the width of the plotting box may have unforeseen consequences.
@w{A number} of command-line options specify sizes or dimensions as
fractions of the width of the plotting box.  For example, @samp{-S 3
.01} specifies that the plotting symbols for the following dataset
should be of @w{type #3}, and should have a fractional size equal @w{to
0.01}.  If the @samp{-w} option is employed to widen or narrow the plot,
such dimensions or sizes will scale in tandem.  That is presumably the
right thing to do, but may be slightly disconcerting.

@node Multiple Datasets, Multiplotting, Non-Square Plots, graph
@section Preparing a plot from more than one dataset

It is frequently the case that several datasets need to be displayed on
the same plot.  @w{If so}, you may wish to distinguish the points in
different datasets by joining them by lines of different types, or by
using plotting symbols of different types.

A more complicated example would be the following.  You may have a file
containing a dataset that is the result of experimental observations,
and a file containing closely spaced points that trace out a theoretical
curve.  The second file is a dataset in its own right.  You would
presumably plot it with line segments joining successive points, so as
to trace out the theoretical curve.  But the first dataset, resulting
from experiment, would be plotted without such line segments.  @w{In
fact}, a plotting symbol would be plotted at each of its points.

These examples, and others like them, led us to define a set of seven
@emph{attributes} which define the way in which a dataset should be
plotted.  These attributes, which may be set by command-line options,
are the following.

@enumerate
@item color/monochrome
@item linemode 
@item linewidth
@item symbol type
@item symbol size
@item symbol font name
@item fill fraction
@end enumerate

@noindent
Color/monochrome (a choice of one or the other) is the simplest.  This
choice is toggled with the @samp{-C} option.  The `linemode' (i.e., line
style) specifies how the line segments joining successive points should
be drawn; it is specified with the @samp{-m} option.  Linemode #0 means
no linemode at all, for example.  `Linewidth' is self-explanatory; @w{it
is} specified with the @samp{-W} option. `Symbol type' and `symbol
size', which are specified with the @samp{-S} option, specify the symbol
plotted at each point of the dataset.  `Symbol font name' refers to the
font from which plotting symbols #32 and above, which are taken to be
characters rather than geometric symbols, are selected.  @w{It is} set
with the @samp{--symbol-font-name} option, and is relevant only if
@samp{-S} is used to request such special plotting symbols. Finally, the
polygonal line joining the points in a dataset may be @emph{filled}, to
create a filled or shaded polygon.  The `fill fraction' is set with the
@samp{-q} option.  @w{A negative} fill fraction means no fill, or
transparent; zero means white, and 1.0 means solid, or fully colored.

The preceding seven attributes refer to the way in which datasets are
plotted.  Datasets may also differ from one another in the way in which
they are read from files.  The dataset(s) in a file may or may not
contain error bars, for example.  @w{If a} file contains data with error
bars, the @samp{-I e} option should occur on the command line before the
file name.  (The @samp{-I} option specifies the input format for the
following files.)

The following illustrates how datasets in three different input files
could be plotted simultaneously.

@example
graph -T ps -m 0 -S 3 file_1 -C -m 3 file_2 -C -W 0.02 file_3 > output.ps
@end example

@noindent
The dataset in @code{file_1} will be plotted in linemode #0, so
successive points will not be joined by lines.  But symbol #3 (an
asterisk) will be plotted at each point.  The dataset in @code{file_2}
will be plotted in color, and linemode #3 will be used.  In color
plotting, linemode #3 is interpreted as a solid blue line.  The second
@samp{-C} on the command line turns off color for @code{file_3}.  The
points in the third dataset will be joined by a black line of width
0.02, as a fraction of the width of the graphics display.

The above command line could be made even more complicated by specifying
additional options (e.g., @samp{-q} or @samp{-I}) before each file.
@w{In fact} the command line could also include such standard options as
@samp{-x} or @samp{-y}, which specify the range of each axis.  Such
options, which refer to the plot as a whole rather than to individual
datasets, should appear before the first file name.  For example, you
could do

@example
graph -T ps -x 0 1 0.5 -m 0 -S 3 file_1 -C -m 3 file_2 > output.ps
@end example

@noindent
Note that it is possible to include the special file @w{name @samp{-}},
which refers to standard input, on the command line.  So you may produce
a plot in part from files, and in part from input that is piped to
@code{graph} from another program.

Each input file may include more than one dataset.  If so, the command
line options preceding a file on the command line will take effect for
all datasets in that file.  There are two exceptions to this.  By
default, the linemode is incremented (`bumped') from one dataset to the
next.  This feature is usually quite convenient.  For example, if you do

@example
graph -T ps -m 3 file_1 > output.ps
@end example

@noindent
the first dataset in @code{file_1} will appear in linemode #3, the
second in linemode #4, etc.  @w{In fact} if you do

@example
graph -T ps file_1 file_2 @dots{} > output.ps
@end example

@noindent
without specifying linemode explicitly, the successive datasets read
from the files on the command line will appear in linemode #1, linemode
#2,@: @dots{}.  @w{If you} do not like this feature, you may turn it
off, or in general toggle it, by using the @samp{-B} option.

You may also control manually the linemode and symbol type used for the
datasets within any file.  You would do this by including directives in
the file itself, rather than on the command line.  For example, if the line

@example
#m=-5,S=10
@end example

@noindent
appeared in an ASCII-format input file, it would be interpreted as a
directive to switch to linemode #@minus{}5 and symbol type #10 for the
following dataset.  Future releases of @code{graph} may provide the
ability to set each of the seven dataset attributes in this way.

@node Multiplotting, Data Formats, Multiple Datasets, graph
@section Multiplotting: placing multiple plots on a single page

It is occasionally useful to display several plots at once on a single
page, or on a single graphics display.  We call such a composite plot a
@emph{multiplot}.  One common sort of multiplot is a small plot inset
into a larger one.  Another sort is two or more plots side by side.

@code{graph} can draw multiplots consisting of an arbitrarily large
number of sub-plots.  When multiplotting, @code{graph} draws each
sub-plot in its own `virtual display'.  When a conventional plot is
drawn, the virtual display is the same as the physical display.  But
when a multiplot is drawn, the virtual display may be any smaller square
region.

The following example illustrates the idea.  For the present purposes,
the physical display is a square with lower left corner (0.0,0.0) and
upper right corner (1.0,1.0).

@example
graph -T ps data_file_1 --reposition 0.35 0.35 0.3 data_file_2
@end example

@noindent
Here @code{data_file_1} is plotted in the usual way.  The virtual
display is then shrunk to a square of size 0.3, with lower left corner
(0.35,0.35).  @w{A plot} is then prepared from @code{data_file_2}, and
drawn.  This plot, as you can see, will be a much smaller plot that is
inset into the first plot.

By convention, before each sub-plot of a multiplot other than the first
is drawn, a `blankout region' surrounding its plotting box is erased.
(@w{That is}, @w{it is} filled with white.)  This erasure prevents the
sub-plots from overlapping and producing a messy result.  By default,
the blankout region is a rectangular region 30% larger in each dimension
than the plotting box for the sub-plot.  This is appropriate if the
sub-plot is a small one that is inset into the first sub-plot.  @w{It
may} not be appropriate, however, if you are preparing a multiplot in
which several sub-plots appear side by side.  You may use the
@samp{--blankout} option to adjust this parameter.  For example,
specifying @samp{--blankout 1.0} will make the blankout region for a
sub-plot coincide with its plotting box.  Specifying @samp{--blankout
0.0} will prevent any blanking out from occurring.  The blankout
parameter may differ from sub-plot to sub-plot.

It should be emphasized that every sub-plot in a multiplot is a plot in
its own right.  All the usual options (@samp{-m}, @samp{-S}, @samp{-x},
@samp{-y}, etc.) may be applied to each sub-plot separately.  The
options for a sub-plot should occur on the @code{graph} command line
immediately after the @samp{--reposition} option that applies to it.
Each sub-plot may be prepared from more than a single dataset, also.
The names of the data files for each subplot should occur on the command
line before the following @samp{--reposition} option, @w{if any}.

@node Data Formats, graph Invocation, Multiplotting, graph
@section Reading binary and other data formats

By default, @code{graph} reads datasets in ASCII format.  But it can
also read datasets in any of three binary formats (single precision
floating point, double precision floating point, and integer).
These three input formats are specified by the @samp{-I d}, @samp{-I f},
and @samp{-I i} options, respectively.

There are two advantages to using binary data: @w{1) @code{graph}} runs
significantly faster because the computational overhead for converting
data from ASCII to binary is eliminated, and @w{2) the} input files may
be significantly smaller.  @w{If you} have very large datasets, using
binary format may reduce storage and runtime costs.

For example, you may create a single precision binary dataset as output
from a C language program:

@example
@group
#include <stdio.h>
void write_point (float x, float y)
@{
  fwrite(&x, sizeof (float), 1, stdout);
  fwrite(&y, sizeof (float), 1, stdout);
@}
@end group
@end example

@noindent
You may plot data written this way by doing:

@example
graph -T ps -I f < binary_data_file > plot.ps
@end example

@ifnottex
@noindent
The inclusion of multiple datasets within a single binary file is
supported.  If a binary file contains more than a single dataset,
successive datasets should be separated by a single occurrence of the
the largest possible number.  For single precision datasets this is the
quantity @code{MAXFLOAT}, for double precision datasets it is the
quantity @code{MAXDOUBLE}, and for integer datasets it is the quantity
@code{MAXINT}.  On most machines @code{MAXFLOAT} is approximately
3.4x10^38, @code{MAXDOUBLE} is approximately 1.8x10^308, and
@code{MAXINT} is 2^32-1.
@end ifnottex
@tex
@noindent
The inclusion of multiple datasets within a single binary file is
supported.  If a binary file contains more than a single dataset,
successive datasets should be separated by a single occurrence of the
the largest possible number.  For single precision datasets this is the
quantity @code{MAXFLOAT}, for double precision datasets it is the
quantity @code{MAXDOUBLE}, and for integer datasets it is the quantity
@code{MAXINT}.  On most machines @code{MAXFLOAT} is approximately
$3.4\times10^{38}$, @code{MAXDOUBLE} is approximately
$1.8\times10^{308}$, and @code{MAXINT} is $2^{31}-1$.
@end tex

If you are reading datasets from more than one file, it is not required
that the files be in the same format.  For example,

@example
graph -T ps -I f binary_data_file -I a ascii_data_file > plot.ps
@end example

@noindent
will read @code{binary_data_file} in @samp{f} (binary single precision)
format, and @code{ascii_data_file} in @samp{a} (normal ASCII) format.

There is currently no support for reading and plotting binary data with
error bars.  If you have data with error bars, you should supply the data
to @code{graph} in ASCII, and use the @samp{-I e} option.

@code{graph} can also read data files in the ASCII `table' format
produced by the @code{gnuplot} plotting program.  For this, you should
use the @samp{-I g} option.  Such a data file may consist of more than
one dataset.

To sum up: there are six supported data formats, @samp{a} (normal
ASCII), @samp{e} (ASCII with error bars), @samp{g} (the ASCII `table'
format produced by @code{gnuplot}), @samp{f} (binary single precision),
@samp{d} (binary double precision), and @samp{i} (binary integer).
Input files may be in any of these six formats.

@node graph Invocation, , Data Formats, graph
@section @code{graph} command-line options

The command-line options to @code{graph} are listed in the following
sections.  Each option that takes an argument is followed, in
parentheses, by the type and default value of the argument.  There are
five sorts of option.

@iftex
@enumerate
@item
Options affecting an entire plot.  (@ref{Plot Options}.)
@item
Options affecting the reading and drawing of individual datasets within a plot.
(@ref{Dataset Options}.)
@item
Options for multiplotting (drawing several sub-plots within a plot).
(@ref{Multiplot Options}.)
@item
Options relevant only to raw @code{graph}, i.e., relevant only if no
display device is specified with the @samp{-T} option.  (@ref{Raw graph
Options}.)
@item
Options requesting information (e.g., @samp{--help}).
(@ref{Info Options}.)
@end enumerate
@end iftex

@ifnottex
The behavior of @code{graph} is also affected by a number of environment
variables, so there is a section discussing them as well.
@end ifnottex

@menu
* Plot Options::	Options affecting an entire plot
* Dataset Options::	Options affecting the reading and plotting of datasets
* Multiplot Options::	Options for drawing several plots at once
* Raw graph Options::	Options relevant only to raw graph
* Info Options::	Options requesting information (e.g., ---help)
* graph Environment::   Environment variables
@end menu

@node Plot Options, Dataset Options, graph Invocation, graph Invocation
@subsection Plot options

The following options affect an entire plot.  They should normally occur
at most once, and should appear on the command line before the first
filename.  @w{If a} multiplot is being drawn, they may (with the
exception of the @samp{-T} option) occur more than once.  @w{If so}, the
second and later occurrences should be placed on the command line
immediately after each @samp{--reposition @var{x} @var{y}} option.

@table @samp
@item -T @var{type}
@itemx --display-type @var{type}
(String, default "meta".)  Emit output for a display of type @var{type},
which may be one of the strings "X", "ps", "fig", "hpgl", "tek", and
"meta".  These refer respectively to the @w{X Window System},
@code{idraw}-editable Postscript, the format used by the @code{xfig}
drawing editor, the Hewlett--Packard Graphics Language, Tektronix
format, and device-independent GNU metafile format.

@item -f @var{font_size}
@itemx --font-size @var{font_size}
(Float, default 0.0525.)  Set the size of the font used for the axis and
tick labels, as a fraction of the size of the `plotting box' (the box
that frames the plot), to be @var{font_size}.

@item -F @var{font_name}
@itemx --font-name @var{font_name}
(String, default "Helvetica" except for @code{graph -T hpgl} and
@code{graph -T tek}, for which "HersheySerif" is the default.)  Set the
font used for the axis and tick labels, and for the plot title @w{(if
any)}, to be @var{font_name}.  The choice of font for the plot title may
be overridden with the @samp{--title-font-name} option (see below).
Font names are case-insensitive.  For a list of available fonts, see
@ref{Text Fonts}.  If the specified font is not available, the default
font will be used.

@item -g @var{grid_style}
@itemx --grid-style @var{grid_style}
(Integer in the range 0@dots{}4, default 2.)  Set the grid style for the
plot to be @var{grid_style}.  Grid styles 0 through 3 are progressively
more fancy, but @w{style 4} is a somewhat different style.

@enumerate 0
@item no axes, tick marks or labels.
@item a pair of axes, with tick marks and labels.
@item box around plot, with tick marks and labels.
@item box around plot, with tick marks and labels; also grid lines.
@item axes intersect at the origin, with tick marks and labels.
@end enumerate

@item -h @var{height}
@itemx --height-of-plot @var{height}
(Float, default 0.6.)  Set the fractional height of the plot with
respect to the height of the display (or virtual display, in the case of
a multiplot) to be @var{height}.  @w{A value} of 1.0 will produce a
plotting box that fills the available area.  Note that tick marks and
labels are outside the plotting box, so that values less than 1.0 are
generally used.

@item -K @var{clip_mode}
@itemx --clip-mode @var{clip_mode}
(Integer, default 1.) Set the clip mode for the plot to @var{clip_mode}.
The clip mode is relevant only if data points are being joined by a
line, and the line is not being filled to create a filled region (since
filled regions are clipped in a fixed way).  There are three clip modes:
0, 1, @w{and 2}.  Clip @w{mode 0} means that a line segment joining two data
points will be plotted only if neither point is outside the plotting
box.  Clip @w{mode 1} means that it will be plotted if no more than one of
the two points is outside, and clip @w{mode 2} means that it will be plotted
even if both are outside.  In all cases the line segment will be clipped
to the plotting box.

@item -L @var{top_label}
@itemx --top-label @var{top_label}
(String, default empty.)  Place the text string @var{top_label} above
the plot, as a plot title.  The string may include escape sequences
(@pxref{Text String Format}).  The @samp{--title-font-size} option may
be used to specify the size of the font.  The font is normally the same
as the font used for labelling axes and tick labels, as selected by the
@samp{-F} option.  But this may be overridden with the
@samp{--title-font-name} option.

@item -l @var{x|y}
@itemx --toggle-log-axis @var{x|y}
Set the specified axis to be a log axis rather than a linear axis, or
vice versa.  By default, both axes are linear axes.

@item -N @var{x|y}
@itemx --toggle-no-ticks @var{x|y}
Toggle the presence of ticks and tick labels on the specified axis.
This applies to the grid styles that normally include ticks and tick
labels, i.e., grid styles 1, 2, 3, @w{and 4}.

@item -R @var{x|y}
@itemx --toggle-round-to-next-tick @var{x|y}
Toggle the rounding of the limits of the specified axis, so that they
are integer multiples of the spacing between labeled tick marks.  By
default this does not take place if the user uses the @samp{-x} or
@samp{-y} options to set axis limits explicitly.

@item -r @var{right}
@itemx --right-shift @var{right}
(Float, default 0.2.)  Move the plot to the right by a fractional amount
@var{right} with respect to the width of the display (or virtual
display, in the case of a multiplot).  This produces a margin on the
left side of the plotting box.  @w{A value} of 0.5 will produce a margin
half the width of the available area.  Note that the tick marks and
labels are drawn in the margin.

@item -s
@itemx --save-screen
Save the screen.  This option requests that @code{graph} not erase the
display device before it begins to plot.  This is relevant only to
@code{graph -T tek}.  @w{It may} be employed to perform a crude sort of
multiplotting.

@item -T @var{tick_size}
@itemx --tick-size @var{tick_size}
(Float, default .02.) Set the fractional size of the tick marks on each
axis to be @var{tick_size}.  @w{A value} of 1.0 produces tick marks on the x
axis whose length is equal to the width of the plotting box.  @w{A negative}
@var{tick_size} will yield tick marks that extend outside the box,
rather than inside.  

@item -t
@itemx --toggle-transpose-axes
Transpose the abscissa and ordinate.  This causes the axes to be
interchanged, and the options that apply to each axis to be applied to
the opposite axis.  That is, data points are read in as @math{(y, x)}
pairs, and such options as @samp{-x} and @samp{-X} apply to the
@w{@math{y} axis} rather than the @w{@math{x} axis}.  If the @samp{-I e}
option is in force, so that the data points are read with error bars,
the orientation of the error bars will be switched between vertical and
horizontal.

@item -u @var{up}
@itemx --upward-shift @var{up}
(Float, default 0.2.)  Move the plot up by a fractional amount @var{up}
with respect to the height of the display (or virtual display, in the
case of a multiplot).  This produces a margin below the plotting box.
@w{A value} of 0.5 will produce a margin half the height of the
available area.  Note that the tick marks and labels are drawn in the
margin.

@item -w @var{width}
@itemx --width-of-plot @var{width}
(Float, default 0.6.) Set the fractional width of the plot with respect
to the width of the display (or virtual display, in the case of a
multiplot) to be @var{width}.  @w{A value} of 1.0 will produce a plotting
box that fills the available area.  Note that the tick marks and labels
are outside the plotting box, so values less than 1.0 are generally
used.

@item -x [@var{lower_limit} [@var{upper_limit} [@var{spacing}]]]
@itemx --x-limits [@var{lower_limit} [@var{upper_limit} [@var{spacing}]]]
(Floats.) The arguments @var{lower_limit} and @var{upper_limit} specify
the limits of the @w{@math{x} axis}, and the optional argument
@var{spacing} specifies the spacing of labeled ticks along the axis.  If
any of the three arguments is missing, it is computed from the data.
The arguments @var{lower_limit} and @var{upper_limit} must be present if
@code{graph} is to act as a real-time filter.

@item -y [@var{lower_limit} [@var{upper_limit} [@var{spacing}]]]
@itemx --y-limits [@var{lower_limit} [@var{upper_limit} [@var{spacing}]]]
(Floats.)  The arguments specify the limits of the @math{y} axis, and
the spacing of labeled ticks along it, as for the @w{@math{x} axis} (see
above).  The arguments @var{lower_limit} and @var{upper_limit} must be
present if @code{graph} is to act as a real-time filter.

@item -X @var{x_label}
@itemx --x-title @var{x_label}
(String, default empty.)  Set the label for the @math{x} axis to be the text
string @var{x_label}.  The string may include escape sequences
(@pxref{Text String Format}).  The @samp{-F} and @samp{-f} options may
be used to specify the name of the font and the size of the font.

@item -Y @var{y_label}
@itemx --y-title @var{y_label}
(String, default empty.) Set the label for the @math{y} axis to be the
text string @var{y_label}.  The string may include escape sequences
(@pxref{Text String Format}).  The label will be rotated by 90
degrees so that it is parallel to the axis, unless the
@samp{--toggle-rotate-y-label} option is used.  Some old @w{X Window} System
displays do not support rotated labels, and require the
@samp{--toggle-rotate-y-label} option.  The @samp{-F} and @samp{-f}
options may be used to specify the name of the font and the size of the
font.

@item --bg-color @var{name}
(String, default "white".)  Set the color used for the plot background
to be @var{name}.  This is currently relevant only to @code{graph @w{-T X}}.
@w{An unrecognized} name sets the color to the default.  For information
on what names are recognized, see @ref{Color Names}.  The environment
variable @code{BG_COLOR} may equally well be used to specify the
background color.

@item --bitmap-size @var{bitmap_size}
(String, default "570x570".)  Set the size of the graphics display, in
terms of pixels, to be @var{bitmap_size}.  This is relevant only to
@code{graph @w{-T X}}, for which the graphics display is an @w{X window}.
The use of a square window, rather than a rectangular window, is
recommended.  The environment variable @code{BITMAPSIZE} may equally
well be used to specify the window size.  For backward compatibility,
the @w{X resource} @code{Xplot.geometry}, which may be set by the user,
may be used instead.

@item --frame-color @var{name}
(String, default "black".)  Set the color used for drawing the plot
frame, and for drawing monochrome datasets @w{(if any)} to be
@var{name}.  @w{An unrecognized} name sets the color to the default.
For information on what names are recognized, see @ref{Color Names}.

@item --frame-line-width @var{frame_line_width}
(Float, default @minus{}1.0.)  Set the width of lines in the plot frame,
as a fraction of the width of the display, to @var{frame_line_width}.
@w{A negative} value means that the default value for the line width
provided by the @code{libplot} graphics library should be used.  This
value is device-dependent.  The interpretation of zero line width is
also device-dependent (on some devices, a zero-width line is the
thinnest line that can be drawn; @w{on others}, a zero-width line is
invisible).

@code{graph -T tek} does not support drawing lines with other than a
default width, and @code{graph -T hpgl} does not support @w{doing so} if
the environment variable @code{HPGL_VERSION} is set to a value less than
"2" (the default).  

@item --max-line-length @var{max_line_length}
(Integer, default 500.) Set the maximum number of points that a
polygonal line drawn through any dataset may contain, before it is
flushed to the display device, to equal @var{max_line_length}.  If this
flushing occurs, the polygonal line will be split into two or more
sub-lines, though the splitting should not be noticeable.  Splitting
will not take place if the @samp{-q} option, which requests filling, is
used.

The reason for splitting long polygonal lines is that some display
devices (e.g., old Postscript printers and HP-GL plotters) have limited
buffer sizes.  The environment variable @code{MAX_LINE_LENGTH} may also
be used to specify the maximum line length.  This option has no effect
on @code{graph -T tek} or raw @code{graph}, since they draw polylines in
real time and have no buffer limitations.

@item --page-size @var{pagesize}
(String, default "letter".)  Set the size of the page on which the plot
will be positioned.  This is relevant only to @code{graph -T ps},
@code{graph -T fig}, and @code{graph -T hpgl}.  "letter" means an 8.5@dmn{in}
by 11@dmn{in} page.  Any ISO page size in the range "a0"@dots{}"a4" or
ANSI page size in the range "a"@dots{}"e" may be specified ("letter" is
an alias @w{for "a"} and "tabloid" is an alias @w{for "b"}).  "legal"
and "ledger" are recognized page sizes also.  The environment variable
@code{PAGESIZE} may equally well be used to specify the page size.

For @code{graph -T ps}, the graphics display within which the plot is drawn
will be a square region centered on the specified page and occupying its
full width.  For @code{graph -T fig}, the graphics display will be a square
region located in the upper left corner of an @code{xfig} display, with
width equal to the width of the specified page.  @code{graph -T hpgl}, fine
control over the positioning of the graphics display on the page may be
accomplished by setting certain environment variables (@pxref{graph
Environment}).

@item --pen-colors @var{colors}
(String, default "1=red:2=green:3=blue:4=magenta:5=cyan".)  Set the
colors of the pens used for drawing plots, as numbered, to be
@var{colors}.  The format should be self-explanatory.  @w{An
unrecognized} name sets the corresponding color to the default.  For
information on what names are recognized, see @ref{Color Names}.

@item --rotate @var{angle}
(Integer, default 0.)  Set the rotation angle of the plot on the page,
relative to the default orientation.  This is currently relevant only to
@code{graph -T hpgl}.  @w{It facilitates} switching between portrait and
landscape orientations.  Recognized values for @var{angle} are 0, 90,
180, @w{and 270}.  @w{"no" and} "yes" are equivalent to @w{0 and 90},
respectively.  The environment variable @code{ROTATE} may equally well
be used to specify the rotation angle.

@item --title-font-name @var{title_font_name}
(String, default "Helvetica" except for @code{graph -T hpgl} and
@code{graph -T tek}, for which "HersheySerif" is the default.)  Set the
font used for the plot title (`top label') to be @var{font_name}.
Normally the font used for the plot title is the same as that used for
labelling the axes and the ticks along the axes, as specified by the
@samp{-F} option.  But the @samp{--title-font-name} option may be used
to override this.  Font names are case-insensitive; for a list of
available fonts, see @ref{Text Fonts}.  @w{If the} font is not
available, the default font will be used.

@item --title-font-size @var{title_font_size}
(Float, default 0.07.)  Set the size of the font for the top
label (`title'), as specified by the @samp{-L} option, to
@var{title_font_size}.  The size is expressed as a fraction of the size
of the plotting box.

@item --toggle-rotate-y-label
Position the label on the @math{y} axis (which is set with the @samp{-Y}
option) horizontally instead of vertically, or vice versa.  By default
the label is rotated, so that it is positioned parallel to the
@w{@math{y} axis}.  But some display devices (e.g., old @w{X Window}
System displays) cannot handle rotated text.

@item --toggle-switch-axis-end @var{x|y}
Set the end of the indicated axis through which the other axis passes to
be the opposite of what is currently the case.  E.g.,
@samp{--toggle-switch-axis-end x} will cause the @math{y} axis to appear
on the right of the plot rather than the left.  (The left end is the
default.)  Similarly, @samp{--toggle-switch-axis-end y} will cause the
@w{@math{x} axis} to appear at the top of the plot rather than the
bottom.  Note that if the @w{@math{x} axis} appears at the top, no plot
title will be drawn (since there will be no room).
@end table

@node Dataset Options, Multiplot Options, Plot Options, graph Invocation
@subsection Dataset options

The following options affect the way in which individual datasets are
read from files, and drawn as part of a plot.  They should appear on the
command line before the file containing the datasets whose reading or
rendering they will affect.  They may appear more than once on a command
line, if more than one file is to be read.

The following three options affect the way in which datasets are read
from files.

@table @samp
@item -I @var{data-format}
@itemx --input-format @var{data-format}
This specifies which format the subsequent input file(s) are in.

@table @samp
@item a  
ASCII format.  Each input file is a sequence of floating point numbers,
interpreted as the @math{x} @w{and @math{y}} coordinates of the
successive data points in a dataset.  The @math{x} @w{and @math{y}}
coordinates of a point need not appear on the same line, and points need
not appear on different lines.  But if a blank line occurs (i.e., two
newlines in succession are seen), @w{it is} interpreted as the end of a
dataset, and the beginning of the next.
@item e
ASCII format, including error bars.  Similar to @samp{a} format, except
that triples (@math{x},@math{y},@i{error}) appear instead of pairs
@math{(x,y)}.
@item g
The ASCII `table' format produced by the @code{gnuplot} plotting program.
@ifnottex
@item f
Single precision binary format.  Each input file is a sequence of single
precision floating point numbers, interpreted as forming pairs
(@math{x},@math{y}).  Successive datasets are separated by a single
occurrence of the quantity @code{MAXFLOAT}, which is the largest
possible single precision floating point number.  On most machines this
is approximately 3.4x10^38.
@end ifnottex
@tex
@item f
Single precision binary format.  Each input file is a sequence of single
precision floating point numbers, interpreted as forming pairs
(@math{x},@math{y}).  Successive datasets are separated by a single
occurrence of the quantity @code{MAXFLOAT}, which is the largest
possible single precision floating point number.  On most machines this
is approximately $3.4\times10^{38}$.
@end tex
@ifnottex
@item d
Double precision binary format.  Each input file is a sequence of double
precision floating point numbers, interpreted as forming pairs
(@math{x},@math{y}).  Successive datasets are separated by a single
occurrence of the quantity @code{MAXDOUBLE}, which is the largest
possible double precision floating point number.  On most machines this
is approximately 1.8x10^308.
@end ifnottex
@tex
@item d
Double precision binary format.  Each input file is a sequence of double
precision floating point numbers, interpreted as forming pairs
(@math{x},@math{y}).  Successive datasets are separated by a single
occurrence of the quantity @code{MAXDOUBLE}, which is the largest
possible double precision floating point number.  On most machines this
is approximately $1.8\times10^{308}$.
@end tex
@ifnottex
@item i
Integer binary format.  Each input file is a sequence of integers,
interpreted as forming pairs (@math{x},@math{y}).  Successive datasets
are separated by a single occurrence of the quantity @code{MAXINT},
which is the largest possible integer.  On most machines this is 2^31-1.
@end ifnottex
@tex
@item i
Integer binary format.  Each input file is a sequence of integers,
interpreted as forming pairs (@math{x},@math{y}).  Successive datasets
are separated by a single occurrence of the quantity @code{MAXINT},
which is the largest possible integer.  On most machines this is
$2^{31}-1$.
@end tex
@end table

@item -a [@var{step_size} [@var{lower_limit}]]
@itemx --auto-abscissa [@var{step_size} [@var{lower_limit}]]
(Floats, defaults 1.0 and 0.0.) Automatically generate abscissa
(@math{x}) values.  Irrespective of data format (@samp{a}, @samp{e},
@samp{f}, @samp{d}, @w{or @samp{i}}), this option specifies that the
abscissa (@math{x}) values are missing from the input file: the
dataset(s) to be read contain only ordinate (@math{y}) values.  The
increment from each @w{@math{x} value} to the next will be
@var{step_size}, and the first @w{@math{x} value} will be
@var{lower_limit}.  @w{To return} to reading abscissa values from the
input, i.e., for subsequent input files, you may specify @samp{-a 0},
which disables automatic generation of the abscissa values and returns
@var{step_size} and @var{lower_limit} to their default values.
@item -B
@itemx --toggle-auto-bump
By default the linemode (set with @samp{-m}, see below) is `bumped'
(incremented by unity) at the beginning of each new dataset.  This
option toggles auto-bumping: @w{it turns} it off if it was on, and on if
it was off.
@end table

The following options affect the way in which individual datasets are
drawn as part of a plot.  These options set the six `attributes' (symbol
type, symbol font, linemode, line width, fill fraction, and
color/monochrome) that each dataset has.

@table @samp
@item -m @var{line_mode}
@itemx --line-mode @var{line_mode}
(Integer, default 1.) @var{line_mode} specifies the mode (i.e., style)
of the lines drawn between successive points in a dataset.  By
convention, linemode #0 means no line @w{at all} (points are
disconnected).  @w{If the} dataset is being rendered in monochrome, the
interpretation of @var{line_mode} is as follows.

@enumerate
@item solid
@item dotted
@item dotdashed
@item shortdashed
@item longdashed
@end enumerate

Thereafter (i.e., for @var{line_mode} greater than 5) the sequence of
five linemodes repeats.  So besides linemode #0, there are a total of
five distinct monochrome linemodes.  @w{If the} dataset is being
rendered in color (as may be requested with the @samp{-C} option), the
interpretation of linemodes #1 through #5 is instead

@enumerate
@item red, solid
@item green, solid
@item blue, solid
@item magenta, solid
@item cyan, solid
@end enumerate

Linemodes #6 through #10 use the same five colors, but are dotted;
linemodes #11 through #15 are dotdashed; linemodes #16 through #20 are
shortdashed; and linemodes #21 through #25 are longdashed.  So besides
linemode #0, there are a total of 25 distinct colored linemodes.  @w{A
negative} linemode indicates that no line should be drawn, but that the
plotting symbol, @w{if any} (see below), should be in the color of the
corresponding positive linemode.
@item -S [@var{symbol_number} [@var{symbol_size}]]
@itemx --symbol [@var{symbol_number} [@var{symbol_size}]]
(Integer and float, defaults 0 and 0.03.) Draw a marker symbol at each
data point.  @var{symbol_number} specifies the symbol type, and
@var{symbol_size} specifies the fractional size of the symbol with
respect to the width of the plotting box.  If the dataset is being
rendered in color, the symbol will have the color of the line that is
being drawn to connect the data points.  You may request that symbols be
drawn without any line connecting them by using the @samp{-m} option to
specify a negative linemode (see above).  The following table lists the
first few marker symbols (by convention, @w{symbol #0} means no symbol 
@w{at all}).

@enumerate
@item dot
@tex
($\thinspace\cdot\thinspace$)
@end tex
@item plus (@math{+})
@item asterisk (@math{*})
@item circle
@tex
($\circ$)
@end tex
@item cross
@tex
($\times$)
@end tex
@end enumerate

Marker symbols 0 through 31 are furnished by the @code{libplot} graphics
library.  @xref{Marker Symbols}.  Symbol numbers greater than or equal
to 32 are interpreted as characters to be selected from a symbol font,
which may be set with the @samp{--symbol-font-name} option (see below).
@item -W @var{line_width}
@itemx --line-width @var{line_width}
(Float, default @minus{}1.0.)  Set the width of the lines used to join
successive points in a dataset, as a fraction of the width of the
display, to @var{line_width}.  @w{A negative} value means that the
default value for the line width provided by the @code{libplot} graphics
library should be used.  This value is device-dependent.  The
interpretation of zero line width is also device-dependent (on some
devices, a zero-width line is the thinnest line that can be drawn; @w{on
others}, a zero-width line is invisible).  

@code{graph -T tek} does not support drawing lines with other than a
default width, and @code{graph -T hpgl} does not support @w{doing so} if
the environment variable @code{HPGL_VERSION} is set to a value less than
"2" (the default).  
@item -q @var{fill_fraction}
@itemx --fill-fraction @var{fill_fraction}
(Float, default @minus{}1.0.)  If successive points in a dataset are
joined by line segments, set the shading intensity for the polygon
formed by the line segments to be @var{fill_fraction}.  @w{A solid}
polygon (i.e., one filled with the `pen color' used for drawing the line
segments) is obtained by choosing @var{fill_fraction}=1.0.  The interior
of the polygon will be white if @var{fill_fraction}=0.0.  The polygon
will be unfilled (transparent) if @var{fill_fraction} is negative.
@w{If the} polygon intersects itself, the `even-odd rule' will be used
to determine which points are inside and outside, i.e., to determine
which portions of the polygon should be shaded.  The even-odd rule is
explained in the @cite{Postscript Language Reference Manual}.  The
@samp{-q} option has no effect in @code{graph -T tek}, and it has no
effect in @code{graph -T hpgl} if the environment variable
@code{HPGL_VERSION} is set @w{to "1"}.
@item -C
@itemx --toggle-use-color
Toggle between color and monochrome rendering of datasets.  The
interpretation of linemode depends on whether the rendering is being
performed in color or monochrome; see the @samp{-m} option above.
@item --symbol-font-name @var{symbol_font_name}
(String, default "ZapfDingbats" unless @samp{-T hpgl} or @code{-T tek}
is specified, in which case it is "HersheySerif".)  Set the symbol font,
from which plotting symbols numbered 32 and higher are selected, to be
@var{symbol_font_name}.  Font names are case-insensitive.  For a list of
available fonts, see @ref{Text Fonts}.

@end table

@node Multiplot Options, Raw graph Options, Dataset Options, graph Invocation
@subsection Multiplot options

The following options are used for multiplotting (placing several plots
on a display, or a page, at once).

@table @samp
@item --reposition @var{x} @var{y} @var{size}
(Floats, defaults 0.0, 0.0, 1.0) Set the `virtual display' within which
the next plot will be drawn to be a square of size @var{size}, with
lower left corner (@var{x},@var{y}).  Normalized coordinates are used:
(0,0) means the lower left corner of the physical display and (1,1)
means the upper right corner of the physical display.
@item --blankout @var{blankout_fraction}
(Float, default 1.3.)  When drawing each additional plot of a multiplot,
it is desirable to clear the region of the display on which the plot
will be drawn.  If @var{blankout_fraction}=1.0, the region covered by
the plot's plotting box will be cleared.  If
@var{blankout_fraction}=1.3, a region 30% larger in each dimension will
be cleared.  This is appropriate for inset plots; 1.0 would be
appropriate for side by side plots.  Note that @code{graph -T tek}
cannot clear regions, and @code{graph -T hpgl} cannot clear them unless
the environment variable @code{HPGL_VERSION} is set to "2" (the default)
and the environment variable @code{HPGL_OPAQUE_MODE} is set to "yes".
@end table

@node Raw graph Options, Info Options, Multiplot Options, graph Invocation
@subsection Raw @code{graph} options

The following options are relevant only to raw @code{graph}, i.e., are
relevant only if no display device is specified with the @samp{-T}
option.  In this case @code{graph} outputs a graphics metafile.  They
should appear on the command line before any filenames, since they
affect the output of the plot (or multiplot) as a whole.

@table @samp
@item -O
@itemx --portable-output
Output the portable (human-readable) version of GNU metafile format,
rather than a binary version (the default).
@end table

@node Info Options, graph Environment, Raw graph Options, graph Invocation
@subsection Informational options

The following options request information.

@table @samp
@item --help
Print a list of command-line options, and then exit.
@item --help-fonts
Print a list of available fonts, and then exit.  The list will depend on
which display device is specified with the @samp{-T} option.
@code{graph @w{-T X}}, @code{graph -T ps}, and @code{graph -T fig} each
support the 35 standard Postscript fonts.  @code{graph -T hpgl} supports
the 45 standard @w{PCL 5} fonts.  All four, together with @code{graph -T
tek}, support a set of 17 Hershey vector fonts.  Raw @code{graph} in
principle supports any font, since its output must be translated to
other formats with @code{plot}.
@item --version
Print the version number of @code{graph} and the plotting utilities
package, and exit.
@end table

@node graph Environment, , Info Options, graph Invocation
@section Environment variables

The behavior of @code{graph} is affected by several environment
variables.  We have already mentioned the environment variables
@code{BITMAPSIZE}, @code{PAGESIZE}, @code{BG_COLOR},
@code{MAX_LINE_LENGTH}, and @code{ROTATE}.  They simply serve as backups
for the options @samp{--bitmap-size}, @samp{--page-size},
@samp{--bg-color}, @samp{--max-line-length}, and @samp{--rotate}.  The
remaining environment variables are specific to individual display
devices.  They control device driver parameters.

@code{graph @w{-T X}}, which pops up a window on an @w{X Window} System
display and draws graphics @w{in it}, checks the @code{DISPLAY}
environment variable.  The value of this variable determines the display
on which the window will be @w{popped up}.

@code{graph -T hpgl}, which produces Hewlett--Packard Graphics Language
output, is affected by several environment variables.  The most
important is @code{HPGL_VERSION}, which may be set to "1", "1.5", @w{or
"2"} (the default).  @w{"1" means} that the output should be generic
HP-GL, @w{"1.5" means} that the output should be suitable for the
HP7550A pen plotter (HP-GL with some HP-GL/2 extensions), and "2" means
that the output should be modern HP-GL/2.  @w{By default}, @code{graph
-T hpgl} will draw with a fixed set of pens.  Which pens are present may
be specified by setting the @code{HPGL_PENS} environment variable.  If
@code{HPGL_VERSION} is "1" @w{or "1.5"}, the default value of
@code{HPGL_PENS} is "1=black"; if @code{HPGL_VERSION} is "2", the
default value of @code{HPGL_PENS} is
"1=black:2=red:3=green:4=yellow:5=blue:6=magenta:7=cyan".  The format
should be self-explanatory.  @code{HPGL_PENS} may specify a color for
any pen in the range #1@dots{}#31.  For information on what color names
are recognized, see @ref{Color Names}.  @w{Pen #1} must always be
present, though it need not be black. Any other pen in the range
#1@dots{}#31 may be omitted.

If @code{HPGL_VERSION} is "2" then @code{graph -T hpgl} will be affected by
two other environment variables.  If the value of
@code{HPGL_ASSIGN_COLORS} is "yes", then @code{graph -T hpgl} will not be
restricted to the palette specified in @code{HPGL_PENS}: @w{it will}
assign colors to ``logical pens'' in the range #1@dots{}#31, @w{as
needed}.  Also, if @code{HPGL_OPAQUE_MODE} is set equal to "yes" then
@w{pen #0} will be used as an opaque white pen, permitting the drawing
of white lines and the filling of objects with opaque white.  Not all
HP-GL/2 devices allow the assignment of colors to logical pens, or the
use of @w{pen #0} as an opaque white pen.  In particular, HP-GL/2 pen
plotters @w{do not}.  @w{So these} two environment variables should be
used with caution.

The position of the @code{graph -T hpgl} graphics display on the page may
be adjusted by setting the @code{HPGL_XOFFSET} and @code{HPGL_YOFFSET}
environment variables, which may be specified in centimeters,
millimeters, or inches.  For example, an offset could be specified as
"2cm" or "1.2in".  Also, the display may be rotated 90 degrees on
the page by using the @samp{--rotate 90} option, or setting the
@code{ROTATE} environment variable to "yes".

@code{graph -T tek}, which produces output for a Tektronix terminal or
emulator, checks the @code{TERM} environment variable.  @w{If the} value
of @code{TERM} is @code{xterm}, @code{xterms}, or @code{kterm}, @w{it
is} taken as a sign that the current application is running in an @w{X
Window} System VT100 terminal emulator: @w{an @code{xterm}}.  Before
drawing graphics, @code{graph -T tek} will emit an escape sequence that
causes the terminal emulator's auxiliary Tektronix window, which is
normally hidden, to @w{pop up}.  After the graphics are drawn, an escape
sequence that returns control to the original VT100 window will be
emitted.  The Tektronix window will remain on the screen.

If the value of @code{TERM} is @code{kermit}, @code{ansi.sys},
@code{ansissys}, @code{ansi.sysk}, or @code{ansisysk}, @w{it is} taken
as a sign that the current application is running in the VT100 terminal
emulator provided by the DOS version of @code{kermit}.  Before drawing
graphics, @code{graph -T tek} will emit an escape sequence that switches
the terminal emulator to Tektronix mode.  Also, some of the Tektronix
control codes output by @code{graph -T tek} will be
@code{kermit}-specific.  There will be a limited amount of color
support, which is not normally the case (the 16 @code{ansi.sys} colors
will be supported).  After drawing graphics, @code{graph -T tek} will emit
an escape sequence that returns the emulator to VT100 mode.  The key
sequence `@w{ALT minus}' may be employed manually within @code{kermit}
to switch between the two modes.

@node plot, tek2plot, graph, Top
@chapter The @code{plot} Utility

@menu
* plot Examples::	How to use a plot filter
* plot Invocation::	Command-line options
* plot Environment::    Environment variables
@end menu

@node plot Examples, plot Invocation, plot, plot
@section How to use @code{plot}

The GNU plot filter @code{plot} translates GNU graphics metafiles to
other formats.  The @samp{-T} option is used to specify the type of
display device.

Graphics metafiles are produced by the @code{graph} utility if no
@samp{-T} option is specified on its command line, and may also be
produced by the @code{libplot} library.  The metafile format is a
device-independent format for storage of graphic data.  By default, it
is a binary rather than an human-readable format (@pxref{Metafiles}).

@code{plot}, like the metafile format itself, is useful if you wish to
preserve a plot that is to be displayed or edited on more than one type
of display device.  The following illustrate how this is done.

To produce a plot of data arranged as alternating @math{x} and @math{y}
coordinates in an ASCII file, you may use raw @code{graph} as follows:

@example
graph < ascii_data_file > test.plot
@end example

@noindent
The file @file{test.plot} will be a GNU graphics metafile.  Similarly,
to create a plot consisting of a simple figure, you may do:

@example
echo 0 0 1 1 2 0 | spline | graph > test.plot
@end example

@noindent
To display any such plot on an @w{X Window} System display, you
would do

@example
plot -T X < test.plot
@end example

@noindent
To print the plot on a Postscript printer, you would do something
like

@example
plot -T ps < test.plot | lpr
@end example

@noindent
To edit it with the @code{idraw} drawing editor, you would do

@example
@group
plot -T ps < test.plot > test.ps
idraw test.ps
@end group
@end example

@noindent
And to produce a plot that may be edited with the @code{xfig} drawing
editor, you would do

@example
@group
plot -T fig < test.plot > test.fig
xfig test.fig
@end group
@end example

@code{plot} may behave differently depending on the environment in which
it is invoked.  In particular, @code{plot -T ps}, @code{plot -T fig},
and @code{plot -T hpgl} are affected by the environment variable
@code{PAGESIZE}.  @code{plot @w{-T X}} is affected by the environment
variables @code{DISPLAY} and @code{BITMAPSIZE}, and @code{plot -T tek}
is affected by the environment variable @code{TERM}.  There are also
several environment variables that affect the operation of @code{plot -T
hpgl}.  For a complete discussion of the effects of the environment on
@code{plot}, see @ref{plot Environment}.

@node plot Invocation, plot Environment, plot Examples, plot
@section @code{plot} command-line options

The command-line options to GNU @code{plot} are listed below.  There are
four sorts of option:

@enumerate
@item
Options setting the values of drawing parameters.
@item
Options relevant only to raw @code{plot}, i.e., relevant only if no
display device is specified with the @samp{-T} option.
@item
Options specifying the type of metafile format the input is in (for
backward compatibility only).
@item
Options requesting information (e.g., @samp{--help}).
@end enumerate

@noindent
Each option that takes an argument is followed, in parentheses, by the
type and default value of the argument.

Note that input file names may be specified anywhere on the command
line.  Only the options that precede a file name will take effect for
that file.  If no file names are specified, or the @w{name @samp{-}} is
specified, the standard input is read.

The following options set the values of drawing parameters.

@table @samp
@item -T @var{type}
@itemx --display-type @var{type}
(String, default "meta".)  Emit output for a display of type @var{type},
which may be one of the strings "X", "ps", "fig", "hpgl", "tek", and
"meta".  These refer respectively to the @w{X Window System},
@code{idraw}-editable Postscript, the format used by the @code{xfig}
drawing editor, the Hewlett--Packard Graphics Language, Tektronix
format, and device-independent GNU metafile format.

@item -p @var{n}
@itemx --page-number @var{n}
(Positive integer.) Display only page number @var{n}, within the
metafile or sequence of metafiles that is being translated.  Metafiles
may consist of one or more pages, numbered beginning @w{with 1}.  
@w{By default}, @code{plot} translates all pages.  For example, 
@code{plot @w{-T X}} displays each page in its own @w{X window}.  This option
may be used to override the default behavior and select a particular page 
for display.

@item --bitmap-size @var{bitmap_size}
(String, default "570x570".)  Set the size of the graphics display, in
terms of pixels, to be @var{bitmap_size}.  This is relevant only to
@code{plot @w{-T X}}, for which the graphics display is an @w{X window}.
The use of a square window, rather than a rectangular window, is
recommended.  The environment variable @code{BITMAPSIZE} may equally
well be used to specify the window size.  For backward compatibility,
the @w{X resource} @code{Xplot.geometry}, which may be set by the user,
may be used instead.

@item --max-line-length @var{max_line_length}
(Integer, default 500.) Set the maximum number of points that a
polygonal line may contain, before it is flushed to the display device,
to equal @var{max_line_length}.  If this flushing occurs, the polygonal
line will be split into two or more sub-lines, though the splitting
should not be noticeable.  Splitting will not take place if the line is
the boundary of a filled polygon.

The reason for splitting long polygonal lines is that some display
devices (e.g., old Postscript printers and HP-GL plotters) have limited
buffer sizes.  The environment variable @code{MAX_LINE_LENGTH} may also
be used to specify the maximum line length.  This option has no effect
on @code{plot -T tek} or raw @code{plot}, since they draw polylines in
real time and have no buffer limitations.

@item --page-size @var{pagesize}
(String, default "letter".) Set the size of the page on which the plot
will be positioned.  This is relevant only to @code{plot -T ps},
@code{plot -T fig}, and @code{plot -T hpgl}.  "letter" means an 8.5@dmn{in} by
11@dmn{in} page.  Any ISO page size in the range "a0"@dots{}"a4" or ANSI
page size in the range "a"@dots{}"e" may be specified ("letter" is an
alias @w{for "a"} and "tabloid" is an alias @w{for "b"}).  "legal" and
"ledger" are recognized page sizes also.  The environment variable
@code{PAGESIZE} may equally well be used to specify the page size.

For @code{plot -T ps}, the graphics display within which the plot is drawn
will be a square region centered on the specified page and occupying its
full width.  For @code{plot -T fig}, the graphics display will be a square
region located in the upper left corner of an @code{xfig} display, with
width equal to the width of the specified page.  For @code{plot -T hpgl},
fine control over the positioning of the graphics display on the page
may be accomplished by setting certain environment variables
(@pxref{plot Environment}).

@item --rotate @var{angle}
(Integer, default 0.)  Set the rotation angle of the plot on the page,
relative to the default orientation.  This is currently relevant only to
@code{plot -T hpgl}.  @w{It facilitates} switching between portrait and
landscape orientations.  Recognized values for @var{angle} are 0, 90,
180, @w{and 270}.  @w{"no" and} "yes" are equivalent to @w{0 and 90},
respectively.  The environment variable @code{ROTATE} may equally well
be used to specify the rotation angle.
@end table

The following options set the initial values of additional drawing
parameters.  All of these may be overridden by directives in the
metafile itself.  @w{In fact}, these options are useful mostly for
plotting old metafiles in the pre-GNU `plot(5)' format, which did not
include such directives.

@table @samp
@item --bg-color @var{name}
(String, default "white".)  Set the color used for the drawing
background to be @var{name}.  This is currently relevant only to
@code{plot @w{-T X}}.  @w{An unrecognized} name sets the color to the
default.  For information on what names are recognized, see @ref{Color
Names}.  The environment variable @code{BG_COLOR} may equally well be
used to specify the background color.

@item -f @var{font_size}
@itemx --font-size @var{font_size}
(Float, default 0.0525.)  Set the initial size of the font used
for rendering text, as a fraction of the width of the display device, to
@var{font_size}.

@item -F @var{font_name}
@itemx --font-name @var{font_name}
(String, default "Helvetica" except for @code{plot -T hpgl} and
@code{plot -T tek}, for which "HersheySerif" is the default.)  Set the font
initially used for text (i.e., for `labels') to @var{font_name}.  Font
names are case-insensitive.  For a list of available fonts, see
@ref{Text Fonts}.  If the specified font is not available, the default
font will be used.

@item -W @var{line_width}
@itemx --line-width @var{line_width}
(Float, default @minus{}1.0.)  Set the width of lines, as a fraction of
the width of the display, to @var{line_width}.  @w{A negative} value
means that the default value provided by the @code{libplot} graphics
library should be used.  This value is device-dependent.  The
interpretation of zero line width is also device-dependent (on some
devices, a zero-width line is the thinnest line that can be drawn; on
others, a zero-width line is invisible).  

@code{plot -T tek} does not support drawing lines with other than a default
width, and @code{plot -T hpgl} does not support @w{doing so} if the
environment variable @code{HPGL_VERSION} is set to a value less than "2"
(the default).

@item --pen-color @var{name}
(String, default "black".)  Set the pen color to be @var{name}.  An
unrecognized name sets the pen color to the default.  For information on
what color names are recognized, see @ref{Color Names}.
@end table

The following option is relevant only to raw @code{plot}, i.e., relevant
only if no display device is specified with the @samp{-T} option.  In
this case @code{plot} outputs a graphics metafile.

@table @samp
@item -O
@itemx --portable-output
Output the portable (human-readable) version of GNU metafile format,
rather than a binary version (the default).
@end table

@code{plot} will automatically determine which type of GNU metafile
format the input @w{is in}.  There are two types: binary (the default)
and portable (human-readable).  The binary format is machine-dependent.
@xref{Metafiles}.

For compatibility with older plotting software, the reading of input
files in the pre-GNU `plot(5)' format is also supported.  This is
normally a binary format, with each integer in the metafile represented
as a pair of bytes.  The order of the two bytes is machine dependent.
You may specify that input file(s) are in plot(5) format rather than
ordinary GNU metafile format by using either the @samp{-h} option
(``high byte first'') or the @samp{-l} option (``low byte first''),
whichever is appropriate.  Some non-GNU systems support an ASCII
(human-readable) variant of plot(5) format.  You may specify that the
input is in this format by using the @samp{-A} option.  Irrespective of
the variant, a file in plot(5) format includes only one page of
graphics.

@table @samp
@item -h
@itemx --high-byte-first-input
Input file(s) are assumed to be in traditional `plot(5)' metafile
format, with the high-order byte of each integer occurring first.
@item -l
@itemx --low-byte-first-input
Input file(s) are assumed to be in traditional `plot(5)' metafile
format, with the low-order byte of each integer occurring first.
@item -A
@itemx --ascii-input
Input file(s) are assumed to be in the ASCII variant of traditional
`plot(5)' metafile format.
@end table

The following options request information.

@table @samp
@item --help
Print a list of command-line options, and then exit.
@item --help-fonts
Print a list of available fonts, and then exit.  The list will depend on
which display device is specified with the @samp{-T} option.  @code{plot
-T X}, @code{plot -T ps}, and @code{plot -T fig} each support the 35
standard Postscript fonts.  @code{plot -T hpgl} supports the 45 standard
@w{PCL 5} fonts.  All four, together with @code{plot -T hpgl} and
@code{plot -T tek}, support a set of 17 Hershey vector fonts.  Raw
@code{plot} in principle supports any font, since its output must be
translated to other formats by a later invocation of @code{plot}.
@item --version
Print the version number of @code{plot} and the plotting utilities
package, and exit.
@end table

@node plot Environment, , plot Invocation, plot
@section Environment variables

The behavior of @code{plot} is affected by several environment
variables.  We have already mentioned the environment variables
@code{BITMAPSIZE}, @code{PAGESIZE}, @code{BG_COLOR},
@code{MAX_LINE_LENGTH}, and @code{ROTATE}.  They simply serve as backups
for the options @samp{--bitmap-size}, @samp{--page-size},
@samp{--bg-color}, @samp{--max-line-length}, and @samp{--rotate}.  The
remaining environment variables are specific to individual display
devices.  They control device driver parameters.

@code{plot @w{-T X}}, which pops up a window on an @w{X Window} System
display and draws graphics @w{in it}, checks the @code{DISPLAY}
environment variable.  The value of this variable determines the display
on which the window will be @w{popped up}.

@code{plot -T hpgl}, which produces Hewlett--Packard Graphics Language
output, is affected by several environment variables.  The most
important is @code{HPGL_VERSION}, which may be set to "1", "1.5", @w{or
"2"} (the default).  @w{"1" means} that the output should be generic
HP-GL, @w{"1.5" means} that the output should be suitable for the
HP7550A pen plotter (HP-GL with some HP-GL/2 extensions), and "2" means
that the output should be modern HP-GL/2.  @w{By default}, @code{plot -T
hpgl} will draw with a fixed set of pens.  Which pens are present may be
specified by setting the @code{HPGL_PENS} environment variable.  If
@code{HPGL_VERSION} is "1" @w{or "1.5"}, the default value of
@code{HPGL_PENS} is "1=black"; if @code{HPGL_VERSION} is "2", the
default value of @code{HPGL_PENS} is
"1=black:2=red:3=green:4=yellow:5=blue:6=magenta:7=cyan".  The format
should be self-explanatory.  @code{HPGL_PENS} may specify a color for
any pen in the range #1@dots{}#31.  For information on what color names
are recognized, see @ref{Color Names}.  @w{Pen #1} must always be
present, though it need not be black.  Any other pen in the range
#1@dots{}#31 may be omitted.

If @code{HPGL_VERSION} is "2" then @code{plot -T hpgl} will be affected by
two other environment variables.  If the value of
@code{HPGL_ASSIGN_COLORS} is "yes", then @code{plot -T hpgl} will not be
restricted to the palette specified in @code{HPGL_PENS}: @w{it will}
assign colors to ``logical pens'' in the range #1@dots{}#31, @w{as
needed}.  Also, if @code{HPGL_OPAQUE_MODE} is set equal to "yes" then
@w{pen #0} will be used as an opaque white pen, permitting the drawing
of white lines and the filling of objects with opaque white.  Not all
HP-GL/2 devices allow the assignment of colors to logical pens, or the
use of @w{pen #0} as an opaque white pen.  In particular, HP-GL/2 pen
plotters @w{do not}.  @w{So these} two environment variables should be
used with caution.

The position of the @code{plot -T hpgl} graphics display on the page may be
adjusted by setting the @code{HPGL_XOFFSET} and @code{HPGL_YOFFSET}
environment variables, which may be specified in centimeters,
millimeters, or inches.  For example, an offset could be specified as
"2cm" or "1.2in".  Also, the display may be rotated 90 degrees on
the page by using the @samp{--rotate 90} option, or setting the
@code{ROTATE} environment variable to "yes".

@code{plot -T tek}, which produces output for a Tektronix terminal or
emulator, checks the @code{TERM} environment variable.  @w{If the} value
of @code{TERM} is @code{xterm}, @code{xterms}, or @code{kterm}, @w{it
is} taken as a sign that the current application is running in an @w{X
Window} System VT100 terminal emulator: @w{an @code{xterm}}.  Before
drawing graphics, @code{plot -T tek} will emit an escape sequence that
causes the terminal emulator's auxiliary Tektronix window, which is
normally hidden, to @w{pop up}.  After the graphics are drawn, an escape
sequence that returns control to the original VT100 window will be
emitted.  The Tektronix window will remain on the screen.

If the value of @code{TERM} is @code{kermit}, @code{ansi.sys},
@code{ansissys}, @code{ansi.sysk}, or @code{ansisysk}, @w{it is} taken
as a sign that the current application is running in the VT100 terminal
emulator provided by the DOS version of @code{kermit}.  Before drawing
graphics, @code{plot -T tek} will emit an escape sequence that switches
the terminal emulator to Tektronix mode.  Also, some of the Tektronix
control codes output by @code{plot -T tek} will be
@code{kermit}-specific.  There will be a limited amount of color
support, which is not normally the case (the 16 @code{ansi.sys} colors
will be supported).  After drawing graphics, @code{plot -T tek} will
emit an escape sequence that returns the emulator to VT100 mode.  The
key sequence `@w{ALT minus}' may be employed manually within
@code{kermit} to switch between the two modes.

@node tek2plot, spline, plot, Top
@chapter The @code{tek2plot} Utility

@menu
* tek2plot Examples::         How to use tek2plot
* tek2plot Invocation::       Command-line options
* tek2plot Environment::      Environment variables
@end menu

@node tek2plot Examples, tek2plot Invocation, tek2plot, tek2plot
@section How to use @code{tek2plot}

The GNU Tektronix translator @code{tek2plot} translates Tektronix
graphics format, which is produced by many legacy applications, to other
formats.  The supported output formats are the same six formats that are
supported by the GNU @code{graph} and @code{plot} utilities.

@code{tek2plot} will take input from a file specified on the command
line or from standard input, just as the plot filter @code{plot} does.
The invocation of @code{tek2plot} is similar to the invocation of
@code{plot}.  @xref{plot}.

Tektronix graphics format is defined as a noninteractive version of the
graphics format understood by Tektronix 4010/4014 terminals, as
documented in the @cite{4014 Service Manual}, Tektronix Inc., 1974
(Tektronix Part #070-1648-00).  @code{tek2plot} does not support
interactive features such as GIN mode and status enquiry.  However, it
does support a few features of popular Tektronix emulators, such as the
color extensions supported by the Tektronix emulator contained in the
MS-DOS version of @code{kermit}.

@node tek2plot Invocation, tek2plot Environment, tek2plot Examples, tek2plot
@section @code{tek2plot} command-line options

The command-line options to the Tektronix translator @code{tek2plot} are
listed below.  There are three sorts of option:

@enumerate
@item
General options.
@item
Options relevant only to raw @code{tek2plot}, i.e., relevant only if no
display is specified with the @samp{-T} option.
@item
Options requesting information (e.g., @samp{--help}).
@end enumerate

@noindent
Each option that takes an argument is followed, in parentheses, by the
type and default value of the argument.

Note that input file names may be specified anywhere on the command
line.  Only the options that precede a file name will take effect for
that file.  If no file names are specified, or the @w{name @samp{-}} is
specified, the standard input is read.

The following are general options.

@table @samp
@item -T @var{type}
@itemx --display-type @var{type}
(String, default "meta".)  Emit output for a display of type @var{type},
which may be one of the strings "X", "ps", "fig", "hpgl", "tek", and
"meta".  These refer respectively to the @w{X Window System},
@code{idraw}-editable Postscript, the format used by the @code{xfig}
drawing editor, the Hewlett--Packard Graphics Language, Tektronix
format, and device-independent GNU metafile format.

@item -p @var{n}
@itemx --page-number @var{n}
(Nonnegative integer.) Display only page number @var{n}, within the
Tektronix file or sequence of Tektronix files that is being translated.
Tektronix files may consist of one or more pages, numbered beginning
with zero.  @w{By default}, @code{tek2plot} displays all nonempty pages
in succession.  For example, @code{tek2plot @w{-T X}} displays each page in
its own @w{X window}.  This option may be used to override the default
behavior and select a particular page for display.

Most Tektronix files consist of either one page (page #0) or two pages
(@w{an empty} @w{page #0}, and @w{page #1}).  Tektronix files produced
by the GNU plotting utilities (e.g., by @code{graph -T tek}) are
normally of the latter sort.

@item -F @var{font_name}
@itemx --font-name @var{font_name}
(String, default "Courier" except for @code{tek2plot -T hpgl}, for which
"HersheySerif" is the default.)  Set the font initially used for text to
@var{font_name}.  Font names are case-insensitive.  For a list of
available fonts, see @ref{Text Fonts}.  @w{If a} font outside the
Courier family is chosen, the @samp{--position-chars} option (see below)
should probably be used.  For a list of available fonts, see @ref{Text
Fonts}.  If the specified font is not available, the default font will
be used.

@item -W @var{line_width}
@itemx --line-width @var{line_width}
(Float, default @minus{}1.0.)  Set the width of lines, as a fraction of
the width of the display, to @var{line_width}.  @w{A negative} value
means that the default value provided by the @code{libplot} graphics
library should be used.  This value is device-dependent.  The
interpretation of zero line width is also device-dependent (on some
devices, a zero-width line is the thinnest line that can be drawn; on
others, a zero-width line is invisible).

@code{tek2plot -T hpgl} does not support drawing lines with other than a
default width if the environment variable @code{HPGL_VERSION} is set to
a value less than "2" (the default).

@item --bg-color @var{name}
(String, default "white".)  Set the color used for the background to be
@var{name}.  This is currently relevant only to @code{tek2plot @w{-T X}}.
@w{An unrecognized} name sets the color to the default.  For information
on what names are recognized, see @ref{Color Names}.  The environment
variable @code{BG_COLOR} may equally well be used to specify the
background color.

@item --bitmap-size @var{bitmap_size}
(String, default "570x570".)  Set the size of the graphics display, in
terms of pixels, to be @var{bitmap_size}.  This is relevant only to
@code{plot @w{-T X}}, for which the graphics display is an @w{X window}.
The use of a square window, rather than a rectangular window, is
recommended.  The environment variable @code{BITMAPSIZE} may equally
well be used to specify the window size.  For backward compatibility,
the @w{X resource} @code{Xplot.geometry}, which may be set by the user,
may be used instead.

@item --max-line-length @var{max_line_length}
(Integer, default 500.) Set the maximum number of points that a
polygonal line may contain, before it is flushed to the display device,
to equal @var{max_line_length}.  If this flushing occurs, the polygonal
line will be split into two or more sub-lines, though the splitting
should not be noticeable.

The reason for splitting long polygonal lines is that some display
devices (e.g., old Postscript printers and HP-GL plotters) have limited
buffer sizes.  The environment variable @code{MAX_LINE_LENGTH} may also
be used to specify the maximum line length.  This option has no effect
on raw @code{tek2plot}, since it draws polylines in real time and has no
buffer limitations.

@item --page-size @var{pagesize}
(String, default "letter".) Set the size of the page on which the plot
will be positioned.  This is relevant only to @code{tek2plot -T ps},
@code{tek2plot -T fig}, and @code{tek2plot -T hpgl}.  "letter" means an
8.5@dmn{in} by 11@dmn{in} page.  Any ISO page size in the range
"a0"@dots{}"a4" or ANSI page size in the range "a"@dots{}"e" may be
specified ("letter" is an alias @w{for "a"} and "tabloid" is an alias
@w{for "b"}).  "legal" and "ledger" are recognized page sizes also.  The
environment variable @code{PAGESIZE} may equally well be used to specify
the page size.

For @code{tek2plot -T ps}, the graphics display within which the plot is
drawn will be a square region centered on the specified page and
occupying its full width.  For @code{tek2plot -T fig}, the graphics
display will be a square region located in the upper left corner of an
@code{xfig} display, with width equal to the width of the specified
page.  For @code{tek2plot -T hpgl}, fine control over the positioning of
the graphics display on the page may be accomplished by setting certain
environment variables (@pxref{tek2plot Environment}).

@item --pen-color @var{name}
(String, default "black".)  Set the pen color to be @var{name}.  An
unrecognized name sets the pen color to the default.  For information on
what color names are recognized, see @ref{Color Names}.

@item --position-chars
Position the characters in each text string individually on the display.
@w{If the} text font is not a member of the Courier family, and
especially if it is not a fixed-width font, this option is recommended.
@w{It will} improve the appearance of text strings, at the price of
making it difficult to edit the output file with @code{xfig} or
@code{idraw}.

@item --rotate @var{angle}
(Integer, default 0.)  Set the rotation angle of the plot on the page,
relative to the default orientation.  This is currently relevant only to
@code{tek2plot -T hpgl}.  @w{It facilitates} switching between portrait and
landscape orientations.  Recognized values for @var{angle} are 0, 90,
180, @w{and 270}.  @w{"no" and} "yes" are equivalent to @w{0 and 90},
respectively.  The environment variable @code{ROTATE} may equally well
be used to specify the rotation angle.

@item --use-tek-fonts
Use the bitmap fonts that were used on the original Tektronix 4010/4014
terminal.  This option is relevant only to @code{tek2plot @w{-T X}}.  The
four relevant bitmap fonts are distributed as part of the plotting
utilities package under the names @code{tekfont0}@dots{}@code{tekfont3}.
They may readily be installed on any modern @w{X Windows} server.  For
this option to work properly, you must also select a window size of
1024x1024 pixels, either by using the @code{--bitmap-size 1024x1024}
option or by setting the value of the @code{Xplot.geometry} resource.
The reason for this restriction is that bitmap fonts, unlike the
scalable fonts that the plotting utilities normally use, may not be
rescaled.

This option is useful only if you have a file in Tektronix format that
draws text using native Tektronix fonts.  Tektronix files produced by
the GNU plotting utilities (e.g., by @code{graph -T tek}) @w{do not} use
native Tektronix fonts to draw text.
@end table

The following option is relevant only to raw @code{tek2plot}, i.e.,
relevant only if no display device is specified with the @samp{-T}
option.  In this case @code{tek2plot} outputs a graphics metafile.

@table @samp
@item -O
@itemx --portable-output
Output the portable (human-readable) version of GNU metafile format,
rather than a binary version (the default).
@end table

The following options request information.

@table @samp
@item --help
Print a list of command-line options, and then exit.
@item --help-fonts
Print a list of available fonts, and then exit.  The list will depend on
which display device is specified with the @samp{-T} option.
@code{tek2plot @w{-T X}}, @code{tek2plot -T ps}, and @code{tek2plot -T fig}
each support the 35 standard Postscript fonts.  @code{tek2plot -T hpgl}
supports the 45 standard @w{PCL 5} fonts.  All four, together with
@code{tek2plot -T hpgl}, support a set of 17 Hershey vector fonts.  Raw
@code{tek2plot} in principle supports any font, since its output must be
translated to other formats with @code{plot}.
@item --version
Print the version number of @code{tek2plot} and the plotting utilities
package, and exit.
@end table

@node tek2plot Environment, , tek2plot Invocation, tek2plot
@section Environment variables

The behavior of @code{tek2plot} is affected by several environment
variables, which are the same as those that affect @code{graph} and
@code{plot}.  For convenience, we list them here.

We have already mentioned the environment variables @code{BITMAPSIZE},
@code{PAGESIZE}, @code{BG_COLOR}, @code{MAX_LINE_LENGTH}, and
@code{ROTATE}.  They simply serve as backups for the options
@samp{--bitmap-size}, @samp{--page-size}, @samp{--bg-color},
@samp{--max-line-length}, and @samp{--rotate}.  The remaining
environment variables are specific to individual display devices.  They
control device driver parameters.

@code{tek2plot @w{-T X}}, which pops up a window on an @w{X Window}
System display and draws graphics @w{in it}, checks the @code{DISPLAY}
environment variable.  The value of this variable determines the display
on which the window will be @w{popped up}.

@code{tek2plot -T hpgl}, which produces Hewlett--Packard Graphics
Language output, is affected by several environment variables.  The most
important is @code{HPGL_VERSION}, which may be set to "1", "1.5", @w{or
"2"} (the default).  @w{"1" means} that the output should be generic
HP-GL, @w{"1.5" means} that the output should be suitable for the
HP7550A pen plotter (HP-GL with some HP-GL/2 extensions), and "2" means
that the output should be modern HP-GL/2.  @w{By default},
@code{tek2plot -T hpgl} will draw with a fixed set of pens.  Which pens
are present may be specified by setting the @code{HPGL_PENS} environment
variable.  If @code{HPGL_VERSION} is "1" @w{or "1.5"}, the default value
of @code{HPGL_PENS} is "1=black"; if @code{HPGL_VERSION} is "2", the
default value is "1=black:2=red:3=green:4=yellow:5=blue:6=magenta:7=cyan".  
The format should be self-explanatory.  @code{HPGL_PENS} may specify a
color for any pen in the range #1@dots{}#31.  For information on what
color names are recognized, see @ref{Color Names}.  @w{Pen #1} must
always be present, though it need not be black.  Any other pen in the
range #1@dots{}#31 may be omitted.

If @code{HPGL_VERSION} is "2" then @code{tek2plot -T hpgl} will be
affected by two other environment variables.  If the value of
@code{HPGL_ASSIGN_COLORS} is "yes", then @code{tek2plot -T hpgl} will
not be restricted to the palette specified in @code{HPGL_PENS}: @w{it
will} assign colors to ``logical pens'' in the range #1@dots{}#31, @w{as
needed}.  Also, if @code{HPGL_OPAQUE_MODE} is set equal to "yes" then
@w{pen #0} will be used as an opaque white pen, permitting the drawing
of white lines and the filling of objects with opaque white.  Not all
HP-GL/2 devices allow the assignment of colors to logical pens, or the
use of @w{pen #0} as an opaque white pen.  In particular, HP-GL/2 pen
plotters @w{do not}.  @w{So these} two environment variables should be
used with caution.

The position of the @code{tek2plot -T hpgl} graphics display on the page
may be adjusted by setting the @code{HPGL_XOFFSET} and
@code{HPGL_YOFFSET} environment variables, which may be specified in
centimeters, millimeters, or inches.  For example, an offset could be
specified as "2cm" or "1.2in".  Also, the display may be rotated 90
degrees on the page by using the @samp{--rotate 90} option, or setting
the @code{ROTATE} environment variable to "yes".

@node spline, ode, tek2plot, Top
@chapter The @code{spline} Utility

@menu
* spline Examples::         How to use spline
* Advanced Use of spline::  More sophisticated uses
* spline Invocation::       Command-line options
@end menu

@node spline Examples, Advanced Use of spline, spline, spline
@section How to use @code{spline}

GNU @code{spline} is a program for interpolating between the data points
in one or more datasets.  Each dataset would consist of values for an
independent variable and a dependent variable, which may be a vector of
specified fixed length.  When discussing interpolation, we call these
variables `@math{t}' and `@math{y}', respectively.  @w{To emphasize:}
@w{@math{t} is a scalar}, but @w{in general} the dependent variable
@w{@math{y} may} be a vector.

The simplest case is when there is a single input file, which is in
ASCII format, and the @w{vector @math{y}} is one-dimensional.  This is
the default.  For example, the input file could contain the dataset

@example
@group
0.0  0.0
1.0  1.0
2.0  0.0
@end group
@end example

@noindent
which are the coordinates @math{(t,y)} of the data points (0,0), (1,1),
and (2,0).  Data points do not need to be on different lines, nor do the
@math{t} @w{and @math{y}} coordinates of a data point need to be on the
same line.  However, there should be no blank lines in the input if it
is to be viewed as forming a single dataset.  Also, @w{by default} the
@math{t} coordinate should be monotonically increasing, so that
@w{@math{y} may} be viewed as a function @w{of @math{t}}.

You would construct a spline (the graph of an `interpolating function')
passing through the points in this dataset by doing

@example
spline input_file > output_file
@end example

@noindent
To produce a Postscript plot of the spline with the @code{graph}
utility, you would do

@example
spline input_file | graph -T ps > output.ps
@end example

@noindent
To display a spline on an @w{X Window} System display, you could do

@example
echo 0 0 1 1 2 0 | spline | graph -T X
@end example

@noindent
Notice that the last example avoids the use of the input file
altogether.  @code{spline} will read from standard input if no files are
specified on the command line, or if the special name @w{name @samp{-}}
is specified.

What exactly does @code{spline} do?  First, it fits a curve (the graph
of an interpolating function) through the points in the dataset.  Then
it splits the interval over which the independent @w{variable @math{t}}
ranges into 100 sub-intervals, and computes the @w{@math{y} values} at
each of the 101 subdivision points.  @w{It then} outputs each of the
pairs @math{(t, y)}.  These are the coordinates of 101 points that lie
along a curve that interpolates between the points in the dataset.  If
there is more than one dataset in the input (separated by blank lines),
each dataset is interpolated separately.

You may use the @samp{-n} option to replace `100' by any other integer.
You may also use the @samp{-t} option to specify an interpolation
interval that differs from the default (the interval over which the
independent variable ranges).  For example, the command

@example
echo 0 0 1 1 2 0 | spline -n 20 -t 1.0 1.5 > output_file
@end example

@noindent
will produce a dataset consisting of 21 (rather than 101) data points,
with @w{@math{t} values} spaced regularly between 1.0 and 1.5 (rather
than between 0.0 and 2.0).  The data points will lie along a curve
passing through (0,0), (1,1), and (2,0).  This curve will be a parabola.

In general, the interpolating function will be a piecewise cubic spline.
That is, between each pair of adjacent `knots' (points in the input
dataset), @w{@math{y} will} be a cubic function @w{of @math{t}}.  This
function will differ, depending on which pair of knots @w{@math{y} lies}
between.  At each knot, both the slope and curvature of the cubic pieces
to either side will match.  In mathematical terms, the interpolating
curve will be twice continuously differentiable.

@code{spline} supports `adding tension' to the interpolating curve.  
@w{A nonzero} value for the tension may be specified with the @samp{-T}
option.  For example, a spline under considerable tension may be
computed and displayed by doing

@example
echo 0 0 1 0 2 0 | spline -T 10 | graph -T X
@end example

@noindent
As the tension parameter is increased to positive infinity, the spline
will converge to a polygonal line.  You are supposed to think of the
spline as being drawn taut.  Actually, tension may be negative 
@w{as well} as positive.  @w{A spline} with negative tension will tend to 
bow outward, @w{in fact} to oscillate sinusoidally.  But as the tension
decreases to negative infinity, the spline, though oscillatory, will
again converge to a polygonal line.

If the tension is positive, its reciprocal will be the maximum range of
the independent @w{variable @math{t}} over which the spline will `like
to curve'.  Increasing the tension far above zero will accordingly force
the spline to consist of short curved sections, centered on the data
points, and sections that are almost straight.  It follows that tension
is a `dimensionful' quantity.  If the tension is nonzero, then when the
values of the independent variable are multiplied by some common
positive factor, the tension should be divided by the same factor to
obtain a scaled version of the original spline.  If the tension is zero
(the default, or cubic spline case), then the computation of the spline
will be unaffected by linear scaling of the data.

In mathematical terms, a spline under tension will satisfy the
differential equation 
@ifnottex
@math{y''''=sgn(tension)*(tension^2)y''} 
@end ifnottex
@tex
$$y''''={\rm sgn}({\sl tension}){\sl tension}^2\thinspace y''$$
@end tex
between each successive pair of knots.  If the tension equals zero,
which is the default, the fourth derivative of @math{y} with respect
@w{to @math{t}} will equal zero at every point.  In this case, @math{y}
as a function @w{of @math{t}} will reduce to a cubic polynomial between
each successive pair of knots.  But if the tension is nonzero, @math{y}
will not be a polynomial function @w{of @math{t}}.  @w{It may} be expressed
@w{in terms} of exponential functions, however.

Irrespective of whether or not the spline is under tension, you may
specify the @samp{-p} option if you wish the spline to be a periodic
function @w{of @math{t}}.  This will only work if the @math{y} values for
the first and last points in the dataset are equal.  Otherwise, it would
make no sense to compute a periodic interpolation.

It is sometimes useful to interpolate between data points at the same
time as they are generated by an auxiliary program.  That is, it is
useful for @code{spline} to function as a real-time filter.
@code{spline} does not normally act as a filter, since computing an
interpolating curve that is as smooth as possible is a global task.  But
if the @samp{-f} option is specified, @code{spline} will indeed function
as a filter.  @w{A different} interpolation algorithm (cubic Bessel
interpolation, which is local rather than global) will be used.  @w{If
@samp{-f}} is specified, @samp{-p} may not be specified.  Also, if
@samp{-f} is specified then an interpolation interval (@w{a range} of
@w{@math{t} values}) must be requested explicitly with the @samp{-t}
option.

Cubic Bessel interpolation is inherently less smooth than the
construction of a global cubic spline.  If the @samp{-f} option is
specified, the slope of the spline at each knot will be chosen by
fitting a parabola through that knot, and the two adjacent knots.  The
slopes of the two interpolating segments to either side of each interior
knot will match at that knot, but typically their curvatures will not.
In mathematical terms, the interpolating curve will be continuously
differentiable, but in general not twice continuously differentiable.
This loss of differentiability is the price that is paid for functioning
as a real-time filter.

@node Advanced Use of spline, spline Invocation, spline Examples, spline
@section Advanced use of @code{spline}

The preceding section explains how @code{spline} may be employed to
interpolate a function @math{y} of a scalar variable @math{t}, in the
case when @math{y} is a scalar.  In this section we explain how to
perform more sophisticated interpolations.  This includes
multidimensional interpolations, and interpolations that are splinings of
curves, rather than of functions.

@code{spline} can handle the case when @w{@math{y} is} a vector of
arbitrary specified dimensionality.  The dimension may be specified with
the @samp{-d} option.  For example, an input file could contain the
multidimensional dataset

@example
@group
0.0  0.0  1.0
1.0  1.0  0.0
2.0  0.0  1.0
@end group
@end example

@noindent
which are the coordinates @math{(t,y)} of the data points (0,0,1),
(1,1,0), and (2,0,1).  You would construct a spline (the graph of an
interpolating function) passing through the points in this dataset by
doing

@example
spline -d 2 input_file > output_file
@end example

@noindent
The option @samp{-d 2} is used because in this example, the dependent
variable @math{y} is a two-dimensional vector.  Each of the components
of @math{y} will be interpolated independently, and the output file will
contain points that lie along the graph of the resulting interpolating
function.

When doing multidimensional splining, you may use any of the options
that apply in the default one-dimensional case.  For example, the
@samp{-f} option may be employed to request real-time cubic Bessel
interpolation.  As in the one-dimensional case, if the @samp{-f} option
is used then the @samp{-t} option must be used @w{as well}, to specify
an interpolation interval (@w{a range} of @w{@math{t} values}).  The
@code{-p} option may be employed to obtain a periodic spline, i.e., the
graph of a periodic vector-valued function.  For this, the first and
last dataset @w{@math{y} values} must be the same.

@code{spline} may also be used to draw a curve through arbitrarily
chosen points in the plane, or @w{in general} through arbitrarily chosen
points in @math{d}-dimensional space.  This is not the same as splining,
@w{at least} as the term is conventionally defined.  The reason is that
`splining' refers to construction of a function, rather than the
construction of a curve that may or may not be the graph of a function.
Not every curve is the graph of a function.

The following example shows how one may `spline a curve'.  The command

@example
echo 0 0 1 0 1 1 0 1 | spline -d 2 -a -s | graph -T X
@end example

@noindent
will construct a curve in the plane through the four points (0,0),
(1,0), (1,1), and (0,1), and graph it on an @w{X Window} System display.
The @samp{-d 2} option specifies that the dependent variable @math{y} is
two-dimensional.  The @samp{-a} option specifies that @w{@math{t}
values} are missing from the input, and should be automatically
generated.  @w{By default}, the first @w{@math{t} value} @w{is 0}, the
second @w{is 1}, etc.  The @samp{-s} option specifies that the
@w{@math{t} values} should be stripped from the output.

The same technique may be used to spline a closed curve.  For example,
doing

@example
echo 0 0 1 0 0 1 0 0 | spline -d 2 -a -s -p | graph -T X
@end example

@noindent
will construct and graph a closed, lozenge-shaped curve through the
three points (0,0), (1,0), and (0,1).  The construction of a closed
curve is guaranteed by the @samp{-p} (i.e., @samp{--periodic}) option,
and by the repetition of the initial point (0,0) at the end of the
sequence.

When splining a curve, whether open or closed, you may wish to
substitute the @samp{-A} option for the @samp{-a} option.  Like the
@samp{-a} option, the @samp{-A} option specifies that @w{@math{t}
values} are missing from the input and should be automatically
generated.  However, the first @w{@math{t} value} will be zero, and the
increment from one @w{@math{t} value} to the next will be the distance
between the corresponding values @w{of @math{y}}.  This scheme for
generating @w{@math{t} values}, when constructing a curve through a
sequence of points, is the scheme that is used in the @w{well known}
FITPACK subroutine library.  @w{It is} probably the best approach when
the distances between successive points fluctuate considerably.

A curve through a sequence of points in the plane, whether open or
closed, may cross itself.  Some interesting visual effects may be
obtained by adding negative tension to such a curve.  For example,
doing

@example
echo 0 0 1 0 1 1 0 0 | spline -d 2 -a -s -p -T -14 -n 500 | graph -T X
@end example

@noindent
will construct a closed curve through the three points (0,0), (1,0), 
and (0,1), which is wound into curlicues.  The @samp{-n 500} option is
included because there are so many windings.  @w{It specifies} that 501
points should be generated, which is enough to draw a smooth curve.

@noindent
@node spline Invocation, , Advanced Use of spline, spline
@section @code{spline} command-line options

@code{spline} is a general-purpose program for interpolating
vector-valued functions of a scalar @w{variable @math{t}}, and for
interpolating curves in @math{d}-dimensional space.  The algorithms used
by @code{spline} are similar to those discussed in @w{D. Kincaid} and
@w{[E.] W.} Cheney, @cite{Numerical Analysis} (2nd ed., Brooks/Cole,
1996), section 6.4, and @w{C. de Boor}, @cite{A Practical Guide to
Splines} (Springer-Verlag, 1978), @w{Chapter 4}.

The options to @code{spline} are listed below.  There are three sorts of
option:

@enumerate
@item
Options specifying the type of interpolation to be performed.
@item
Options specifying the input or output format.
@item
Options requesting information (e.g., @samp{--help}).
@end enumerate

@noindent
Options that take an argument are followed, in parentheses, by the type
and default value of the argument.

Besides options, the command line may include the names of one or more
input files. If no files are listed, the standard input is read.  Unless
the @samp{-a} option is used (see below), the input is expected to be a
sequence of data points, given as alternating @math{t} @w{and @math{y}}
values.  @w{@math{t} is} the scalar independent variable, and
@w{@math{y} is} the vector-valued dependent variable.  The
dimensionality @w{of @math{y}} is specified with the @samp{-d} option
(the default @w{is @math{1}}).

There may be more than one dataset per input file.  If the files are in
ASCII format (the default), datasets are separated by blank lines.  The
following options specify the type of interpolation to be performed on
each dataset.

@table @samp
@item -f
@itemx --filter
Use a local interpolation algorithm (the cubic Bessel algorithm), so
that @code{spline} may be used as a real-time filter.  The slope of the
interpolating curve at each point in a dataset will be chosen by fitting
a quadratic function through that point and the two adjacent points in
the dataset.  If @samp{-f} is specified then the @samp{-t} option,
otherwise optional, must be used @w{as well}.  Also, if @samp{-f} is
specified then the @samp{-k}, @samp{-p}, and @samp{-T} options may not
be used.

If @samp{-f} is @emph{not} specified, then a different (global)
interpolation algorithm will be used.
@item -k @var{k}
@itemx --boundary-condition @var{k}
(Float, default 1.0.) Set the boundary condition parameter for each
constructed spline to @w{be @var{k}}.  In each of its components, the
spline will satisfy the two boundary conditions @math{y''[0]=ky''[1]}
and @math{y''[n]=ky''[n-1]}.  Here @math{y[0]} and @math{y[1]} signify
the values of a specified component of the vector-valued dependent
variable @math{y} at the first two points of a dataset, and
@math{y[n-1]} and @math{y[n]} the values at the last two points.
Setting @var{k} to zero will yield a `natural' spline, i.e., one that
has zero curvature at the two ends of the dataset.  The @samp{-k} option
may not be used if @samp{-f} or @samp{-p} is specified.
@item -n @var{n}
@itemx --number-of-intervals @var{n}
(Integer, default 100.)  Subdivide the interval over which interpolation
occurs into @var{n} subintervals.  The number of data points computed,
and written to the output, will be @math{n+1}.
@item -p
@itemx --periodic
Construct a periodic spline.  If this option is specified, the @math{y}
values for the first and last points in each dataset must be equal.  The
@samp{-f} and @samp{-k} options may not be used if @samp{-p} is
specified.
@item -T @var{tension}
@itemx --tension @var{tension}
(Float, default 0.0.) Set the tension in each interpolating spline to be
@var{tension}.  Between each pair of successive points in a dataset, the
constructed spline will satisfy the differential equation
@ifnottex
@math{y''''=sgn(tension)*(tension^2)y''}
@end ifnottex
@tex
$y''''={\rm sgn}({\sl tension}){\sl tension}^2\thinspace y''$
@end tex
in each of its components.  If @var{tension} equals zero, the spline
will be piecewise cubic.  As @var{tension} increases to positive
infinity, the spline will converge to a polygonal line.  The @samp{-T}
option may not be used if @samp{-f} is specified.
@item -t @var{tmin} @var{tmax} [@var{tspacing}]
@itemx --t-limits @var{tmin} @var{tmax} [@var{tspacing}]
For each dataset, set the interval over which interpolation occurs to be
the interval between @var{tmin} @w{and @var{tmax}}.  If @var{tspacing}
is not specified, the interval will be divided into the number of
subintervals specified by the @samp{-n} option.  If the @samp{-t} option
is not used, the interval over which interpolation occurs will be the
entire range of the independent variable in the dataset.  The @samp{-t}
option must always be used if the @samp{-f} option is used to request
filter-like behavior (see above).
@end table

@noindent
The following options specify the format of the input file(s) and the
output file.

@table @samp
@item -d @var{dimension}
@itemx --y-dimension @var{dimension}
(Integer, default 1.)  Set the dimensionality of the dependent variable
@math{y} in the input and output files to be @var{dimension}. 
@item -I @var{data-format}
@itemx --input-format @var{data-format}
(Character, default @samp{a}.)  Set the data format for the input file(s)
to be @var{data-format}.  The possible data formats are as follows.

@table @samp
@item a  
ASCII format.  Each file is a sequence of floating point numbers,
interpreted as the @math{t} @w{and @math{y}} coordinates of the
successive data points in a dataset.  If @math{y} is
@math{d}-dimensional, there will be @math{d+1} numbers for each point.
The @math{t} @w{and @math{y}} coordinates of a point need not appear on
the same line, and points need not appear on different lines.  But if a
blank line occurs (i.e., two newlines in succession are seen), @w{it is}
interpreted as the end of a dataset, and the beginning of the next.
@ifnottex
@item f
Single precision binary format.  Each file is a sequence of floating
point numbers, interpreted as the @math{t} @w{and @math{y}} coordinates
of the successive data points in a dataset.  If @math{y} is
@math{d}-dimensional, there will be @math{d+1} numbers for each point.
Successive datasets are separated by a single occurrence of the quantity
@code{MAXFLOAT}, which is the largest possible single precision floating
point number.  On most machines this is approximately 3.4x10^38.
@end ifnottex
@tex
@item f
Single precision binary format.  Each file is a sequence of floating
point numbers, interpreted as the @math{t} @w{and @math{y}} coordinates
of the successive data points in a dataset.  If @math{y} is
@math{d}-dimensional, there will be @math{d+1} numbers for each point.
Successive datasets are separated by a single occurrence of the quantity
@code{MAXFLOAT}, which is the largest possible single precision floating
point number.  On most machines this is approximately
$3.4\times10^{38}$.
@end tex
@ifnottex
@item d
Double precision binary format.  Each file is a sequence of double
precision floating point numbers, interpreted as the @math{t} @w{and
@math{y}} coordinates of the successive data points in a dataset.  If
@math{y} is @math{d}-dimensional, there will be @math{d+1} numbers for
each point.  Successive datasets are separated by a single occurrence of
the quantity @code{MAXDOUBLE}, which is the largest possible double
precision floating point number.  On most machines this is approximately
1.8x10^308.
@end ifnottex
@tex
@item d
Double precision binary format.  Each file is a sequence of double
precision floating point numbers, interpreted as the @math{t} @w{and
@math{y}} coordinates of the successive data points in a dataset.  If
@math{y} is @math{d}-dimensional, there will be @math{d+1} numbers for
each point.  Successive datasets are separated by a single occurrence of
the quantity @code{MAXDOUBLE}, which is the largest possible double
precision floating point number.  On most machines this is approximately
$1.8\times10^{308}$.
@end tex
@ifnottex
@item i
Integer binary format.  Each file is a sequence of integers, interpreted
as the @math{t} @w{and @math{y}} coordinates of the successive data
points in a dataset.  If @math{y} is @math{d}-dimensional, there will be
@math{d+1} numbers for each point.  Successive datasets are separated by
a single occurrence of the quantity @code{MAXINT}, which is the largest
possible integer.  On most machines this is 2^31-1.
@end ifnottex
@tex
@item i
Integer binary format.  Each file is a sequence of integers, interpreted
as the @math{t} @w{and @math{y}} coordinates of the successive data
points in a dataset.  If @math{y} is @math{d}-dimensional, there will be
@math{d+1} numbers for each point.  Successive datasets are separated by
a single occurrence of the quantity @code{MAXINT}, which is the largest
possible integer.  On most machines this is $2^{31}-1$.
@end tex
@end table

@item -a [@var{step_size} [@var{lower_limit}]]
@itemx --auto-abscissa [@var{step_size} [@var{lower_limit}]]
(Floats, defaults 1.0 and 0.0.)  Automatically generate values for the
independent @w{variable (@math{t})}.  Irrespective of data format
(@samp{a}, @samp{f}, @samp{d}, @w{or @samp{i}}), this option specifies
that the values of the independent variable (@math{t}) are missing from
the input file: the dataset(s) to be read contain only values of the
dependent @w{variable (@math{y})}, @w{so that} if @math{y} is
@math{d}-dimensional, there will be only @w{@math{d} numbers} for each
point.  The increment from each @w{@math{t} value} to the next will be
@var{step_size}, and the first @w{@math{t} value} will be
@var{lower_limit}.

@item -A 
@itemx --auto-dist-abscissa
Automatically generate values for the independent @w{variable
(@math{t})}.  This is a variant form of the @samp{-a} option.  The
increment from each @w{@math{t} value} to the next will be the distance
between the corresponding @w{@math{y}} values, and the first @w{@math{t}
value} will be 0.0.  This option is useful when interpolating curves
rather than functions (@pxref{Advanced Use of spline}).

@item -O @var{data-format}
@itemx --output-format @var{data-format}
(Character, default @samp{a}.)  Set the data format for the output file
to be @var{data-format}.  The interpretation of the @var{data-format}
argument is the same as for the @samp{-I} option.
@item -P @var{significant-digits}

@itemx --precision @var{significant-digits}
(Integer, default 6.)  Set the numerical precision for the @math{t} and
@math{y} values in the output file to be @var{significant-digits}.  This
takes effect only if the output file is written in @samp{a} format,
i.e., in ASCII@.

@item -s
@itemx --suppress-abscissa
Omit the independent variable @math{t} from the output file; for each
point, supply only the dependent @w{variable @math{y}}.  If @math{y} is
@math{d}-dimensional, there will be only @w{@math{d} numbers} for each
point, @w{not @math{d+1}}.  This option is useful when interpolating
curves rather than functions (@pxref{Advanced Use of spline}).
@end table

@noindent
The following options request information.

@table @samp
@item --help
Print a list of command-line options, and then exit.
@item --version
Print the version number of @code{spline} and the plotting utilities
package, and exit.
@end table

@node ode, libplot, spline, Top
@chapter The @code{ode} Utility

The GNU @code{ode} utility can produce a numerical solution to the
initial value problem for many systems of first-order ordinary
differential equations (ODE's).  @code{ode} may also be used to solve
systems of higher-order ODE's, since a simple procedure converts an
@math{n}'th-order equation into @w{@math{n} first-order} equations.  The
output of @code{ode} may easily be piped to @code{graph}, so that one or
more solution curves may be plotted as they are generated.

Three distinct schemes for numerical solution are implemented:
Runge--Kutta--Fehlberg (the default), Adams--Moulton, and Euler.  The
Runge--Kutta--Fehlberg and Adams--Moulton schemes are available with
adaptive stepsize.

@menu
* Basic Math::			Ordinary differential equations
* Simple ode Examples::		Simple examples using ode
* Additional ode Examples::	Additional examples using ode
* ode Invocation::		ode command-line options
* Diagnostics::			Diagnostic messages
* Numerical Error::		Numerical error and how to avoid it
* Running Time::		Time spent running ode
* Input Language::		The ode input language formally specified
* ODE Bibliography::		Bibliography on ode and ODE's

@end menu

@node Basic Math, Simple ode Examples, ode, ode
@section Mathematical basics

We begin with some standard definitions.  A @emph{differential equation}
is an equation involving an unknown function and its derivatives.  @w{A
differential} equation is @emph{ordinary} if the unknown function
depends on only one independent variable, often @w{denoted @math{t}}.
The @emph{order} of the differential equation is the order of the
highest-order derivative in the equation.  One speaks of a family, or
@emph{system} of equations when more than one equation is involved.  If
the equations are dependent on one another, they are said to be
@emph{coupled}.  @w{A @emph{solution}} is any function satisfying the
equations.  An @emph{initial value problem} is present when there exist
subsidiary conditions on the unknown function and its derivatives, all
of which are given at the same value of the independent variable.  In
principle, such an `initial condition' specifies a unique solution.
Questions about the existence and uniqueness of a solution, along with
further terminology, are discussed in any introductory text.  (See
@w{Chapter 1} of Birkhoff and Rota's @cite{Ordinary Differential
Equations}.  For this and other references relevant to @code{ode}, see
@ref{ODE Bibliography}.)

In practical problems, the solution of a differential equation is
usually not expressible @w{in terms} of elementary functions.  Hence the
need for a numerical solution.

A numerical scheme for solving an initial value problem produces an
approximate solution, using only functional evaluations and the
operations of arithmetic.  @code{ode} solves first-order initial value
problems of the form:

@ifnottex
@example
@group
@math{x' = f(t,x,y,@dots{},z)}
@math{y' = g(t,x,y,@dots{},z)}
   .
   .
   .
@math{z' = h(t,x,y,@dots{},z)}
@end group
@end example
@end ifnottex
@tex
@example
@group
$x' = f(t,x,y,@ldots{},z)$
$y' = g(t,x,y,@ldots{},z)$
   .
   .
   .
$z' = h(t,x,y,@ldots{},z)$
@end group
@end example
@end tex

@noindent
given the initial values for each dependent variable at the initial
value of the independent @w{variable @math{t}}, i.e.,

@example
@group
@math{x(a) = b}
@math{y(a) = c}
     .
     .
     .
@math{z(a) = d}
@math{t = a}
@end group
@end example

@tex
@noindent
where $a,b,c,\ldots,d$ are constants.
@end tex
@ifnottex
@noindent
where @math{a,b,c,...,d} are constants.
@end ifnottex

@tex
For @code{ode} to be able to solve such a problem numerically, the
functions $f,g,\ldots,h$ must be expressed, using the usual operators
(plus, minus, multiplication, division, and exponentiation), @w{in
terms} of certain basic functions that @code{ode} recognizes.  These are
the same functions that the plotting program @code{gnuplot} recognizes.
Moreover, each of $f,g,\ldots,h$ must be given explicitly.  @code{ode}
cannot deal with a system in which one or more of the first derivatives
is defined implicitly rather than explicitly.
@end tex
@ifnottex
For @code{ode} to be able to solve such a problem numerically, the
functions f,g,@dots{},g must be expressed, using the usual operators
(@math{+},@math{-},@math{*},@math{/},^), @w{in terms} of certain basic
functions that @code{ode} recognizes.  These are the same functions that
the plotting program @code{gnuplot} recognizes.  Moreover, each of
f,g,@dots{},g must be given explicitly.  @code{ode} cannot deal with a
system in which one or more of the first derivatives is defined
implicitly rather than explicitly.
@end ifnottex

All schemes for numerical solution involve the calculation of an
approximate solution at discrete values of the independent @w{variable
@math{t}}, where the `stepsize' (the difference between any two
successive values @w{of @math{t}}, usually @w{denoted @math{h}}) may be
constant or chosen adaptively.  @w{In general}, as the stepsize
decreases the solution becomes more accurate.  @w{In @code{ode}}, the
stepsize may be adjusted by the user.

@node Simple ode Examples, Additional ode Examples, Basic Math, ode
@section Simple examples using @code{ode}

The following examples should illustrate the procedure of stating an
initial value problem and solving it with @code{ode}.  @w{If these}
examples are too elementary, see @ref{Input Language}, for a formal
specification of the @code{ode} input language.  There is also a
directory containing examples of @code{ode} input, called
@code{ode-examples}, which is distributed along with the GNU plotting
utilities.

Our first example is a simple one, namely

@example
@math{y'(t) = y(t)}
@end example

@noindent
with the initial condition

@example
@math{y(0) = 1}
@end example

@noindent
The solution to this differential equation is 

@ifnottex
@example
@math{y(t) = e^t}.
@end example
@end ifnottex
@tex
@example
@math{y(t) = e^t}.
@end example
@end tex

@noindent
In particular

@ifnottex
@example
@math{y(1) = e^1 = 2.718282}
@end example
@end ifnottex
@tex
@example
@math{y(1) = e^1 = 2.718282}
@end example
@end tex

@noindent
to seven digits of accuracy.

You may obtain this result with the aid of @code{ode} by typing on the
command line the sequence of commands

@example
@group
ode
y' = y
y = 1
print t, y
step 0, 1
@end group
@end example

@noindent
Two columns of numbers will appear.  Each line will show the value of
the independent @w{variable @math{t}}, and the value of the
@w{variable @math{y}}, as @math{t} is `stepped' from 0 @w{to 1}.  The
last line will be

@example
1 2.718282
@end example

@noindent
as expected.  You may use the @samp{-p} option to change the precision.
If, @w{for example}, you type @samp{ode -p 10} rather than @samp{ode},
you will get ten digits of accuracy in the output, rather than seven
(the default).

After the above output, @code{ode} will wait for further instructions.
Entering for example the line

@example
step 1, 0
@end example

@noindent
should yield two more columns of numbers, containing the values of
@math{t} and @math{y} that are computed when @w{@math{t} is} stepped
back from 1 @w{to 0}.  You could type instead

@example
step 1, 2
@end example

@noindent
to increase rather than @w{decrease @math{t}}.  @w{To exit} @code{ode},
you would type a line containing only @samp{.}, i.e.@: @w{a single} period,
and tap `return'.  @code{ode} will also exit if it sees an end-of-file
indicator in its input stream, which you can send from your terminal by
typing control-D.

Each line of the preceding example should be self-explanatory.  @w{A
@samp{step}} statement sets the beginning and the end of an interval
over which the independent variable (@w{here, @math{t}}) will range, and
causes @code{ode} to set the numerical scheme in motion.  The initial
value appearing in the first @samp{step} statement (@w{i.e., 0}) and the
assignment statement

@example
y = 1
@end example

@noindent
are equivalent to the initial condition @math{y(0) = 1}.  The statements
@w{@samp{y' = y}} and @samp{y = 1} are very different: @samp{y' = y}
defines a way of computing the derivative @w{of @math{y}}, while @samp{y
= 1} sets the initial value @w{of @math{y}}.  Whenever a @samp{step}
statement is encountered, @code{ode} tries to step the independent
variable through the interval it specifies.  Which values are to be
printed at each step is specified by the most recent @samp{print}
statement.  For example,

@example
print t, y, y'
@end example

@noindent
would cause the current value of the independent @w{variable @math{t}},
the @w{variable @math{y}}, and its derivative to be printed at each
step.

To illustrate @code{ode}'s ability to take its input or the initial part
of its input from a file, you could prepare a file containing the
following lines:

@example
@group
# an ode to Euler
y  = 1
y' = y
print t, y, y'
@end group
@end example

@noindent
Call this file @file{euler}.  (The @samp{#} line is a comment line,
which may appear at any point.  Everything from @w{the @samp{#}} to the
end of the line on which it appears will be ignored.)  @w{To process}
this file with @code{ode}, you could type on your terminal

@example
@group
ode -f euler
step 0, 1
@end group
@end example

@noindent
These two lines cause @code{ode} to read the file @file{euler}, and the
stepping to take place.  You will now get three quantities (@math{t},
@math{y}, and @math{y'}) printed at each of the values @w{of @math{t}}
between 0 @w{and 1}.  @w{At the} conclusion of the stepping, @code{ode}
will wait for any further commands to be input from the terminal.  This
example illustrates that

@example
ode -f euler
@end example

@noindent
is not equivalent to

@example
ode < euler
@end example

@noindent
The latter would cause @code{ode} to take all its input from the file
@file{euler}, while the former allows subsequent input from the
terminal.  For the latter to produce output, you would need to include a
@samp{step} line at the end of the file.  You would not need to include
a @samp{.} line, however.  @w{@samp{.} is} used to terminate input only
when input is being read from a terminal.

A second simple example involves the numerical solution of a
second-order differential equation.  Consider the initial value problem

@example
@group
@math{y''(t) = -y(t)}
@math{y(0) = 0}
@math{y'(0) = 1}
@end group
@end example

@noindent
Its solution would be

@ifnottex
@example
@math{y(t) = sin(t)}
@end example
@end ifnottex
@tex
@example
@math{y(t) = \sin(t)}
@end example
@end tex

@noindent
To solve this problem using @code{ode}, you must express this
second-order equation as two first-order equations.  Toward this end you
would introduce a new function, called @math{yp} say, of the independent
@w{variable @math{t}}.  The pair of equations

@example
@group
@math{y' = yp}
@math{yp' = -y}
@end group
@end example

@noindent
would be equivalent to the single equation above.  This sort of
reduction of an @math{n}'th order problem to @math{n} first order
problems is a standard technique.

To plot the variable @math{y} as a function of the @w{variable
@math{t}}, you could create a file containing the lines

@example
@group
# sine : y''(t) = -y(t), y(0) = 0, y'(0) = 1
sine' = cosine
cosine' = -sine
sine = 0
cosine = 1
print t, sine
@end group
@end example

@noindent
(@math{y} and @math{yp} have been renamed @i{sine} and @i{cosine}, since
that is what they will be.)  Call this file @file{sine}.  To display the
generated data points on an @w{X Window} System display as they are
generated, you would type

@example
@group
ode -f sine | graph -T X -x 0 10 -y -1 1
step 0, 2*PI
.
@end group
@end example

@noindent
After you type the @code{ode} line, @code{graph @w{-T X}} will @w{pop up} a
window, and after you type the @samp{step} line, the generated dataset
will be drawn @w{in it}.  The @samp{-x 0 10} and @samp{-y -1 1} options,
which set the bounds for the two axes, are necessary if you wish to
display points in @w{real time}: as they are generated.  @w{If the} axis
bounds were not specified on the command line, @code{graph @w{-T X}} would wait
until all points are read from the input before determining the bounds,
and drawing the plot.

A slight modification of this example, showing how @code{ode} can
generate several datasets in succession and plot them on the same graph,
would be the following.  Suppose that you type on your terminal the
following lines.

@example
@group
ode -f sine | graph -T X -C -x 0 10 -y -1 1
step 0, PI
step PI, 2*PI
step 2*PI, 3*PI
.
@end group
@end example

@noindent
Then the sine curve will be traced out in three stages.  Since the
output from each @samp{step} statement ends with a blank line,
@code{graph @w{-T X}} will treat each section of the sine curve as a different
dataset.  If you are using a color display, each of the three sections
will be plotted in a different color.  This is a feature provided by
@code{graph @w{-T X}}, which normally changes its linemode after each dataset
it reads.  If you do not like this feature, you may turn it off by using
@samp{graph -T X -B} instead of @samp{graph -T X}.

In the above examples, you could use any of the other variants of
@code{graph} instead of @code{graph @w{-T X}}.  For example, you could use
@code{graph -T ps} to obtain a plot in encapsulated Postscript format,
by typing

@example
@group
ode -f sine | graph -T ps > plot.ps
step 0, 2*PI
.
@end group
@end example

@noindent
You should note that of the six variants of @code{graph}, @code{graph -T
ps}, @code{graph -T fig}, and @code{graph -T hpgl} do not produce output
in real time, even when the axis bounds are specified with the @samp{-x}
@w{and @samp{-y}} options.  So if @code{graph -T ps}, @code{graph -T
fig}, or @code{graph -T hpgl} is used, the plot will be produced only
when input from @code{ode} is terminated, which will occur when you
@w{type @samp{.}}.

In the preceding examples, the derivatives of the dependent variables
were specified by comparatively simple expressions.  They are allowed to
be arbitrarily complicated functions of the dependent variables and the
independent variable.  They also may involve any of the functions that
are built into @code{ode}.  @code{ode} has a fair number of functions
@w{built in}, including @t{abs}, @t{sqrt}, @t{exp}, @t{log}, @t{log10},
@t{sin}, @t{cos}, @t{tan}, @t{asin}, @t{acos}, @t{atan}, @t{sinh},
@t{cosh}, @t{tanh}, @t{asinh}, @t{acosh}, and @t{atanh}.  Less familiar
functions which are built @w{into it} are @t{besj0}, @t{besj1},
@t{besy0}, @t{besy1}, @t{erf}, @t{erfc}, @t{inverf}, @t{lgamma},
@t{gamma}, @t{norm}, @t{invnorm}, @t{ibeta}, and @t{igamma}.  These have
the same definitions as in the plotting program @code{gnuplot}.  (All
functions take a single argument, except for @t{ibeta}, which takes
three, and @t{igamma}, which takes two).  @code{ode} also knows the
meaning of the constant @samp{PI}, as the above examples show.  The
names of the preceding functions are reserved, so, e.g., @samp{cos} and
@samp{sin} may not be used as names for variables.

Other than the restriction of avoiding reserved names and keywords, the
names of variables may be chosen arbitrarily.  Any sequence of
alphanumeric characters starting with an alphabetic character may be
used; the first 32 characters are significant.  @w{It is} worth noting
that @code{ode} identifies the independent variable by the fact that it
is (or should be) the only variable that has not appeared on the left
side of a differential equation or an initial value assignment.  If
there is more than than one such variable then no stepping takes place;
instead, an error message is printed.  If there is no such variable,
@w{a dummy} independent variable is invented and given the name
@samp{(indep)}, internally.

@node Additional ode Examples, ode Invocation, Simple ode Examples, ode
@section Additional examples using @code{ode}

We explain here how to use some additional features of @code{ode}.
However, the discussion below does not cover all of its capabilities.
For a complete list of command-line options, see @ref{ode Invocation}.

It is easy to use @code{ode} to create plots of great beauty.  An
example would be a plot of a @emph{strange attractor}, namely the Lorenz
attractor.  Suppose that a file named @file{lorenz} contains the
following lines.

@example
@group
# The Lorenz model, a system of three coupled ODE's with parameter r.
x' = -3*(x-y)
y' = -x*z+r*x-y
z' = x*y-z
@end group

@group
r = 26
x = 0; y = 1; z = 0
@end group

@group
print x, y
step 0, 200
@end group
@end example

@noindent
Then executing the command

@example
<lorenz ode | graph -T X -C -x -10 10 -y -10 10
@end example

@noindent
would produce a plot of the Lorenz attractor (strictly speaking, @w{a
plot} of one of its two-dimensional projections).  You may produce a
Postscript plot of the Lorenz attractor, and print it, by doing
something like

@example
<lorenz ode | graph -T ps -x -10 10 -y -10 10 -W 0 | lpr
@end example

@noindent
The @samp{-W 0} (``zero width'') option requests that @code{graph -T ps}
use the thinnest line possible, to improve the visual appearance of the
plot on a printer or other Postscript device.

Besides plotting a visually striking object in real time, the Lorenz
attractor example shows how statements may be separated by semicolons,
rather than appearing on different lines.  @w{It also} shows how to use
symbolic constants.  @w{In the} description read by @code{ode} the
@w{parameter @math{r}} is a variable like @math{x}, @math{y}, @w{and
@math{z}}.  But unlike them it is not updated during stepping, since no
formula for its @w{derivative @math{r'}} is given.

Our second example deals with the interactive construction of a `phase
portrait': @w{a set} of solution curves with different initial
conditions.  Phase portraits are of paramount interest in the
qualitative theory of differential equations, and also possess
@ae{}sthetic appeal.

Since a description read by @code{ode} may contain any number of
@samp{step} statements, multiple solution curves may be plotted in a
single run.  The most recent @samp{print} statement will be used with
each @samp{step} statement.  @w{In practice}, a phase portrait would be
drawn from a few well-chosen solution curves.  Choosing a good set of
solution curves may require experimentation, which makes interactivity
and real-time plotting all-important.

As an example, consider a so-called Lotka--Volterra predator--prey
model.  Suppose that in a lake there are two species of fish: @w{A (the
prey)} who live by eating a plentiful supply of plants, and B (the
predator) who @w{eat A}.  Let @math{x(t)} be the population @w{of A} and
@math{y(t)} the population @w{of B} at @w{time @math{t}}.  @w{A crude}
model for the interaction of A @w{and B} is given by the equations

@example
@group
@math{x' = x(a-by)}
@math{y' = y(cx-d)}
@end group
@end example

@noindent
where @math{a, b, c, d} are positive constants.  To draw a phase
portrait for this system interactively, you could type

@example
@group
ode | graph -T X -C -x 0 5 -y 0 5
x' = (a - b*y) * x
y' = (c*x - d) * y
a = 1; b = 1; c = 1; d = 1;
print x, y
@end group
@group
x = 1; y = 2
step 0, 10
x = 1; y = 3
step 0, 10
x = 1; y = 4
step 0, 10
x = 1; y = 5
step 0, 10
.
@end group
@end example

@noindent
Four curves will be drawn in succession, one per @samp{step} line.  They
will be periodic; this periodicity is similar to the fluctuations
between predator and prey populations that occur in real-world
ecosystems.  @w{On a} color display the curves will appear in different
colors, since @w{by default}, @code{graph @w{-T X}} changes the line mode
between datasets.  That feature may be @w{turned off} by using
@samp{graph -T X -B} rather than @samp{graph -T X}.

It is sometimes useful to use @code{ode} and @code{graph} to plot
discrete points, which are not joined by line segments to form a curve.
Our third example illustrates this.  Suppose the file @file{atwoods}
contains the lines

@example
@group
m = 1
M = 1.0625
a = 0.5; adot = 0
l = 10; ldot = 0
@end group

@group
ldot' = ( m * l * adot * adot - M * 9.8 + m * 9.8 * cos(a) ) / (m + M)
l'    = ldot
adot' = (-1/l) * (9.8 * sin(a) +  2 * adot * ldot)
a'    = adot
@end group

@group
print l, ldot
step 0, 400
@end group
@end example

@noindent
The first few lines describe the functioning of a so-called swinging
Atwood's machine.  An ordinary Atwood's machine consists of a taut cord
draped over a pulley, with a mass attached to the cord at each end.
Normally, the heavier @w{mass (@math{M})} would win against the lighter
@w{mass (@math{m})}, and draw it upward.  @w{A swinging} Atwood's
machine allows the lighter mass to swing back and forth @w{as well} as
move vertically.

The @samp{print l, ldot} statement requests that the vertical position
and vertical velocity of the lighter mass be printed out at each step.
@w{If you} run the command

@example
<atwoods ode | graph -T X -x 9 11 -y -1 1 -m 0 -S 1 -X l -Y ldot
@end example

@noindent
you will obtain a real-time plot.  The @samp{-m 0} option requests that
successive data points not be joined by line segments, and the @samp{-S
1} option requests that plotting @w{symbol #1} (@w{a dot}) be plotted at
the location of each point.  As you will see if you run this command,
the heavy mass does not win against the lighter mass.  Instead the
machine oscillates non-periodically.  Since the motion is non-periodic,
the plot benefits from being drawn as a sequence of unconnected points.

We conclude by mentioning a few features of @code{ode} that may be
useful when things are not going quite right.  One of them is the
@samp{examine} statement.  @w{It may} be used to discover pertinent
information about any variable in a system.  For details, see @ref{Input
Language}.

Another useful feature is that the @samp{print} statement may be used to
print out more than just the value of a variable.  As we have seen, if
the name of the variable is followed by @samp{'}, the derivative of the
variable will be printed instead.  @w{In a} similar way, following the
variable name with @samp{?}, @samp{!}, or @samp{~} prints respectively
the relative single-step error, the absolute single-step error, or the
accumulated error (not currently implemented).  These quantities are
discussed in @ref{Numerical Error}.

The @samp{print} statement may be more complicated than was shown in the
preceding examples.  Its general structure is

@example
print <pr-list> [every <const>] [from <const>]
@end example

@noindent
The bracket notation @samp{[@dots{}]} means that the enclosed statements
are optional.  Until now we have not mentioned the @samp{every} clause
or the @samp{from} clause.  The @t{<pr-list>} is familiar, however; it
is simply a comma-separated list of variables.  For example, in the
statement

@example
print t, y, y' every 5 from 1
@end example

@noindent
the @t{<pr-list>} is @t{<t, y, y'>}.  The clauses @samp{every 5} and
@samp{from 1} specify that printing should take place after every fifth
step, and that the printing should begin when the independent
@w{variable @math{t}} @w{reaches 1}.  @w{An @samp{every}} clause is
useful if you wish to `@w{thin out}' the output generated by a
@samp{step} statement, and a @samp{from} clause is useful if you wish to
view only the final portion of a solution curve.

@node ode Invocation, Diagnostics, Additional ode Examples, ode
@section @code{ode} command-line options

@noindent
The command-line options to @code{ode} are listed below.  There are
several sorts of option:

@enumerate
@item
Options affecting the way in which input is read.
@item 
Options affecting the format of the output.
@item
Options affecting the choice of numerical solution scheme, and the
error bounds that will be imposed @w{on it}.
@item
Options that request information.
@end enumerate

@noindent
The following option affects the way input is read.

@table @samp
@item -f @var{filename}
@itemx --input-file @var{filename}
Read input from @var{filename} before reading from standard input.
@end table

@noindent
The following options affect the output format.

@table @samp
@item -p @var{precision}
@itemx --precision @var{precision}
When printing numerical results, use @var{precision} significant
figures.  If this option is given, all output will be in scientific
notation.
@item -t
@itemx --title
Print a title line at the head of the output, naming the columns.  If
this option is given, the default print format will be scientific
notation.
@end table

@noindent
The following options specify the numerical integration scheme.  Only
one of the three basic option @samp{-R}, @samp{-A}, and @samp{-E} may be
specified.  The default is @samp{-R} (Runge--Kutta--Fehlberg).

@table @samp
@item -R [@var{stepsize}]
@itemx --runge-kutta [@var{stepsize}]
Use a fifth-order Runge--Kutta--Fehlberg algorithm, with an adaptive
stepsize unless a constant stepsize is specified.  When a constant
stepsize is specified and no error analysis is requested, then a
classical fourth-order Runge--Kutta scheme is used.
@item -A [@var{stepsize}]
@itemx --adams-moulton [@var{stepsize}]
Use a fourth-order Adams--Moulton predictor--corrector scheme, with an
adaptive stepsize unless a constant stepsize, @var{stepsize}, is
specified.  The Runge--Kutta--Fehlberg algorithm is used to get past
`bad' points (@w{if any}).
@item -E [@var{stepsize}]
@itemx --euler [@var{stepsize}]
Use a `quick and dirty' Euler scheme, with a constant stepsize.  The
default value of @var{stepsize} @w{is 0.1}.  Not recommended for serious
applications.
@item -h @var{hmin} [@var{hmax}]
@itemx --step-size-bound @var{hmin} [@var{hmax}]
Use a lower bound @var{hmin} on the stepsize.  The numerical scheme will
not let the stepsize go below @var{hmin}.  The default is to allow the
stepsize to shrink to the machine limit, i.e., the minimum nonzero
double-precision floating point number.  The optional argument
@var{hmax}, if included, specifies a maximum value for the stepsize.
@w{It is} useful in preventing the numerical routine from skipping
quickly over an interesting region.
@end table

@noindent
The following options set the error bounds on the numerical solution
scheme.

@table @samp
@item -r @var{rmax} [@var{rmin}]
@itemx --relative-error-bound @var{rmax} [@var{rmin}]
@item -e @var{emax} [@var{emin}]
@itemx --absolute-error-bound @var{emax} [@var{emin}]
@ifnottex
The @samp{-r} option sets an upper bound on the relative single-step
error.  If the @samp{-r} option is used, the relative single-step error
in any dependent variable will never exceed @var{rmax} (the default for
which is @math{10^(-9)}).  If this should occur, the solution will be
abandoned and an error message will be printed.  If the stepsize is not
constant, the stepsize will be decreased `adaptively', so that the upper
bound on the single-step error is not violated.  Thus, choosing a
smaller upper bound on the single-step error will cause smaller
stepsizes to be chosen.  @w{A lower} bound @var{rmin} may optionally be
specified, to suggest when the stepsize should be increased (the default
for @var{rmin} is @var{rmax}/1000).  The @samp{-e} option is similar to
@samp{-r}, but bounds the absolute rather than the relative single-step
error.
@end ifnottex
@tex
The @samp{-r} option sets an upper bound on the relative single-step
error.  If the @samp{-r} option is used, the relative single-step error
in any dependent variable will never exceed @var{rmax} (the default for
which is $10^{-9}$).  If this should occur, the solution will be
abandoned and an error message will be printed.  If the stepsize is not
constant, the stepsize will be decreased `adaptively', so that the upper
bound on the single-step error is not violated.  Thus, choosing a
smaller upper bound on the single-step error will cause smaller
stepsizes to be chosen.  @w{A lower} bound @var{rmin} may optionally be
specified, to suggest when the stepsize should be increased (the default
for @var{rmin} is @var{rmax}/1000).  The @samp{-e} option is similar to
@samp{-r}, but bounds the absolute rather than the relative single-step
error.
@end tex
@item -s
@itemx --suppress-error-bound
Suppress the ceiling on single-step error, allowing @code{ode} to
continue even if this ceiling is exceeded.  This may result in large
numerical errors.
@end table

@noindent
Finally, the following options request information.

@table @samp
@item --help
Print a list of command-line options, and then exit.
@item --version
Print the version number of @code{ode} and the plotting utilities
package, and exit.
@end table

@node Diagnostics, Numerical Error, ode Invocation, ode
@section Diagnostic messages

@code{ode} is always in one of two states:

@itemize @bullet
@item
Reading input.  The input includes a specification of a system of
ordinary differential equations, together with instructions for
@w{solving it} numerically: @w{a @samp{print}} line and a @samp{step}
line.
@item
Numerically solving a system, and printing the resulting output.
@end itemize

@noindent
@code{ode} moves from the first to the second state after it sees and
processes a @samp{step} line.  @w{It returns} to the first state after
the generated output has been printed.  Errors may occur in either the
`reading' state or the `solving' state, and may terminate computations
or even cause @code{ode} to exit.  We now explain the possible sorts of
error.

While reading input, @code{ode} may encounter a syntax error: an
ungrammatical line that it is unable to parse.  (For a summary of its
input grammar, see @ref{Input Language}.)  If so, it emits the error
message

@example
ode::nnn: syntax error
@end example

@noindent
where @samp{nnn} is the number of the line containing the error.  When
the @samp{-f filename} option is used to specify an input file, 
the error message will read

@example
ode:filename:nnn: syntax error
@end example

@noindent
for errors encountered inside the input file.  Subsequently, when
@code{ode} begins reading the standard input, line numbers will start
over again @w{from 1}.

No effort is made to recover from syntax errors in the input.  However,
there is a meager effort to resynchronize, so that more than one syntax
error in a file may be found at the same time.

It is also possible that a fatal arithmetic exception (such as a
division by zero, or a floating point overflow) may occur while
@code{ode} is reading input.  If such an exception occurs, @code{ode}
will print an ``Floating point exception'' error message and exit.
Arithmetic exceptions are machine-dependent.  @w{On some} machines, the
line

@example
y = 1/0
@end example

@noindent
would induce an arithmetic exception.  Also on some machines (not
necessarily the same ones), the lines

@example
@group
y = 1e100
z = y^4
@end group
@end example

@ifnottex
@noindent
would induce an arithmetic exception.  That is because on most
machines, the double precision quantities that @code{ode} uses
internally are limited to a maximum size of approximately 1.8x10^308.
@end ifnottex
@tex
@noindent
would induce an arithmetic exception.  That is because on most machines,
the double precision quantities that @code{ode} uses internally are
limited to a maximum size of approximately $1.8\times10^{308}$.
@end tex

When @code{ode} is in the `solving' state, i.e., computing a numerical
solution, similar arithmetic exceptions may occur.  If so, the solution
will be interrupted and a message resembling

@example
ode: arithmetic exception while calculating y'
@end example

@noindent
will be printed.  However, @code{ode} will not exit; the exception will
be `caught'.  @code{ode} itself recognizes the following exceptional
conditions: square root of a negative number, logarithm of a
non-positive number, and negative number raised to a non-integer power.
@code{ode} will catch any of these operations before it is performed,
and print an error message specifying which illegal operation it has
encountered.

@example
ode: square root of a negative number while calculating y'
@end example

@noindent
would be a typical error message.

If the machine on which @code{ode} is running supports the
@samp{matherr} facility for reporting errors in the computation of
standard mathematical functions, it will be used.  This facility reports
domain errors and range errors (overflows, underflows, and losses of
significance) that could occur when evaluating such functions as
@samp{log}, @samp{gamma}, etc.; again, before they are performed.  If
the @code{matherr} facility is present, the error message will be fairly
informative.  For example, the error message

@example
ode: range error (overflow) in lgamma while calculating y'
@end example

@noindent
could be generated if the logarithmic gamma function @samp{lgamma} is
evaluated at a value of its argument that is too large.  The generation
of any such message, except a message warning of an underflow, will
cause the numerical solution to be interrupted.

There is another sort of error that may occur during numerical solution:
the condition that an error ceiling, which may be set by the user with
the @samp{-r} option or the @samp{-e} option, is exceeded.  This too
will cause the numerical solution to be abandoned, and @code{ode} to
switch back to reading input.

@node Numerical Error, Running Time, Diagnostics, ode
@section Numerical error and how to avoid it

This discussion is necessarily incomplete.  Entire books exist on any
subject mentioned below (e.g., floating point error).  Our goals are
modest: first, to introduce the basic notions of error analysis as they
apply to @code{ode}; second, @w{to steer} you around the more obvious
pitfalls.  You should look through a numerical analysis text (e.g.,
Atkinson's @cite{Introduction to Numerical Analysis}) before beginning
this discussion.

We begin with some key definitions.  The error of greatest concern is
the difference between the actual solution and the numerical
approximation to the solution; this is termed the @emph{accumulated
error}, since the error is @w{built up} during each numerical step.
Unfortunately, an estimate of this error is usually not available
without knowledge of the actual solution.  There are, however, several
more usable notions of error.  The @emph{single-step error}, in
particular, is the difference between the actual solution and the
numerical approximation to the solution after any single step, assuming
the value at the beginning of the step is correct.

@ifnottex
The @emph{relative single-step error} is the single-step error, divided
by the current value of the numerical approximation to the solution.
Why not divided by the current value of the solution itself?  The reason
is that the solution is not exactly known.  When free to choose a
stepsize, @code{ode} will do so on the basis of the relative single-step
error.  By default, it will choose the stepsize so as to maintain an
accuracy of eight significant digits in each step.  That is, it will
choose the stepsize so as not to violate an upper bound of
@math{10^(-9)} on the relative single-step error.  This ceiling may be
adjusted with the @samp{-r} option.
@end ifnottex
@tex
The @emph{relative single-step error} is the single-step error, divided
by the current value of the numerical approximation to the solution.
Why not divided by the current value of the solution itself?  The reason
is that the solution is not exactly known.  When free to choose a
stepsize, @code{ode} will do so on the basis of the relative single-step
error.  By default, it will choose the stepsize so as to maintain an
accuracy of eight significant digits in each step.  That is, it will
choose the stepsize so as not to violate an upper bound of $10^{-9}$ on
the relative single-step error.  This ceiling may be adjusted with the
@samp{-r} option.
@end tex

Where does numerical error come from?  There are two sources.  The first
is the finite precision of machine computation.  All computers work with
floating point numbers, which are not real numbers, but only an
approximation to real numbers.  However, all computations performed by
@code{ode} are done to double precision, so floating point error tends
to be relatively small.  You may nonetheless detect the difference
between real numbers and floating point numbers by experimenting with
the @samp{-p 17} option, which will print seventeen significant digits.
@w{On most} machines, that is the precision of a double precision
floating point number.

The second source of numerical error is often called the
@emph{theoretical truncation error}.  @w{It is} the difference between
the actual solution and the approximate solution due solely to the
numerical scheme.  At the root of many numerical schemes is an infinite
series; for ordinary differential equations, it is a Taylor expansion.
Since the computer cannot compute all the terms in an infinite series,
@w{a numerical} scheme necessarily uses a truncated series; hence the
term.  The single-step error is the sum of the theoretical truncation
error and the floating point error, though in practice the floating
point error is seldom included.  The single-step error estimated by
@code{ode} consists only of the theoretical truncation error.

We say that a numerical scheme is @emph{stable}, when applied to a
particular initial value problem, if the error accumulated during the
solution of the problem over a fixed interval decreases as the stepsize
decreases; @w{at least}, over a wide range of step sizes.  With this
definition both the Runge--Kutta--Fehlberg (@samp{-R}) scheme and the
Adams--Moulton (@samp{-A}) scheme are stable (@w{a statement} based more
on experience than on theoretical results) for a wide class of problems.

After these introductory remarks, we list some common sources of
accumulated error and instability in any numerical scheme.  Usually,
problems with large accumulated error and instability are due to the
single-step error in the vicinity of a `bad' point being large.

@enumerate
@item Singularities.

@code{ode} should not be used to generate a numerical solution on any
interval containing a singularity.  That is, @code{ode} should not be
asked to step over points at which the system of differential equations
is singular or undefined.

You will find the definitions of singular point, regular singular point,
and irregular singular point in any good differential equations text.
If you have no favorite, try Birkhoff and Rota's @cite{Ordinary
Differential Equations}, @w{Chapter 9}.  Always locate and classify the
singularities of a system, @w{if any}, before applying @code{ode}.

@item 
Ill-posed problems.

For @code{ode} to yield an accurate numerical solution on an interval,
the true solution must be defined and well-behaved on that interval.
The solution must also be real.  Whenever any of these conditions is
violated, the problem is said to be @emph{ill-posed}.  Ill-posedness may
occur even if the system of differential equations is well-behaved on
the interval.  Strange results, e.g., the stepsize suddenly shrinking to
the machine limit or the solution suddenly @w{blowing up}, may indicate
ill-posedness.

As an example of ill-posedness (in fact, an undefined solution) consider
the innocent-looking problem:

@ifnottex
@example
@group
@math{y' = y^2}
@math{y(1) = -1}
@end group
@end example
@end ifnottex
@tex
@example
@group
$y' = y^2$
$y(1) = -1$
@end group
@end example
@end tex

@noindent
The solution on the domain @math{t > 0} is

@example
@math{y(t) = -1/t}.
@end example

@noindent
With this problem you must not compute a numerical solution on any
interval that includes @math{t=0}.  To convince yourself of this, try to
use the @samp{step} statement

@example
step 1, -1
@end example

@noindent
on this system.  How does @code{ode} react?

As another example of ill-posedness, consider the system

@example
@math{y'=1/y}
@end example

which is undefined at @math{y=0}.  The general solution is

@ifnottex
@example
@math{y = +/- (2(t-C))^(1/2)},
@end example
@end ifnottex
@tex
@example
$y = \pm (2(t-C))^{1/2}$,
@end example
@end tex

@ifnottex
so that if the condition @math{y(2)=2} is imposed, the solution will be
@math{(2t)^(1/2)}.  Clearly, if the domain specified in a @samp{step}
statement includes negative values @w{of @math{t}}, the generated
solution will be bogus.
@end ifnottex
@tex
so that if the condition @math{y(2)=2} is imposed, the solution will be
$(2t)^{1/2}$.  Clearly, if the domain specified in a @samp{step}
statement includes negative values @w{of @math{t}}, the generated
solution will be bogus.
@end tex

In general, when using a constant stepsize you should be careful not to
@w{`step over'} bad points or bad regions.  When allowed to choose a
stepsize adaptively, @code{ode} will often spot bad points, but not
always.

@item 
Critical points.

An @emph{autonomous} system is one that does not include the independent
variable explicitly on the right-hand side of any differential equation.
A @emph{critical point} for such a system is a point at which all
right-hand sides equal zero.  For example, the system

@example
@group
@math{y' = 2x}
@math{x' = 2y}
@end group
@end example

has only one critical point, at @math{(x,y) = (0,0)}.

A critical point is sometimes referred to as a @emph{stagnation point}.
That is because a system at a critical point will remain there forever,
though a system near a critical point may undergo more violent motion.
Under some circumstances, passing near a critical point may give rise to
a large accumulated error.

As an exercise, solve the system above using @code{ode}, with the
initial condition @math{x(0) = y(0) = 0}.  The solution should be
constant in time.  Now do the same with points near the critical point.
What happens?

You should always locate the critical points of a system before
attempting a solution with @code{ode}.  Critical points may be
classified (as equilibrium, vortex, unstable, stable, etc.) and this
classification may be @w{of use}.  To find out more about this, consult
any book dealing with the qualitative theory of differential equations
(e.g., Birkhoff and Rota's @cite{Ordinary Differential Equations},
@w{Chapter 6}).

@item 
Unsuitable numerical schemes

If the results produced by @code{ode} are bad in the sense that
instability appears to be present, or an unusually small stepsize needs
to be chosen needed in order to reduce the single-step error to
manageable levels, it may simply be that the numerical scheme being used
is not suited to the problem.  For example, @code{ode} currently has no
numerical scheme which handles so-called `stiff' problems very well.

As an example, you may wish to examine the stiff problem:

@example
@group
@math{y' = -100 + 100t + 1}
@math{y(0)=1}
@end group
@end example

@noindent
on the domain @math{[0,1]}.  The exact solution is

@ifnottex
@example 
@math{y(t) = e^(-100t) + t}.
@end example
@end ifnottex
@tex
@example 
$y(t) = e^{-100t} + t$.
@end example
@end tex

@noindent
It is a useful exercise to solve this problem with @code{ode} using
various numerical schemes, stepsizes, and relative single-step error
bounds, and compare the generated solution curves with the actual
solution.
@end enumerate

There are several rough and ready heuristic checks you can perform on
the accuracy of any numerical solution produced by @code{ode}.  We
discuss them @w{in turn}.

@enumerate
@item Examine the stability of  solution curves: do they converge?

That is, check how changing the stepsize affects a solution curve.  As
the stepsize decreases, the curve should converge.  If it does not, then
either the stepsize is not small enough or the numerical scheme is not
suited to the problem.  In practice, you would proceed as follows.

@itemize @bullet
@item
If using an adaptive stepsize, superimpose the solution curves for
successively smaller bounds on the relative single-step error (obtained
with, e.g., @samp{-r 1e-9}, @samp{-r 1e-11}, @samp{-r 1e-13}, @dots{}).
If the curves converge then the solution is to all appearances stable,
and your accuracy is sufficient.

@item
If employing a constant stepsize, perform a similar analysis by
successively halving the stepsize.
@end itemize

The following example is one that you may wish to experiment with.  Make
a file named @file{qcd} containing:

@example
@group
# an equation arising in QCD (quantum chromodynamics)
f'   = fp
fp'  = -f*g^2
g'   = gp
gp'  = g*f^2
f = 0; fp = -1; g = 1; gp = -1
@end group

@group
print t, f
step 0, 5
@end group
@end example

@noindent
Next make a file named @file{stability}, containing the lines:

@example
@group
: sserr is the bound on the relative single-step error
for sserr
do
ode -r $sserr < qcd
done | spline -n 500 | graph -T X -C
@end group
@end example

This is a `shell script', which when run will superimpose numerical
solutions with specified bounds on the relative single-step error.  To
run it, type:

@example
sh stability 1 .1 .01 .001
@end example

and a plot of the solutions with the specified error bounds will be
drawn.  The convergence, showing stability, should be quite
illuminating.

@item Check invariants of the system: are they constant?

Many systems have invariant quantities.  For example, if the system is a
mathematical model of a `conservative' physical system then the `energy'
(@w{a particular} function of the dependent variables of the system)
should be constant in time.  In general, knowledge about the qualitative
behavior of any dependent variable may be used to check the quality of
the solution.

@item Check a family of solution curves: do they diverge?

A rough idea of how error is propagated is obtained by viewing a family
of solution curves about the numerical solution in question, obtained by
varying the initial conditions.  If they diverge sharply---@w{that is},
if two solutions which start out very close nonetheless @w{end up} far
apart---then the quality of the numerical solution is dubious.  On the
other hand, if the curves do not diverge sharply then any error that is
present will in all likelihood not increase by more than an order of
magnitude @w{or so} over the interval.  Problems exhibiting no sharp
divergence of neighboring solution curves are sometimes called
@emph{well-conditioned}.
@end enumerate

@node Running Time, Input Language, Numerical Error, ode
@section Running time

The time required for @code{ode} to solve numerically a system of
ordinary differential equations depends on a great many factors.  @w{A
few} of them are: number of equations, complexity of equations (number
of operators and nature of the operators), and number of steps taken
(@w{a very} complicated function of the difficulty of solution, unless
constant stepsizes are used).  The most effective way to gauge the time
required for solution of a system is to clock a short or imprecise run
of the problem, and reason as follows: the time required to take two
steps is roughly twice that required for one; and there is a
relationship between the number of steps required and the relative error
ceiling chosen.  That relationship depends on the numerical scheme being
used, the difficulty of solution, and perhaps on the magnitude of the
error ceiling itself.  @w{A few} carefully planned short runs may be
used to determine this relationship, enabling a long but imprecise run
to be used as an aid in projecting the cost of a more precise run over
the same region.  Lastly, if a great deal of data is printed, it is
likely that more time is spent in printing the results than in computing
the numerical solution.

@node Input Language, ODE Bibliography, Running Time, ode
@section The @code{ode} input language formally specified

The following is a formal specification of the grammar for @code{ode}'s
input language, in Backus--Naur form.  Nonterminal symbols in the
grammar are enclosed in angle brackets.  Terminal tokens are in all
capitals.  Bare words and symbols stand for themselves.

@example
@group
<program>    ::=        ... empty ...
               |  <program> <statement>
@end group


@group
<statement>  ::=  SEP
               |  IDENTIFIER = <const> SEP
               |  IDENTIFIER ' = <expression> SEP
               |  print <printlist> <optevery> <optfrom> SEP
               |  step <const> , <const> , <const> SEP
               |  step <const> , <const> SEP
               |  examine IDENTIFIER SEP
@end group


@group
<printlist>  ::=  <printitem>
               |  <printlist> , <printitem>
@end group


@group
<printitem>  ::=  IDENTIFIER
               |  IDENTIFIER '
               |  IDENTIFIER ?
               |  IDENTIFIER !
               |  IDENTIFIER ~
@end group


@group
<optevery>   ::=        ... empty ...
               |  every <const>
@end group


@group
<optfrom>    ::=        ... empty ...
               |  from <const>
@end group


@group
<const>      ::=  <expression>
@end group


@group
<expression> ::=  ( <expression> )
               |  <expression> + <expression>
               |  <expression> - <expression>
               |  <expression> * <expression>
               |  <expression> / <expression>
               |  <expression> ^ <expression>
               |  FUNCTION ( <expression> )
               |  - <expression>
               |  NUMBER
               |  IDENTIFIER
@end group
@end example

@noindent
Since this grammar is ambiguous, the following table summarizes the
precedences and associativities of operators within expressions.
Precedences decrease from top to bottom.

@example
@group
Class           Operators    Associativity

Exponential         ^            right
Multiplicative      * /          left
Additive            + -          left
@end group
@end example

As noted in the grammar, there are six types of nontrivial statement.
We now explain the effects (the `semantics') of each type, @w{in turn}.

@enumerate
@item 
@t{IDENTIFIER ' = <expression>}

@noindent This defines a first-order differential equation.  
The derivative of @t{IDENTIFIER} is specified by @t{<expression>}.  If a
dynamic variable does not appear on the left side of a statement of this
form, its derivative is assumed to be zero.  That is, it is a symbolic
constant.

@item 
@t{IDENTIFIER = <const>}

@noindent
This sets the value of @t{IDENTIFIER} to the current value of
@t{<expression>}.  Dynamic variables that have not been initialized in
this way are set to zero.

@item 
@t{step <const> , <const>}
@item 
@t{step <const> , <const> , <const>}

@noindent
A @samp{step} statement causes the numerical scheme to be executed.  The
first @t{<const>} is the initial value of the independent variable.  The
second is its final value.  The third is a stepsize; if given, it
overrides any stepsize that may be specified on the command line.
Usually the stepsize is not specified, and it varies adaptively as the
computation proceeds.

@item 
@t{print <printlist> [ every <const> ] [ from <const> ]}

@noindent
A @samp{print} statement controls the content and frequency of the
numerical output.  @t{<printlist>} is a comma-separated list of
@t{IDENTIFIER}s, where each @t{IDENTIFIER} may be followed by @samp{'},
denoting the derivative, or @samp{?}, denoting the relative single-step
error, or @samp{!}, denoting the absolute single-step error, or
@samp{~}, denoting the accumulated error (not currently implemented).
The specified values are printed in the order they are found.  Both the
@samp{every} clause and the @samp{from} clause are optional.  If the
@samp{every} clause is present, a printing occurs every @t{<const>}
iterations of the numerical algorithm.  The default is to print on every
iteration (i.e.@: @samp{every 1}).  The first and last values are always
printed.  If the @samp{from} clause is present, it means to begin
printing when the independent variable reaches or exceeds @t{<const>}.
The default is to begin printing immediately.

If no @samp{print} statement has been supplied, then the independent
variable and all dependent variables which have differential equations
associated with them are printed.  The independent variable is printed
first; the dependent variables follow in the order their equations were
given.

@item 
@t{examine IDENTIFIER}

@noindent
An @samp{examine} statement, when executed, causes a table of
interesting information about the named variable to be printed on the
standard output.  For example, if the statement @samp{examine y} were
encountered after execution of the `ode to Euler' example discussed
elsewhere, the output would be:

@example
@group
"y" is a dynamic variable
value:2.718282
prime:2.718282
sserr:1.121662e-09
aberr:3.245638e-09
acerr:0
 code:	push "y"
@end group
@end example

The phrase `dynamic variable' means that there is a differential
equation describing the behavior @w{of @t{y}}.  The numeric fields in
the table are:

@table @t
@item value
Current value of the variable.
@item prime   
Current derivative of the variable.
@item sserr   
Relative single-step error for the last step taken.
@item aberr   
Absolute single-step error for the last step taken.
@item acerr   
Total error accumulated during the most recent @samp{step} statement.
Not currently implemented.
@end table

The @samp{code} section of the table lists the stack operations required
to compute the derivative @w{of @t{y}} (somewhat reminiscent of a
reverse Polish calculator).  This information may be useful in
discovering whether the precedences in the differential equation
statement were interpreted correctly, or in determining the time or
space expense of a particular calculation.  @samp{@t{push "y"}} means to
load @t{y}'s value on the stack, which is all that is required to
compute its derivative in this case.
@end enumerate

The grammar for the @code{ode} input language contains four types of
terminal token: @t{FUNCTION}, @t{IDENTIFIER}, @t{NUMBER}, @w{and
@t{SEP}}.  They have the following meanings.

@enumerate
@item
@t{FUNCTION}

One of the words: @t{abs}, @t{sqrt}, @t{exp}, @t{log}, @t{ln},
@t{log10}, @t{sin}, @t{cos}, @t{tan}, @t{asin}, @t{acos}, @t{atan},
@t{sinh}, @t{cosh}, @t{tanh}, @t{asinh}, @t{acosh}, @t{atanh},
@t{floor}, @t{ceil}, @t{besj0}, @t{besj1}, @t{besy0}, @t{besy1},
@t{erf}, @t{erfc}, @t{inverf}, @t{lgamma}, @t{gamma}, @t{norm},
@t{invnorm}, @t{ibeta}, @t{igamma}.  These are defined to have the same
meaning as in the plotting program @code{gnuplot}.  All functions take a
single argument, except for @t{ibeta}, which takes three, and
@t{igamma}, which takes two.  For trigonometric functions, all arguments
are expressed in radians.  The @t{atan} function is defined to give a
value between @minus{}PI/2 and PI/2 (inclusive).

@item
@t{IDENTIFIER}

A sequence of alphanumeric characters starting with an alphabetic
character.  The first 32 characters are significant.  Upper and
lower-case letters are distinct.  In identifiers, the underscore
character is considered alphabetic.  Function names and keywords may not
be used as identifiers, nor may @samp{PI}.

@item
@t{NUMBER}

A non-empty sequence of digits possibly containing a decimal point and
possibly followed by an exponent.  An exponent is @samp{e} @w{or
@samp{E}}, followed by an (optionally signed) one, two, or three-digit
number.  All numbers and all parts of numbers are @w{radix 10}.  @w{A
number} may not contain any white space.  The special word @samp{PI} is
a number.

@item
@t{SEP}

A separator: a semicolon or a (non-escaped) newline.
@end enumerate

In the @code{ode} input language, upper and lower-case letters are
distinct.  Comments begin with the character @samp{#} and continue to
the end of the line.  Long lines may be continued onto a second line by
ending the first line with a @w{backslash (@samp{\})}.  That is because
the combination backslash-newline is equivalent to a space.  

Spaces or tabs are required in the input whenever they are needed to
separate identifiers, numbers, and keywords from one another.  Except as
separators, they are ignored.

@node ODE Bibliography, , Input Language, ode
@section Bibliography on @code{ode} and solving differential equations

@itemize @asis
@item
K. E. Atkinson, @cite{An Introduction to Numerical Analysis}, Wiley,
1978.  @w{Chapter 6} contains a discussion of the literature on the
numerical solution of ordinary differential equations.

@item
G. Birkhoff and G. Rota, @cite{Ordinary Differential Equations}, 4th
ed., Wiley, 1989.

@item
N. B. Tufillaro, T. Abbott, and J. Reilly, @cite{An Experimental
Approach to Nonlinear Dynamics and Chaos}, Addison--Wesley, 1992.
@w{Appendix C} discusses an earlier version of @code{ode}.

@item
N. B. Tufillaro, E. F. Redish, and J. S. Risley, ``@code{ode}: @w{A
numerical} simulation of ordinary differential equations,'' 
pp.@: 480--481 in @cite{Proceedings of the Conference on Computers in 
Physics Instruction}, Addison--Wesley, 1990.
@end itemize

@node libplot, Appendices, ode, Top
@chapter @code{libplot}, a Function Library

@menu
* libplot Overview::	Programming with libplot: An overview
* C Programming::	C programming with libplot
* Functions::		A list of functions contained in libplot
* Driver Parameters::	Device driver parameters
@end menu

@node libplot Overview, C Programming, libplot, libplot
@section Programming with @code{libplot}: An overview

GNU @code{libplot} is a library of functions for drawing two-dimensional
vector graphics.  @w{It can} produce smooth, double-buffered animations
for the @w{X Window} System, and graphical output in many different file
formats.  @w{It is} `device-independent' in the sense that its API
(application programming interface) is to a large extent independent of
the choice of output device, or output format.

The graphical objects which @code{libplot} can draw include paths,
circles and ellipses, points, markers, and `adjusted labels' (justified
text strings).  @w{A @emph{path}} is a sequence of line segments,
circular arcs, and/or elliptic arcs, which may be open or closed.
User-specified filling of paths, circles, and ellipses is supported
(fill color, @w{as well} as pen color, may be specified).  There is
support for maintaining a Postscript-style stack of graphics contexts,
i.e., @w{a stack} of drawing attribute sets.  User-specifiable
attributes other than pen color and fill color include path-related
attributes such as line type and line width, and text-related attributes
such as font name, font size, and text angle.

The fundamental abstraction provided by @code{libplot} is that of a
@emph{Plotter}.  A Plotter is an object with an interface for the
drawing of vector graphics which is similar to the interface provided by
a traditional pen plotter.  There are many types of Plotter, which
differ in the display device they produce output for.  Any number of
Plotters, of the same or different types, may exist simultaneously in an
application.

The drawing operations supported by Plotters of different types are
identical, in agreement with the principle of device independence.  So a
graphics application that is linked with @code{libplot} may easily be
written so as to produce output for any or all of the supported output
formats.

The following are the currently supported types of Plotter.

@itemize @bullet
@item 
X Plotters.  An X Plotter, when opened, pops up a window on an @w{X
Window} System display and draws graphics @w{in it}.  The window will be
`@w{spun off}' when the Plotter is closed; if it is subsequently
reopened, a new window will be @w{popped up}.  A spun-off window will
remain on the screen but will vanish if you type @samp{q} or click your
mouse @w{in it}.  Future releases may permit @w{X Plotters}, when
reopened, to reuse an existing window.
@item 
X Drawable Plotters.  An X Drawable Plotter draws graphics in one or two
specified drawables associated with an @w{X Window System} display.
@w{A `drawable'} is either a window or a pixmap.  The drawables must be
passed to the Plotter as parameters.  (@xref{Driver Parameters}.)
@item 
Postscript Plotters.  A Postscript Plotter produces Postscript output
and directs it to a file or other specified output stream.  The output
is actually in EPS (encapsulated Postscript) format, so it may be
included in another document.  It may also be edited with the
@code{idraw} drawing editor.
@item 
Fig Plotters.  A Fig Plotter produces output in Fig format and directs
it to a file or other specified output stream.  The output may be edited
with the @code{xfig} drawing editor.  The @code{xfig} editor will export
drawings in various other formats for inclusion in documents.
@item
HP-GL Plotters.  An HP-GL Plotter produces output in the
Hewlett--Packard Graphics Language (HP-GL or HP-GL/2), and directs it to
a file or other specified output stream.  The output may be sent to a
Hewlett--Packard LaserJet printer or plotter, or included in another
document.
@item
Tektronix Plotters.  A Tektronix Plotter produces output in Tektronix
4014 format and directs it to a file or other specified output stream.
The output may be displayed on any Tektronix 4014 emulator.  Such an
emulator is built into @code{xterm}, the @w{X Window} System terminal
emulation program.  The DOS version of @code{kermit} also includes such
an emulator.
@item
Metafile Plotters.  A Metafile Plotter produces output in GNU metafile
format and directs it to a file or other specified output stream.  This
format is an extended version of the `plot(5)' format found on some
other operating systems.  (@xref{Metafiles}.)  @w{It may} be translated
to other formats by an invocation of GNU @code{plot}.  (@xref{plot}.)
@end itemize

A distinction among these types of Plotter is that all except X and @w{X
Drawable} Plotters write graphics to a file or other output stream.  An
@w{X Plotter} @w{pops up} its own windows, and an @w{X Drawable} Plotter
draws graphics in one or two @w{X drawables}.

Another distinction is that X, X Drawable, Tektronix and Metafile
Plotters are real-time.  This means that they draw graphics or write to
an output stream as the drawing operations are invoked on them.
Postscript, Fig and HP-GL Plotters are not real-time, since their output
streams can only be emitted after all functions have been called.  For a
Postscript Plotter this is because a `bounding box' line must be placed
at the head of the output file.  For a Fig Plotter it is because color
definitions must be placed at the head of the output file.

The most important operations supported by any Plotter are @code{openpl}
and @code{closepl}, which open and @w{close it}.  Graphics may be drawn,
and drawing attributes set, only within an
@code{openpl}@dots{}@code{closepl} pair.  The graphics produced within
each @code{openpl}@dots{}@code{closepl} pair constitute a `page'.  In
principle, any Plotter may be opened and closed arbitrarily many times.
An @w{X Plotter} displays each page in a separate @w{X window}, and an
HP-GL Plotter renders each page as a separate physical page.  @w{X
Drawable} Plotters and Tektronix Plotters manipulate a single drawable
or display, on which pages are displayed in succession.

There is a problem with extending these semantics to Postscript and Fig
Plotters, which do not draw in real time.  In the present release of
@code{libplot}, the @code{closepl} operation writes the preceding page
of graphics to the output stream.  Successive pages will, @w{in effect},
be concatenated.  @w{In consequence}, @w{a multipage} output file in
Postscript format will not obey the so-called Document Structuring
Conventions for Postscript files, and a multipage file in Fig format
will not be a legitimate Fig file @w{at all} (@w{a Fig} file may contain
only one page of graphics).

@w{On account} of this potential problem with Postscript and Fig
Plotters, all Plotters support an additional operation: @code{outfile}.
The output stream for a Plotter, if it has one, may be altered by
invoking @code{outfile} @w{on it}.  @code{outfile} may only be invoked
outside an @code{openpl}@dots{}@code{closepl} pair.  By using
@code{outfile}, a programmer may produce multipage graphics output from
Postscript and Fig Plotters by directing output to a sequence of output
streams, one per page.  The use of @code{outfile} in other contexts is
deprecated.

There are several other basic operations which any Plotter supports.
The `graphics display' @w{drawn in} by a Plotter is a square or
rectangular region on a display device.  But when using any Plotter to
draw graphics, @w{a user} will specify the coordinates of graphical
objects in device-independent `user coordinates', rather than in device
coordinates.  @w{A Plotter} relates the user coordinate system to the
device coordinate system by performing an affine transformation, which
must be specified by the user.

Immediately after invoking @code{openpl} to open a Plotter, an
application should invoke the @code{space} operation to initialize this
affine transformation.  This invocation specifies the rectangular region
(in user coordinates) that will be mapped by the Plotter to the graphics
display.  The affine transformation may be updated at any later time by
invoking @code{space} again, or by invoking @code{fconcat}.  The
@code{fconcat} operation will `concatenate' (i.e., compose) the current
affine transformation transformation with any specified affine map.
This sort of concatenation is a capability familiar from, e.g.,
Postscript.

Each Plotter maintains a Postscript-style stack of graphics contexts.
This makes possible the rapid, efficient drawing of complicated pages of
graphics.  @w{A graphics} context includes the current affine
transformation from the user coordinate system to the device coordinate
system.  @w{It also} includes such modal drawing attributes as graphics
cursor position, line mode, line width, pen and fill colors, and the
font used for drawing text.  The state of any uncompleted path @w{(if
any)} is included @w{as well}, since paths may be drawn incrementally,
one portion (line segment or arc) at a time.  The current graphics
context is pushed onto the stack by calling @code{savestate}, and popped
off by calling @code{restorestate}.

To permit vector graphics animation, any page of graphics may be split
into `frames'.  @w{A frame} is ended, and a new frame is begun, by
invoking the @code{erase} operation.  @w{On a} Plotter that does
real-time plotting (i.e., @w{an X}, @w{X Drawable}, Tektronix, or
Metafile Plotter), this erases all plotted objects from the graphics
display, allowing a new frame to be drawn.  Displaying a sequence of
frames in succession creates the illusion of smooth animation.

@w{On a} Plotter that does not do real-time plotting (i.e., a
Postscript, Fig or HP-GL Plotter), invoking @code{erase} deletes all
plotted objects from an internal buffer.  For this reason, Plotters that
do not do real-time plotting will display only the last frame of any
multiframe page.

@node C Programming, Functions, libplot Overview, libplot
@section C Programming with @code{libplot}

@menu
* The C API::	        	The C application programming interface
* C Compiling and Linking::	C compiling and linking
* Sample C Drawing::		A sample drawing in C
* Sample C Animation::		A sample animation in C
@end menu

@node The C API, C Compiling and Linking, C Programming, C Programming
@subsection The C application programming interface

@code{libplot} has bindings for several programming languages.
Regardless of which language binding is used, the concepts behind
@code{libplot} (Plotters, and a fixed set of operations that may be
applied to any Plotter) remain the same.  However, the ways in which
Plotters are manipulated (created, selected @w{for use}, and deleted)
may differ between bindings.

If you are writing an application in C that will use @code{libplot} to
draw vector graphics, the first thing you need to know is how, in the
@w{C binding}, Plotters are manipulated.  There are four functions for
this: @code{newpl}, @code{selectpl}, @code{deletepl}, and the
parameter-setting function @code{parampl}.

The @code{newpl} function will create a Plotter of specified type.  Its
first argument may be "X", "Xdrawable", "ps", "fig", "hpgl", "tek", or
"meta".  It returns an integer (@w{a ``handle''}) that may be used to
refer to the Plotter.  Before using a Plotter that you have created
(i.e., before invoking any of the @code{libplot} operations @w{on it}),
you must select the Plotter @w{for use} by calling @code{selectpl}.
Only one Plotter may be selected at a time, but by calling
@code{selectpl} you may switch from Plotter to Plotter at any time, even
when the selected Plotter is open.  @w{A Plotter} that is not currently
selected may be deleted, and its storage freed, by calling
@code{deletepl}.

@strong{Warning:} Though at present the use of @code{deletepl} is
optional, that will change in future releases.  @w{At present}, Plotters
that do not do real-time output (i.e., Postscript, Fig, and HP-GL
Plotters) @w{write out} graphics at the conclusion of each page, i.e.,
when @code{closepl} is called.  Our plan is for these Plotters to
@w{write out} graphics only when the plot is finished, and
@code{deletepl} is called.  You should get into the habit of calling
@code{deletepl} whenever you are finished using a Plotter.

Strictly speaking, you do not need to call @code{newpl},
@code{selectpl}, or @code{deletepl} in order to draw graphics.  That is
because at startup, a single Metafile Plotter that writes to standard
output (with @w{handle `0'}) is automatically created and selected.  The
presence of this default Plotter is for compatibility with pre-GNU
versions of @code{libplot}.  @w{Of course}, you may not wish to obtain
output in metafile format, and you may not wish to write to standard
output.

The following table summarizes the action of the four functions in the
@w{C binding} that are used for Plotter manipulation.

@table @asis
@item int @t{newpl} (const char *@var{type}, FILE *@var{in}, FILE *@var{out}, FILE *@var{err});
@t{newpl} creates a Plotter of type @var{type}, where @var{type} may be
"X", "Xdrawable", "ps", "fig", "hpgl", "tek", or "meta".  The Plotter
will have input stream @var{in}, output stream @var{out}, and error
stream @var{err}.  Currently, all Plotters are write-only and @var{in}
is ignored.  @w{X Plotters} and @w{X Drawable} Plotters write graphics
to an @w{X Window} System display rather than to an output stream, so if
@var{type} is "X" or "Xdrawable" then @var{out} is ignored @w{as well}.
Error messages (@w{if any}) are written to the stream @var{err}, unless
@var{err} is NULL.  The return value from @t{newpl} is a `handle': @w{a
nonnegative} integer by which the newly created Plotter is @w{referred
to}.  @w{A negative} return value indicates the Plotter could not be
created.
@item int @t{selectpl} (int @var{handle});
@t{selectpl} selects a Plotter, referred to by its handle, for use.  If
any of the basic @code{libplot} operations is subsequently invoked, it
will be applied to the selected Plotter.  Only one Plotter may be
selected at a time.  @w{A negative} return value indicates the Plotter
could not be selected.

At startup, a single Metafile Plotter that writes to standard output
(with @w{handle `0'}) is automatically created and selected.
@item int @t{deletepl} (int @var{handle});
@t{deletepl} deletes a Plotter, referred to by its handle.  The Plotter
must not be selected at the time it is deleted.  @w{A negative} return
value indicates the Plotter could not be deleted.
@item int @t{parampl} (const char *@var{parameter}, void *@var{value});
@t{parampl} sets the value of the device driver parameter
@var{parameter} to @var{value}.  Device driver parameters are used for
setting Plotter options.  The parameter values in effect at the time any
Plotter is created are copied @w{into it}.  For most parameters,
@var{value} should be a @code{char *}, i.e., a string.  Unrecognized
parameters are ignored.  For a list of the recognized parameters and
their meaning, see @ref{Driver Parameters}.
@end table

Up to now we have not discussed the fourth function, @code{parampl}.
The reasons it exists are the following.  In designing @code{libplot},
every effort was made to make the Plotter interface independent of the
type of Plotter, i.e., independent of the type of display device that
the Plotter drives.  @w{To the} extent that device dependence exists,
@w{it is} captured by a manageable number of @emph{device driver
parameters}.  @w{A value} for any parameter may be specified by calling
the @code{parampl} function.  The @code{parampl} function does not
operate on any particular Plotter: @w{it belongs} to the @w{C binding}
as a whole.  The parameter values used by any Plotter are constant over
the lifetime of the Plotter, and are those that were in effect when the
Plotter was created.

Actually, a slightly more sophisticated rule applies.  If at Plotter
creation time a parameter is set, the value specified by the most recent
call to @code{parampl} will be the value used by the Plotter.  If at
Plotter creation time a parameter is @emph{not} set, its default value
will be used, unless there is an environment variable of the same name,
in which case the value of that environment variable will be used.  This
rule increases run-time flexibility: @w{an application} programmer may
allow non-critical driver parameters to be specified by the user via
environment variables.  Once set, @w{a parameter} may be unset by the
programmer by calling @code{parampl} with a value argument of NULL.
This further increases flexibility.

@node C Compiling and Linking, Sample C Drawing, The C API, C Programming
@subsection C compiling and linking

The source code for a graphics application written in C, if it is to use
@code{libplot}, must contain the lines

@example
@group
#include <stdio.h>
#include <plot.h>
@end group
@end example

@noindent
The header file @code{plot.h} is distributed with @code{libplot}, and
should have been installed on your system where your @w{C compiler} will
find it.  @w{It contains} prototypes for each of the functions in
@code{libplot} and some miscellaneous definitions.  @w{It may} be used
with C++ programs @w{as well} as @w{C programs}.

To link your application with @code{libplot}, you would use the
appropriate @samp{-l} option(s) on the command line when compiling it.
You would use

@example
-lplot -lXaw -lXmu -lXt -lXext -lX11 -lm
@end example

@noindent
or, in recent versions of the @w{X Window} System,

@example
-lplot -lXaw -lXmu -lXt -lSM -lICE -lXext -lX11 -lm
@end example

@noindent
(Alternatively, you may need to use @samp{-lplot -lXm -lXt -lXext -lX11
-lm}, @samp{-lplot -lXm -lXt -lXext -lX11 -lm -lc -lgen}, or
@samp{-lplot -lXm -lXt -lXext -lX11 -lm -lc -lPW}, on systems that
provide Motif widgets instead of Athena widgets.  In recent versions of
the @w{X Window} System, you may need to insert @samp{-lSM -lICE} also.)

Note that on most systems @code{libplot} is installed as a
DLL (dynamically linked library, or `shared' library).  This means that
the linking with your application will take place at run time rather
than compile time.  The environment variable @code{LD_LIBRARY_PATH}
lists the directories which will be searched for DLL's at run time.  For
your application to be executable, this environment variable should
include the directory in which @code{libplot} is stored.

@node Sample C Drawing, Sample C Animation, C Compiling and Linking, C Programming
@subsection A sample drawing in C

The following is a sample application, written in C, that invokes
@code{libplot} operations to draw vector graphics.  @w{It draws} an
intricate and beautiful path (Bill Gosper's @w{``C'' curve}, discussed
as Item #135 in @cite{HAKMEM}, MIT Artificial Intelligence Laboratory
Memo #239, 1972).  @w{As the} numeric constant @code{MAXORDER} (here
equal @w{to 12}) is increased, the path will @w{take on} the shape of a
curly @w{letter ``C''}, which is the envelope of a myriad of epicyclic
octagons.

@example
@group
#include <stdio.h>
#include <plot.h>
@end group

@group
#define MAXORDER 12
void draw_c_curve (double dx, double dy, int order)
@{
  if (order >= MAXORDER)
    fcontrel (dx, dy);        /* continue path along (dx, dy) */
@end group
@group
  else
    @{
      draw_c_curve (0.5 * (dx - dy), 0.5 * (dx + dy), order + 1);
      draw_c_curve (0.5 * (dx + dy), 0.5 * (dy - dx), order + 1);      
    @}
@}
@end group

@group
int main ()
@{
  int handle;        

  /* set a Plotter parameter */
  parampl ("PAGESIZE", "letter");        
@end group

@group
  /* create a Postscript Plotter that writes to standard output */
  if ((handle = newpl ("ps", stdin, stdout, stderr)) < 0)
    @{
      fprintf (stderr, "Couldn't create Plotter\n");
      return 1;
    @}
  selectpl (handle);          /* select the Plotter for use */
@end group

@group
  if (openpl () < 0)          /* open Plotter */
    @{
      fprintf (stderr, "Couldn't open Plotter\n");
      return 1;
    @}
@end group
@group
  fspace (0.0, 0.0, 1000.0, 1000.0); /* specify user coordinate system*/
  flinewidth (0.25);          /* width of lines in user coordinates */
  pencolorname ("red");       /* path will be drawn in red */
@end group
@group
  erase ();                   /* erase Plotter's graphics display */
  fmove (600.0, 300.0);       /* position the graphics cursor */
  draw_c_curve (0.0, 400.0, 0);
@end group
@group
  if (closepl () < 0)         /* close Plotter */
    @{
      fprintf (stderr, "Couldn't close Plotter\n");
      return 1;
    @}
@end group

@group
  selectpl (0);               /* select default Plotter */
  deletepl (handle);          /* clean up by deleting Plotter we used */
  return 0;
@}
@end group
@end example

As you can see, this application begins by calling the @code{newpl}
function to create a Postscript Plotter.  The Postscript Plotter will
produce output for a US letter-sized page, though any other standard
page size, e.g., "a4", could be substituted.  This would be arranged by
altering the call to @code{parampl}.  The @code{PAGESIZE} parameter is
one of several Plotter parameters that an application programmer may set
by calling @code{parampl}.  For a complete list, see @ref{Driver
Parameters}.

After the Plotter is created, the application selects it for use,
@w{opens it}, draws the @w{``C'' curve} recursively, and writes a
Postscript file to standard output when @code{closepl} is called.  The
drawing of the curve is accomplished by invoking @code{fmove} on the
Plotter to position the graphics cursor, and then calling
@code{draw_c_curve}.  This subroutine repeatedly invokes
@code{fcontrel}.  The @code{fcontrel} operation continues a path by
adding a line segment @w{to it}.  The endpoint of each line segment is
specified in relative coordinates, i.e., as an offset from the previous
point.

Specifying "fig", "hpgl", "tek", or "meta" as the first argument in the
call to @code{newpl}, instead of "ps", would cause output to be written
to the output stream in the specified format, instead of Postscript.
The @code{PAGESIZE} parameter is relevant to the first two of these
output formats, but is ignored for the latter two.  Specifying "meta" as
the Plotter type may be useful if you wish to avoid recompilation for
different output devices.  Metafile output may be piped to the
@code{plot} utility and converted to any other supported output format,
or displayed in an @w{X window}.  @xref{plot}.

@w{If "X"} were specified as the first argument of @code{newpl}, the
curve would be drawn in a popped-up @w{X window}, and the output stream
argument would be ignored.  Which @w{X Window} System display the window
would @w{pop up} on would be determined by the @code{DISPLAY} parameter,
or if that parameter were not set, by the @code{DISPLAY} environment
variable.  The size of the @w{X window} would be determined by the
@code{BITMAPSIZE} parameter, or if that parameter were not set, by the
@code{BITMAPSIZE} environment variable.  The default value is "570x570".

You could also specify "Xdrawable" as the Plotter type.  For this to
work, you would need to create @w{at least} one @w{X drawable} (i.e.,
window or a pixmap), and by invoking the @code{parampl} function before
@code{newpl} is called, set it as the value of the parameter
@code{XDRAWABLE_DRAWABLE1} or @code{XDRAWABLE_DRAWABLE2}.  For other
parameters that affect @w{X Drawable} Plotters, see @ref{Driver
Parameters}.

@node Sample C Animation, , Sample C Drawing, C Programming
@subsection A sample animation in C

You may use @code{libplot} to produce vector graphics animations on any
Plotter that does real-time plotting (i.e., @w{an X}, @w{X Drawable},
Tektronix, or Metafile Plotter).  By definition, the `frames' in any
page of graphics are separated by invocations of @code{erase}.  @w{So
the} graphics display will be cleared after each frame.  If successive
frames differ only slightly, @w{a smooth} animation will result.

The following is a sample application, written @w{in C}, that produces
an animation for the @w{X Window} System.  @w{It displays} a `drifting
eye'.  @w{As the} eye drifts across a popped-up window from left to
right, it slowly rotates.  After the eye has drifted across twice, the
window will vanish.

@example
@group
#include <stdio.h>
#include <plot.h>
@end group

@group
int main ()
@{
  int handle, i = 0, j;

  /* set Plotter parameters */        
  parampl ("BITMAPSIZE", "300x150");
  parampl ("VANISH_ON_DELETE", "yes");
  parampl ("USE_DOUBLE_BUFFERING", "yes");
@end group

@group
  /* create an X Plotter with the specified parameters */
  if ((handle = newpl ("X", stdin, stdout, stderr)) < 0)
    @{
      fprintf (stderr, "Couldn't create Plotter\n");
      return 1;
    @}
  selectpl (handle);          /* select the Plotter for use */
@end group

@group
  if (openpl () < 0)          /* open Plotter */
    @{
      fprintf (stderr, "Couldn't open Plotter\n");
      return 1;
    @}
@end group
@group
  space (0, 0, 299, 149);     /* specify user coordinate system */
  linewidth (8);              /* width of lines in user coordinates */
  filltype (1);               /* objects will be filled */
  bgcolorname ("saddle brown");  /* background color for the window */
@end group
@group
  for (j = 0; j < 300; j++)
    @{
      erase ();               /* erase window */
      pencolorname ("red");   /* choose red pen, with cyan filling */
      fillcolorname ("cyan");
      ellipse (i, 75, 35, 50, i);  /* draw an ellipse */
      colorname ("black");    /* choose black pen, with black filling */
      circle (i, 75, 12);     /* draw a circle [a pupil] */
      i = (i + 2) % 300;      /* shift rightwards */
    @}
@end group
@group
  if (closepl () < 0)         /* close Plotter */
    @{
      fprintf (stderr, "Couldn't close Plotter\n");
      return 1;
    @}
@end group

@group
  selectpl (0);               /* select default Plotter */
  deletepl (handle);          /* delete the Plotter we used */
  return 0;
@}
@end group
@end example

As you can see, this application begins by calling @code{parampl}
several times to set device driver parameters, and then calls
@code{newpl} to create an @w{X Plotter}.  The @w{X Plotter} window will
have size 300x150 pixels.  This window will vanish when the Plotter is
deleted.  If the @code{VANISH_ON_DELETE} parameter were not set to
"yes", it would remain on the screen until it is removed by the user (by
typing @samp{q} @w{in it}, or by clicking with a mouse).

Setting the parameter @code{USE_DOUBLE_BUFFERING} to "yes" is very
important if you wish to produce a smooth animation.  Normally, an @w{X
Plotter} draws graphics into a window in real time, and erases the
window when @code{erase} is called.  But if `double buffering' is used,
graphics are written into an off-screen buffer, and copied into the
window, pixel by pixel, when @code{erase} is called or the Plotter is
closed.  This is a bit counterintuitive, but is exactly what is needed
to increase smoothness.  @w{If you} @w{turn off} double buffering, you
will find that the animation becomes painfully jerky.

After the Plotter is created, it is selected for use and opened.  When
@code{openpl} is called, the window @w{pops up}, and the animation
begins.  In the body of the @t{for} loop there is a call to
@code{erase}, and also a sequence of @code{libplot} operations that
draws the eye.  The pen color and fill color need to be changed twice
with every passage through the loop.  You may wish to experiment with
the animation parameters to produce the best effects on your video
hardware.

The locations of the objects that are plotted in the animation are
expressed in terms of user coordinates, not pixel coordinates.  But the
call to @code{space} defines user and pixel coordinates to be
effectively the same.  User coordinates are chosen so that the lower
left corner is (0,0) and the upper right corner is (299,149).  Since
this agrees with the window size, individual pixels may be addressed in
terms of integer user coordinates.  For example, @code{point(299,149)}
would set the pixel in the upper right hand corner of the window to the
current pen color.

@node Functions, Driver Parameters, C Programming, libplot
@section The functions in @code{libplot}: A detailed listing

In the current release of GNU @code{libplot}, any Plotter supports 81
distinct operations.  @w{A language} binding for @code{libplot}
necessarily includes 81 functions that correspond to these operations.
@w{A language} binding may also include functions for creating,
selecting, and deleting Plotters.  For example, the @w{C binding}
includes the four additional functions @code{newpl}, @code{selectpl},
@code{deletepl}, and @code{parampl}.  @xref{The C API}.

The 81 functions that operate on a specified Plotter are divided into
the four sets tabulated below.

@iftex
@enumerate
@item
Setup functions: functions that open, initialize, or close the Plotter.
@item
Functions that cause the Plotter to draw objects.
@item
Functions that set or affect the Plotter's drawing attributes.
@item
Functions affecting the affine map used by the Plotter to transform
user coordinates to device coordinates.
@end enumerate
@end iftex

Many functions come in two versions: integer and double precision
floating point.  Internally, @code{libplot} uses double precision
floating point.  The integer versions are provided for backward
compatibility.  If there are two versions of a function, the name of the
floating point version begins with the @w{letter @samp{f}}.

Many functions come in both absolute and relative versions, also.  The
latter use relative coordinates (i.e., coordinates relative to the
current position of the graphics cursor), and in the @w{C binding} their
names end in @samp{rel}.

Currently, only a few of the 81 functions have meaningful return values.

@menu
* Setup Functions::	Functions that open, initialize or close a Plotter
* Drawing Functions::	Functions that draw objects
* Attribute Functions::	Functions that affect drawing attributes
* Mapping Functions::	Functions affecting the user -> device coordinate map
@end menu

@node Setup Functions, Drawing Functions, Functions, Functions
@subsection Setup functions

The following are the ``setup functions'' in the @w{C binding} for
@code{libplot}.  These include the functions that open, initialize, and
close an already-created Plotter.  They are listed in the approximate
order in which they would be called.

@table @asis
@item int @t{openpl} ();
@t{openpl} opens a Plotter, i.e., begins a page of graphics.  Depending
on the type of the Plotter, @w{it may} write initialization commands to
an output stream.  @w{A negative} return value indicates the Plotter
could not be opened.

An @w{X Plotter}, which has no output stream, pops up a window on its
@w{X Window} System display instead.  Currently, @w{a new} window is
@w{popped up} for each page of graphics, i.e., with each invocation of
@code{openpl}.  Future releases may support window re-use.
@item int @t{bgcolor} (int @var{red}, int @var{green}, int @var{blue});   
@t{bgcolor} sets the background color for the graphics display, using a
48-bit RGB color model.  The arguments @var{red}, @var{green} and
@var{blue} specify the red, green and blue intensities of the background
color.  Each is an integer in the range @t{0x0000}@dots{}@t{0xffff},
i.e., 0@dots{}65535.  The choice (0, 0, 0) signifies black, and the
choice (65535, 65535, 65535) signifies white.  

@t{bgcolor} has an effect only on @w{X Plotters} and @w{X Drawable}
Plotters.  Its effect is simple: the next time the @t{erase} operation
is invoked on such a Plotter, its display will be filled with the
specified color. 
@item int @t{bgcolorname} (const char *@var{name});
@t{bgcolorname} sets the background color for the the graphics display
to be @var{name}.  For information on what color names are recognized,
see @ref{Color Names}.  Unrecognized colors are interpreted as "white".

@t{bgcolorname} has an effect only on @w{X Plotters} and @w{X Drawable}
Plotters.  Its effect is simple: the next time the @t{erase} operation
is invoked on such a Plotter, its display will be filled with the
specified color.
@item int @t{erase} ();
@t{erase} begins the next frame of a multiframe page, by clearing all
previously plotted objects from the graphics display, and filling it
with the background color @w{(if any)}.

It is frequently useful to invoke @t{erase} immediately after invoking
@t{openpl}.  Some Plotters are persistent, in the sense that objects
drawn within an @code{openpl}@dots{}@code{closepl} pair are still
visible and are liable to be overwritten when @code{openpl} is next
invoked, and a new page is begun.  Currently, only @w{X Drawable}
Plotters and Tektronix Plotters are persistent.  Future releases may
support optional persistence for @w{X Plotters} also.

On X Plotters the effects of invoking @t{erase} will be quite different
if the device driver parameter @code{USE_DOUBLE_BUFFERING} is set to
"yes".  @w{In this} case, objects will be written to an off-screen
buffer rather than to the popped-up window, and invoking @t{erase} will
@w{(1) copy} the contents of this buffer into the window, and @w{(2)
erase} the buffer by filling it with the background color.  This feature
facilitates smooth animation.  @xref{Driver Parameters}.
@item int @t{space} (int @var{x0}, int @var{y0}, int @var{x1}, int @var{y1});
@itemx int @t{fspace} (double @var{x0}, double @var{y0}, double @var{x1}, double @var{y1});
@t{space} and @t{fspace} take two pairs of arguments, specifying the
positions of the lower left corner and upper right corner of the
graphics display, in user coordinates.  In other words, calling
@t{space} or @t{fspace} sets the affine transformation from user
coordinates to device coordinates.  One of these operations must be
invoked at the beginning of each page of graphics, i.e., immediately
after @t{openpl} is invoked.
@item int @t{space2} (int @var{x0}, int @var{y0}, int @var{x1}, int @var{y1}, int @var{x2}, int @var{y2});
@itemx int @t{fspace2} (double @var{x0}, double @var{y0}, double @var{x1}, double @var{y1}, double @var{x2}, double @var{y2});
@t{space2} and @t{fspace2} are extended versions of @t{space} and
@t{fspace}, which may be used instead.  Their arguments are the three
defining vertices of an `affine window' (a drawing parallelogram), in
user coordinates.  The specified vertices are the lower left, the lower
right, and the upper left.  This window will be mapped affinely onto the
graphics display.
@item int @t{havecap} (const char *@var{s});
@t{havecap} tests whether or not a Plotter has a specified capability.
The return value is @w{0, 1}, @w{or 2}, signifying no/yes/maybe.  For
unrecognized capabilities the return value is zero.  Capabilities
include "SOLID_FILL", "WIDE_LINES" (i.e., the ability to draw lines with
a non-default width), and "SETTABLE_BACKGROUND" (the ability to set the
color of the background).  They also include "HERSHEY_FONTS",
"PS_FONTS", and "PCL_FONTS", which indicate whether or not fonts of a
particular class are supported.  @xref{Text Fonts}.
@item int @t{flushpl} ();
@t{flushpl} flushes (i.e., pushes onward) all plotting commands to the
display device.  This is useful only if the currently selected Plotter
does real-time plotting, since @w{it may} be used to ensure that all
previously plotted objects have been sent to the display and are visible
to the user.  @w{It has} no effect on Plotters that do not do real-time
plotting.
@item int @t{closepl} ();
@t{closepl} closes a Plotter, i.e., terminates a page of graphics.  If
the currently selected Plotter does not do real-time plotting (i.e., if
it is a Postscript, Fig, or HP-GL Plotter), it writes the plotted
objects to the output stream.  @w{A negative} return value indicates the
Plotter could not be closed.
@item FILE *@t{outfile} (FILE *@var{fp});
@t{outfile}, which must be called outside a @t{openpl}@dots{}@t{closepl}
pair, redirects all graphics output from a Plotter to the stream
@var{fp}.  The previous output stream is returned.

This operation is useful on Plotters that are designed to be opened only
once; in particular, on Fig Plotters.  @w{On other} Plotters its use is
deprecated.  @w{On Plotters} that do not have an output stream in the
conventional sense, i.e., on @w{X Plotters} and @w{X Drawable} Plotters,
it has no effect.
@end table

@node Drawing Functions, Attribute Functions, Setup Functions, Functions
@subsection Object-drawing functions

The following are the ``drawing functions'' in the @w{C binding} for
@code{libplot}.  These are the functions which, when invoked on a
Plotter, cause it to draw objects (paths, circles, ellipses, points,
markers, and text strings) on the associated graphics display.  @w{A
@emph{path}} is a sequence of line segments and arcs (either circular or
elliptic).  Paths may be drawn incrementally, one line segment or arc at
a time.

@table @asis
@item int @t{alabel} (int @var{horiz_justify}, int @var{vert_justify}, const char *@var{s});
@t{alabel} takes three arguments @var{horiz_justify},
@var{vert_justify}, and @var{s}, which specify an `adjusted label,'
i.e., a justified text string.  The path under construction (@w{if any})
is ended, and the string @var{s} is drawn according to the specified
justifications.  If @var{horiz_justify} is equal to @samp{l}, @samp{c},
or @samp{r}, then the string will be drawn with left, center or right
justification, relative to the current graphics cursor position.  If
@var{vert_justify} is equal to @samp{b}, @samp{x}, @samp{c}, or
@samp{t}, then the bottom, baseline, center or top of the string will be
placed even with the current graphics cursor position.  The graphics
cursor is moved to the right end of the string if left justification is
specified, and to the left end if right justification is specified.

The string may contain escape sequences of various sorts (@pxref{Text
String Format}), though it should not contain line feeds or carriage
returns.  @w{In fact} it should include only printable characters, from
the byte ranges @t{0x20}@dots{}@t{0x7e} and @t{0xa0}@dots{}@t{0xff}.
The string may be plotted at a nonzero angle, if @code{textangle} has
been called.
@item int @t{arc} (int @var{xc}, int @var{yc}, int @var{x0}, int @var{y0}, int @var{x1}, int @var{y1});
@itemx int @t{farc} (double @var{xc}, double @var{yc}, double @var{x0}, double @var{y0}, double @var{x1}, double @var{y1});
@itemx int @t{arcrel} (int @var{xc}, int @var{yc}, int @var{x0}, int @var{y0}, int @var{x1}, int @var{y1});
@itemx int @t{farcrel} (double @var{xc}, double @var{yc}, double @var{x0}, double @var{y0}, double @var{x1}, double @var{y1});
@t{arc} and @t{farc} take six arguments specifying the beginning
(@var{x0}, @var{y0}), end (@var{x1}, @var{y1}), and center (@var{xc},
@var{yc}) of a circular arc.  If the graphics cursor is at (@var{x0},
@var{y0}) and a path is under construction, then the arc is added to the
path.  Otherwise the current path (@w{if any}) is ended, and the arc
begins a new path.  In all cases the graphics cursor is moved to
(@var{x1}, @var{y1}).

The direction of the arc (clockwise or counterclockwise) is determined
by the convention that the arc, centered at (@var{xc}, @var{yc}), sweep
through an angle of at most 180 degrees.  @w{If the} three points appear
to be collinear, the direction is taken to be counterclockwise.  If
(@var{xc}, @var{yc}) is not equidistant from (@var{x0}, @var{y0}) and
(@var{x1}, @var{y1}) as it @w{should be}, it is corrected by being moved
to the closest point on the perpendicular bisector of the line segment
joining (@var{x0}, @var{y0}) and (@var{x1}, @var{y1}).  @t{arcrel} and
@t{farcrel} are similar to @code{arc} and @code{farc}, but use
cursor-relative coordinates.
@item int @t{box} (int @var{x1}, int y@var{1}, int @var{x2}, int @var{y2});
@itemx int @t{fbox} (double @var{x1}, double @var{y1}, double @var{x2}, double @var{y2});
@itemx int @t{boxrel} (int @var{x1}, int y@var{1}, int @var{x2}, int @var{y2});
@itemx int @t{fboxrel} (double @var{x1}, double y@var{1}, double @var{x2}, double @var{y2});
@t{box} and @t{fbox} take four arguments specifying the lower left
corner (@var{x1}, @var{y1}) and upper right corner (@var{x2}, @var{y2})
of a `box', or rectangle.  The path under construction (@w{if any}) is
ended, and the box is drawn as a new path.  This path is also ended, and
the graphics cursor is moved to the midpoint of the box.  @t{boxrel} and
@t{fboxrel} are similar to @t{box} and @t{fbox}, but use cursor-relative
coordinates.
@item int @t{circle} (int @var{xc}, int @var{yc}, int @var{r});
@itemx int @t{fcircle} (double @var{xc}, double @var{yc}, double @var{r});
@itemx int @t{circlerel} (int @var{xc}, int @var{yc}, int @var{r});
@itemx int @t{fcirclerel} (double @var{xc}, double @var{yc}, double @var{r});
@t{circle} and @t{fcircle} take three arguments specifying the center
(@var{xc}, @var{yc}) and radius (@var{r}) of a circle.  The path under
construction (@w{if any}) is ended, and the circle is drawn.  The
graphics cursor is moved to (@var{xc}, @var{yc}).  @t{circlerel} and
@t{fcirclerel} are similar to @t{circle} and @t{fcircle}, but use
cursor-relative coordinates for @var{xc} and @var{yc}.
@item int @t{cont} (int @var{x}, int @var{y});
@itemx int @t{fcont} (double @var{x}, double @var{y});
@itemx int @t{contrel} (int @var{x}, int @var{y});
@itemx int @t{fcontrel} (double @var{x}, double @var{y});
@t{cont} and @t{fcont} take two arguments specifying the coordinates
(@var{x}, @var{y}) of a point.  If a path is under construction, the
line segment from the current graphics cursor position to the point
(@var{x}, @var{y}) is added to it.  Otherwise the line segment begins a
new path.  In all cases the graphics cursor is moved to (@var{x},
@var{y}).  @t{contrel} and @t{fcontrel} are similar to @t{cont} and
@t{fcont}, but use cursor-relative coordinates.
@item int @t{ellarc} (int @var{xc}, int @var{yc}, int @var{x0}, int @var{y0}, int @var{x1}, int @var{y1});
@itemx int @t{fellarc} (double @var{xc}, double @var{yc}, double @var{x0}, double @var{y0}, double @var{x1}, double @var{y1});
@itemx int @t{ellarcrel} (int @var{xc}, int @var{yc}, int @var{x0}, int @var{y0}, int @var{x1}, int @var{y1});
@itemx int @t{fellarcrel} (double @var{xc}, double @var{yc}, double @var{x0}, double @var{y0}, double @var{x1}, double @var{y1});
@t{ellarc} and @t{fellarc} take six arguments specifying the three
points @code{pc}=(@var{xc},@var{yc}), @code{p0}=(@var{x0},@var{y0}), and
@code{p1}=(@var{x1},@var{y1}) that define a so-called quarter ellipse.
This is an elliptic arc from @code{p0} to @code{p1} with @w{center
@code{pc}}.  If the graphics cursor is at point @code{p0} and a path is
under construction, the quarter-ellipse is added to it.  Otherwise the
path under construction (@w{if any}) is ended, and the quarter-ellipse
begins a new path.  @w{In all} cases the graphics cursor is moved to
@code{p1}.

The quarter-ellipse is an affinely transformed version of a quarter
circle.  @w{It is} drawn so as to have control points @code{p0},
@code{p1}, and @math{@code{p0}+@code{p1}-@code{pc}}.  This means that it
is tangent at @code{p0} to the line segment joining @code{p0} to
@math{@code{p0}+@code{p1}-@code{pc}}, and is tangent at @code{p1} to the
line segment joining @code{p1} to @math{@code{p0}+@code{p1}-@code{pc}}.
@w{So it} fits snugly into a triangle with these three control points as
vertices.  Notice that the third control point is the reflection of
@code{pc }through the line joining @code{p0} @w{and @code{p1}}.
@t{ellarcrel} and @t{fellarcrel} are similar to @t{ellarc} and
@t{fellarc}, but use cursor-relative coordinates.
@item int @t{ellipse} (int @var{xc}, int @var{yc}, int @var{rx}, int @var{ry}, int @var{angle});
@itemx int @t{fellipse} (double @var{xc}, double @var{yc}, double @var{rx}, double @var{ry}, double @var{angle});
@itemx int @t{ellipserel} (int @var{xc}, int @var{yc}, int @var{rx}, int @var{ry}, int @var{angle});
@itemx int @t{fellipserel} (double @var{xc}, double @var{yc}, double @var{rx}, double @var{ry}, double @var{angle});
@t{ellipse} and @t{fellipse} take five arguments specifying the center
(@var{xc}, @var{yc}) of an ellipse, the lengths of its semiaxes
(@var{rx} and @var{ry}), and the inclination of the first semiaxis in
the counterclockwise direction from the @w{@math{x} axis} in the user
coordinate system.  The path under construction (@w{if any}) is ended,
and the ellipse is drawn.  The graphics cursor is moved to (@var{xc},
@var{yc}).  @t{ellipserel} and @t{fellipserel} are similar to
@t{ellipse} and @t{fellipse}, but use cursor-relative coordinates.
@item int @t{endpath} ();
@t{endpath} terminates the path under construction, @w{if any}.  Paths,
which are formed by repeated calls to @t{cont} or @t{fcont}, @t{arc} or
@t{farc}, @t{ellarc} or @t{fellarc}, and @t{line} or @t{fline}, are also
terminated if any other object is drawn or any path-related drawing
attribute is set.  So @t{endpath} is almost redundant.  However, if a
Plotter plots objects in real time, calling @t{endpath} will ensure that
a constructed path is drawn on the graphics display without delay.
@item int @t{label} (const char *@var{s});
@t{label} takes a single string argument @var{s} and draws the text
contained in @var{s} at the current graphics cursor position.  The text
is left justified, and the graphics cursor is moved to the right end of
the string.  This function is provided for backward compatibility; the
function call @t{label}(@var{s}) is equivalent to @t{alabel}(`l',`x',@var{s}).
@item int @t{labelwidth} (const char *@var{s});
@itemx double @t{flabelwidth} (const char *@var{s});
@t{labelwidth} and @t{flabelwidth} compute and return the width of a
string in the current font, in the user coordinate system.  The string
is not plotted.
@item int @t{line} (int @var{x1}, int @var{y1}, int @var{x2}, int @var{y2});
@itemx int @t{fline} (double @var{x1}, double y@var{1}, double @var{x2}, double @var{y2});
@itemx int @t{linerel} (int @var{x1}, int y@var{1}, int @var{x2}, int @var{y2});
@itemx int @t{flinerel} (double @var{x1}, double y@var{1}, double @var{x2}, double @var{y2});
@t{line} and @t{fline} take four arguments specifying the start point
(@var{x1}, @var{y1}) and end point (@var{x2}, @var{y2}) of a line
segment.  If the graphics cursor is at (@var{x1}, @var{y1}) and a path
is under construction, the line segment is added to it.  Otherwise the
path under construction (@w{if any}) is ended, and the line segment
begins a new path.  @w{In all} cases the graphics cursor is moved to
(@var{x2}, @var{y2}).  @t{linerel} and @t{flinerel} are similar to
@t{line} and @t{fline}, but use cursor-relative coordinates.
@item  int @t{marker} (int @var{x}, int @var{y}, int @var{type}, int @var{size});
@itemx int @t{fmarker} (double @var{x}, double @var{y}, int @var{type}, double @var{size});
@itemx int @t{markerrel} (int @var{x}, int @var{y}, int @var{type}, int @var{size});
@itemx int @t{fmarkerrel} (double @var{x}, double @var{y}, int @var{type}, double @var{size});
@t{marker} and @t{fmarker} take four arguments specifying the location
(@var{x},@var{y}) of a marker symbol, its type, and its size in user
coordinates.  The path under construction (@w{if any}) is ended, and the
marker symbol is plotted.  The graphics cursor is moved to
(@var{x},@var{y}).  @t{markerrel} and @t{fmarkerrel} are similar to
@t{marker} and @t{fmarker}, but use cursor-relative coordinates for the
position (@var{x},@var{y}).

Marker symbol types 0 through 31 are taken from a standard set, and
marker symbol types 32 and above are interpreted as the index of a
character in the current text font.  @xref{Marker Symbols}.
@item int @t{move} (int @var{x}, int @var{y});
@itemx int @t{fmove} (double @var{x}, double @var{y});
@itemx int @t{moverel} (int @var{x}, int @var{y});
@itemx int @t{fmoverel} (double @var{x}, double @var{y});
@t{move} and @t{fmove} take two arguments specifying the coordinates
(@var{x}, @var{y}) of a point to which the graphics cursor should be
moved.  The path under construction @w{(if any)} is ended, and the
graphics cursor is moved to (@var{x}, @var{y}).  This is equivalent to
lifting the pen on a plotter and moving it to a new position, without
drawing any line.  @t{moverel} and @t{fmoverel} are similar to @t{move}
and @t{fmove}, but use cursor-relative coordinates.
@item int @t{point} (int @var{x}, int @var{y});
@itemx int @t{fpoint} (double @var{x}, double @var{y});
@itemx int @t{pointrel} (int @var{x}, int @var{y});
@itemx int @t{fpointrel} (double @var{x}, double @var{y});
@t{point} and @t{fpoint} take two arguments specifying the coordinates
(@var{x}, @var{y}) of a point.  The path under construction @w{(if any)}
is ended, and the point is plotted.  (@w{A `point'} is usually a small
solid circle, perhaps the smallest that can be plotted.)  The graphics
cursor is moved to (@var{x}, @var{y}).  @t{pointrel} and @t{fpointrel}
are similar to @t{point} and @t{fpoint}, but use cursor-relative
coordinates.
@end table

@node Attribute Functions, Mapping Functions, Drawing Functions, Functions
@subsection Attribute-setting functions

The following are the ``attribute functions'' in the @w{C binding} for
@code{libplot}.  These are the functions which, when invoked on a
Plotter, set its drawing attributes, or save them or restore them.

Note that setting any path-related drawing attribute automatically
terminates the path under construction (@w{if any}), @w{as if} the
@code{endpath} operation had been invoked.

@table @asis
@item int @t{capmod} (const char *@var{s});
@t{capmod} sets the cap mode (i.e., cap style) for all paths
subsequently drawn on the graphics display.  Recognized styles are
"butt" (the default), "round", and "projecting".  This function has no
effect on Tektronix Plotters.  Also, it has no effect on HP-GL Plotters
if the parameter @code{HPGL_VERSION} is set to a value less than "2"
(the default).  @xref{Driver Parameters}.
@item int @t{color} (int @var{red}, int @var{green}, int @var{blue});   
@t{color} is a convenience function.  Calling @t{color} is equivalent to
calling both @t{pencolor} and @t{fillcolor}, to set both the the pen
color and fill color of all objects subsequently drawn on the graphics
display.  Note that the physical fill color depends also on the fill
fraction, which is specified by calling @t{filltype}.
@item int @t{colorname} (const char *@var{name});
@t{colorname} is a convenience function.  Calling @t{colorname} is
equivalent to calling both @t{pencolorname} and @t{fillcolorname}, to
set both the the pen color and fill color of all objects subsequently
drawn on the graphics display.  Note that the physical fill color
depends also on the fill fraction, which is specified by calling
@t{filltype}.
@item int @t{filltype} (int @var{level});
@t{filltype} sets the fill fraction for all subsequently drawn objects.
@w{A value} @w{of 0} for @var{level} indicates that objects should be
unfilled, or transparent.  This is the default.  @w{A value} in the
range @t{0x0001}@dots{}@t{0xffff}, i.e., 1@dots{}65535, indicates that
objects should be filled.  @w{A value} @w{of 1} signifies 100% filling
(the fill color will simply be the color specified by calling
@t{fillcolor} or @t{fillcolorname}).  If @var{level}=@t{0xffff}, the
fill color will be white.  Values between @t{0x0001} and @t{0xffff} are
interpreted as specifying a desaturation, or gray level.  For example,
@t{0x8000} specifies 50% filling (the fill color will be intermediate
between the color specified by calling @t{fillcolor} or
@t{fillcolorname}, and white).

If the object to be filled is a self-intersecting path, the `even-odd
rule' will be applied to determine which points are inside, i.e., which
of the regions bounded by the path should be filled.  The even-odd rule
is explained in the @cite{Postscript Language Reference Manual}.

Tektronix Plotters do not support filling, and HP-GL Plotters support
filling only if the parameter @code{HPGL_VERSION} is equal to "1.5" or
"2" (the default).  Also, @emph{white} filling is fully supported only
if the value of the parameter @code{HPGL_VERSION} @w{is "2"} and the
value of the parameter @code{HPGL_OPAQUE_MODE} is "yes".  @xref{Driver
Parameters}.
@item int @t{fillcolor} (int @var{red}, int @var{green}, int @var{blue});   
@t{fillcolor} sets the fill color of all objects subsequently drawn on
the graphics display, using a 48-bit RGB color model.  The arguments
@var{red}, @var{green} and @var{blue} specify the red, green and blue
intensities of the fill color.  Each is an integer in the range
@t{0x0000}@dots{}@t{0xffff}, i.e., 0@dots{}65535.  The choice (0, 0, 0)
signifies black, and the choice (65535, 65535, 65535) signifies white.
Note that the physical fill color depends also on the fill fraction,
which is specified by calling @t{filltype}.  
@item int @t{fillcolorname} (const char *@var{name});
@t{fillcolorname} sets the fill color of all objects subsequently drawn
on the graphics display to be @var{name}.  For information on what color
names are recognized, see @ref{Color Names}.  Unrecognized colors are
interpreted as "black".  Note that the physical fill color depends also
on the fill fraction, which is specified by calling @t{filltype}.
@item int @t{fontname} (const char *@var{font_name});
@itemx double @t{ffontname} (const char *@var{font_name});
@t{fontname} and @t{ffontname} take a single case-insensitive string
argument, @var{font_name}, specifying the name of the font to be used
for all text strings subsequently drawn on the graphics display.  (The
font for plotting strings is fully specified by calling @t{fontname},
@t{fontsize}, and @t{textangle}.)  The default font name depends on the
type of Plotter.  @w{It is} "Helvetica" for all Plotters except
Tektronix and HP-GL Plotters, for which it is "HersheySerif".  If the
argument @var{font_name} is NULL or the font is not available, the
default font name will be used.  Which fonts are available also depends
on the type of Plotter; for a list of available fonts, see @ref{Text
Fonts}.  The size of the font in user coordinates is returned.
@item int @t{fontsize} (int @var{size});
@itemx double @t{ffontsize} (double @var{size});
@t{fontsize} and @t{ffontsize} take a single argument, interpreted as
the size, in the user coordinate system, of the font to be used for all
text strings subsequently drawn on the graphics display.  (The font for
plotting strings is fully specified by calling @t{fontname},
@t{fontsize}, and @t{textangle}.)  The size of the font in user
coordinates is returned.  @w{A negative} value for @var{size} sets the
size to a default value, which depends on the type of Plotter.
@item int @t{joinmod} (const char *@var{s});
@t{joinmod} sets the join mode (i.e., join style) for all paths
subsequently drawn on the graphics display.  Recognized styles are
"miter" (the default), "round", and "bevel".  This function has no
effect on Tektronix Plotters.  Also, it has no effect on HP-GL Plotters
if the parameter @code{HPGL_VERSION} is set to a value less than "2"
(the default). @xref{Driver Parameters}.
@item int @t{linemod} (const char *@var{s});
@t{linemod} sets the line mode (i.e., line style) for all paths,
circles, and ellipses subsequently drawn on the graphics display.  The
names supported are "disconnected", "solid", "dotted", "dotdashed",
"shortdashed", and "longdashed".  @w{A `disconnected'} path joining a
sequence of points is invisible, though the points themselves are
visible.  Disconnected polylines are never filled. The other five
linemodes correspond more or less to the following bit patterns:

@example
@group
"solid"             --------------------------------
"dotted"            - - - - - - - - - - - - - - - - 
"dotdashed"         -----------  -  -----------  -  
"shortdashed"       --              --              
"longdashed"        -------         -------         
@end group
@end example

@item int @t{linewidth} (int @var{size});
@itemx int @t{flinewidth} (double @var{size});
@t{linewidth} and @t{flinewidth} set the width, in the user coordinate
system, of all paths, circles, and ellipses subsequently drawn on the
graphics display.  @w{A negative} value means that a default width
should be used.  This default width depends on the type of Plotter.  The
interpretation of zero line width does also (for some types of Plotter,
a zero-width line is the thinnest line that can be drawn; @w{for
others}, a zero-width line is invisible).

Tektronix Plotters do not support drawing with other than a default
width, and HP-GL Plotters do not support doing so if the parameter
@code{HPGL_VERSION} is set to a value less than "2" (the default;
@pxref{Driver Parameters}).
@item int @t{pencolor} (int @var{red}, int @var{green}, int @var{blue});   
@t{pencolor} sets the pen color of all objects subsequently drawn on the
graphics display, using a 48-bit RGB color model.  The arguments
@var{red}, @var{green} and @var{blue} specify the red, green and blue
intensities of the pen color.  Each is an integer in the range
@t{0x0000}@dots{}@t{0xffff}, i.e., 0@dots{}65535.  The choice (0, 0, 0)
signifies black, and the choice (65535, 65535, 65535) signifies white.

HP-GL Plotters support drawing with a white pen only if the value of the
parameter @code{HPGL_VERSION} is "2" (the default), and the value of the
parameter @code{HPGL_OPAQUE_MODE} is "yes".  @xref{Driver Parameters}.
@item int @t{pencolorname} (const char *@var{name});
@t{pencolorname} sets the pen color of all objects subsequently drawn on
the graphics display to be @var{name}.  For information on what color
names are recognized, see @ref{Color Names}.  Unrecognized colors are
interpreted as "black".

HP-GL Plotters support drawing with a white pen only if the value of the
parameter @code{HPGL_VERSION} is "2" (the default), and the value of the
parameter @code{HPGL_OPAQUE_MODE} is "yes".  @xref{Driver Parameters}.
@item int @t{restorestate} ();
@t{restorestate} pops the current graphics context off the stack of
drawing states.  The graphics context consists largely of
@code{libplot}'s drawing parameters, which are set by the attribute
functions documented in this section.  So @w{popping off} the graphics
context restores the drawing parameters to values they previously had.
@w{A path} under construction is regarded as part of the graphics
context.  For this reason, calling @t{restorestate} automatically calls
@t{endpath} to terminate the path under construction, @w{if any}.  All
graphics contexts on the stack are @w{popped off} when @code{closepl} is
called, @w{as if} @code{restorestate} had been called repeatedly.
@item int @t{savestate} ();
@t{savestate} pushes the current graphics context onto the stack of
drawing states.  The graphics context consists largely of
@code{libplot}'s drawing parameters, which are set by the attribute
functions documented in this section.  @w{A path} under construction,
@w{if any}, is regarded as part of the drawing state.  That is because
paths may be drawn incrementally, one line segment or arc at a time.
When a graphics context is returned to, the path under construction may
be continued.
@item int @t{textangle} (int @var{angle});  
@itemx double @t{ftextangle} (double @var{angle});  
@t{textangle} and @t{ftextangle} take one argument, which specifies the
angle in degrees counterclockwise from the @math{x} (horizontal) axis in
the user coordinate system, for text strings subsequently drawn on the
graphics display.  The default angle is zero.  (The font for plotting
strings is fully specified by calling @t{fontname}, @t{fontsize}, and
@t{textangle}.)  The size of the font for plotting strings, in user
coordinates, is returned.

@end table

@node Mapping Functions, , Attribute Functions, Functions
@subsection Mapping functions

The following are the ``mapping functions'' in the @w{C binding} for
@code{libplot}.  These are the functions which, when invoked on a
Plotter, affect the affine transformation it employs for mapping from
the user coordinate system to the device coordinate system.  They may be
viewed as performing transformations of the user coordinate system.
Their names resemble those of the corresponding functions in the
Postscript language.  For information on how to use them to draw
graphics efficiently, consult any good book on Postscript programming,
or the @cite{Postscript Language Reference Manual}.

@table @asis
@item int @t{fconcat} (double @var{m0}, double @var{m1}, double @var{m2}, double @var{m3}, double @var{tx}, double @var{ty});
Apply a Postscript-style transformation matrix, i.e., affine map, to the
user coordinate system.  That is, apply the linear transformation
defined by the two-by-two matrix [@var{m0} @var{m1} @var{m2} @var{m3}]
to the user coordinate system, and also translate by @var{tx} units in
the @w{@math{x} direction} and @w{@var{ty} units} in the @w{@math{y}
direction}, relative to the former user coordinate system.  The
following three functions (@t{frotate}, @t{fscale}, @t{ftranslate}) are
convenience functions that are special cases of @t{fconcat}.
@item int @t{frotate} (double @var{theta});
Rotate the user coordinate system axes about their origin by @var{theta}
degrees, with respect to their former orientation.  The position of the
user coordinate origin and the size of the @math{x} @w{and @math{y}}
units remain unchanged.
@item int @t{fscale} (double @var{sx}, double @var{sy});
Make the @math{x} and @math{y} units in the user coordinate system be
the size of @var{sx} and @var{sy} units in the former user coordinate
system.  The position of the user coordinate origin and the orientation
of the coordinate axes are unchanged.
@item int @t{ftranslate} (double @var{tx}, double @var{ty});
Move the origin of the user coordinate system by @var{tx} units in the
@w{@math{x} direction} and @w{@var{ty} units} in the @w{@math{y}
direction}, relative to the former user coordinate system.  The size of
the @math{x} and @w{@math{y} units} and the orientation of the
coordinate axes are unchanged.
@end table

@node Driver Parameters, , Functions, libplot
@section Device driver parameters

In designing the @code{libplot} library, every effort was made to make
the Plotter interface independent of the type of Plotter.  @w{To the}
extent that device dependence exists, @w{it is} captured by a manageable
number of @emph{device driver parameters}.

In the @w{C binding}, @w{a value} for any parameter may be specified by
calling the @code{parampl} function.  The @code{parampl} function does
not operate on any particular Plotter: @w{it belongs} to the @w{C
binding} as a whole.  The parameter values used by any Plotter are
constant over the lifetime of the Plotter, and are those that were in
effect when the Plotter was created.  Each driver parameter has a value
that is allowed to be a generic pointer (@w{a @code{void *}}).  For most
parameters, this value should be a string (@w{a @code{char *}}).
@code{parampl} may be called any number of times.  @w{A parameter} may
be unset by calling @code{parampl} with a value argument of NULL.

If at Plotter creation time a parameter is @emph{not} set, its default
value will be used, unless there is an environment variable of the same
name, in which case the value of that environment variable will be used.
This rule increases run-time flexibility: @w{an application} programmer
may allow non-critical driver parameters to be specified by the user via
environment variables.

The following are the currently recognized parameters (unrecognized ones
are ignored).  The most important ones are @code{DISPLAY} and
@code{BITMAPSIZE}, which affect @w{X Plotters}, and @code{PAGESIZE},
which affects Postscript, Fig, and HP-GL Plotters.  These three
parameters are listed first and the others alphabetically.  Many of the
parameters, such as the several whose names begin with "HPGL", affect
only a single type of Plotter.

@table @code
@item @t{DISPLAY}
(Default NULL.)  The X Window System display on which the graphics
display will be @w{popped up}, as an @w{X window}.  This is relevant
only to @w{X Plotters}.

@item BITMAPSIZE
(Default "570x570".)  The size of the graphics display in terms of
pixels.  This is relevant only to @w{X Plotters}.  @w{If this} parameter
is not set, its value will automatically be taken from the @w{X
resource} @code{Xplot.geometry}.  This is for backward compatibility.

@item PAGESIZE
(Default "letter".)  The size of the page on which the graphics display
will be positioned.  This is relevant only to Postscript, Fig, and HP-GL
Plotters.  "letter" means an 8.5@dmn{in} by 11@dmn{in} page.  Any ISO
page size in the range "a0"@dots{}"a4" or ANSI page size in the range
"a"@dots{}"e" may be specified ("letter" is an alias @w{for "a"} and
"tabloid" is an alias @w{for "b"}).  "legal" and "ledger" are recognized
page sizes also.

For Postscript Plotters, the graphics display will be a square region
centered on the specified page and occupying its full width.  For Fig
Plotters, the graphics display will be a square region located in the
upper left corner of an @code{xfig} display, with width equal to the
width of the specified page.  For HP-GL Plotters, fine control over the
positioning of the graphics display on the page may be accomplished by
setting the @code{HPGL_XOFFSET} and @code{HPGL_YOFFSET} parameters.

@item BG_COLOR
(Default "white".)  The initial background color of the graphics
display.  Currently relevant only to X Plotters.  The background color
may be changed at any later time by invoking the @t{bgcolor} (or
@t{bgcolorname}) and @t{erase} operations.  An unrecognized color name
sets the background color to the default.  For information on what names
are recognized, see @ref{Color Names}.

@item HPGL_ASSIGN_COLORS
(Default "no".)  Relevant only to HP-GL Plotters, and only if the value
of @code{HPGL_VERSION} @w{is "2"}.  @w{"no" means} to draw with a fixed
set of pens, specified by setting the @code{HPGL_PENS} parameter.  "yes"
means that pen colors will not restricted to the palette specified in
@code{HPGL_PENS}: colors will be assigned to ``logical pens'' in the
range #1@dots{}#31, @w{as needed}.  Not all HP-GL/2 devices allow the
assignment of colors to logical pens.  In particular, HP-GL/2 pen
plotters @w{do not}.  @w{So this} parameter should be used with caution.

@item HPGL_OPAQUE_MODE
(Default "no".)  Relevant only to HP-GL Plotters, and only if the value
of @code{HPGL_VERSION} @w{is "2"}.  "yes" means that @w{pen #0} should
be used as an opaque white pen, permitting the drawing of white lines
and the filling of objects with opaque white.  Not all HP-GL/2 devices
allow the use of @w{pen #0} as an opaque white pen.  In particular,
HP-GL/2 pen plotters @w{do not}.  @w{So this} parameter should be used
with caution.

@item HPGL_PENS
(Default "1=black:2=red:3=green:4=yellow:5=blue:6=magenta:7=cyan" if the
value of @code{HPGL_VERSION} @w{is "2"} and "1=black" if the value of
@code{HPGL_VERSION} is "1" @w{or "1.5"}.)  Relevant only to HP-GL
Plotters.  The set of available pens; the format should be
self-explanatory.  The color for any pen in the range #1@dots{}#31 may
be specified.  For information on what color names are recognized, see
@ref{Color Names}.  @w{Pen #1} must always be present, though it need
not be black.  Any other pen in the range #1@dots{}#31 may be omitted.

@item HPGL_VERSION
(Default "2".)  Relevant only to HP-GL Plotters.  @w{"1" means} that the
output should be generic HP-GL, @w{"1.5" means} that the output should
be suitable for the HP7550A pen plotter (HP-GL with some HP-GL/2
extensions), and "2" means that the output should be modern HP-GL/2.

@item HPGL_XOFFSET
(Default "0.0cm".)  Relevant only to HP-GL Plotters.  An adjustment, in
the @w{@math{x} direction}, of the position of the graphics display on
the page.  @w{It may} be specified in centimeters, millimeters, or
inches.  For example, an offset could be specified as "2cm" or "1.2in".

@item HPGL_YOFFSET
(Default "0.0cm".)  Relevant only to HP-GL Plotters.  An adjustment, in
the @w{@math{y} direction}, of the position of the graphics display on
the page.

@item MAX_LINE_LENGTH
(Default "500".)  The maximum number of points that a path may contain,
before it is flushed to the display device.  If this flushing occurs,
the path will be split into two or more sub-paths, though the splitting
should not be noticeable.  Splitting will not be performed if the path
is filled.

This parameter is relevant to X, X Drawable, Postscript, Fig, and HP-GL
Plotters.  The reason for splitting long paths is that some display
devices (e.g., old Postscript printers and HP-GL plotters) have limited
buffer sizes.  @w{It is} not relevant to Tektronix or Metafile Plotters,
since they draw paths in real time and have no buffer limitations.

@item META_PORTABLE
(Default "no".)  Relevant only to Metafile Plotters.  "yes" means that
the output should be in a portable (human-readable) version of the
metafile format, rather than the default (binary) version.
@xref{Metafiles}.

@item ROTATE
(Default "0".)  Currently relevant only to HP-GL Plotters.  The angle,
in degrees, by which the graphics display should be rotated on the page
relative to the default orientation.  Recognized values are "0", "90",
"180", and "270"; @w{"no" and} "yes" are equivalent to @w{"0" and "90"}
respectively.  This parameter is provided to facilitate switching
between portrait and landscape orientations.  For HP-GL output devices
this is frequently a concern, since some HP-GL devices (``plotters'')
draw with a default landscape orientation, and others (``printers'')
draw with a default portrait orientation.

@item TERM
(Default NULL.)  Relevant only to Tektronix Plotters.  If the value is
@code{xterm}, @code{xterms}, or @code{kterm}, @w{it is} taken as a sign
that the current application is running in an @w{X Window} System VT100
terminal emulator: @w{an @code{xterm}}.  Before drawing graphics, a
Tektronix Plotter will emit an escape sequence that causes the terminal
emulator's auxiliary Tektronix window, which is normally hidden, to
@w{pop up}.  After the graphics are drawn, an escape sequence that
returns control to the original VT100 window will be emitted.  The
Tektronix window will remain on the screen.

If the value of is @code{kermit}, @code{ansi.sys}, @code{ansissys},
@code{ansi.sysk}, or @code{ansisysk}, @w{it is} taken as a sign that the
current application is running in the VT100 terminal emulator provided
by the DOS version of @code{kermit}.  Before drawing graphics, a
Tektronix Plotter will emit an escape sequence that switches the
terminal emulator to Tektronix mode.  Also, some of the Tektronix
control codes output by the Plotter will be @code{kermit}-specific.
There will be a limited amount of color support, which is not normally
the case (the 16 @code{ansi.sys} colors will be supported).  After
drawing graphics, the Plotter will emit an escape sequence that returns
the emulator to VT100 mode.  The key sequence `@w{ALT minus}' may be
employed manually within @code{kermit} to switch between the two modes.

@item USE_DOUBLE_BUFFERING
(Default "no".)  Relevant only to X Plotters and X Drawable Plotters.
@w{If the} value is "yes", each frame of graphics, within a
@t{openpl}@dots{}@t{closepl} pair, is written to an off-screen buffer
rather than to the Plotter's display.  When @t{erase} is invoked to end
a frame, or when @t{closepl} is invoked, the contents of the off-screen
buffer are copied to the Plotter's display, pixel by pixel.  This
`double buffering' scheme is useful in creating the illusion of smooth
animation.

@item VANISH_ON_DELETE
(Default "no".)  Relevant only to X Plotters.  If the value is "yes",
when a Plotter is deleted, the window or windows that it has @w{popped
up} will vanish.  Otherwise, each such window will remain on the screen
until it is removed by the user (by typing @samp{q} @w{in it}, or by
clicking with a mouse).

@item XDRAWABLE_COLORMAP
(Default NULL.)  Relevant only to @w{X Drawable Plotters}.  If the value
is non-NULL, it should be a @code{Colormap *}, @w{a pointer} to a
colormap from which colors should be allocated.  NULL signifies that the
colormap to be used is the default colormap of the display with which
the drawable(s) to be @w{drawn in} are associated.

@item XDRAWABLE_DISPLAY
(Default NULL.)  Relevant only to X Drawable Plotters.  The value should
be a @code{Display *}, @w{a pointer} to the @w{X display} with which the
drawable(s) to be @w{drawn in} are associated.

@item XDRAWABLE_DRAWABLE1
@itemx XDRAWABLE_DRAWABLE2
(Default NULL.)  Relevant only to X Drawable Plotters.  If set, the
value of each of these parameters should be a @code{Drawable *}, a
pointer to a drawable to be @w{drawn in}.  @w{A `drawable'} is either a
window or a pixmap.  At the time an @w{X Drawable} Plotter is created,
@w{at least} one of the two parameters must be set.

@w{X Drawable} Plotters support simultaneous drawing in two drawables
because it is often useful to be able to draw graphics simultaneously in
both an @w{X window} and its background pixmap.  If two drawables are
specified, they must have the same dimensions and depth, and be
associated with the same @w{X display}.
@end table

@node Appendices, , libplot, Top
@ifnottex
The following appendices contain miscellaneous information on the
plotting utilities.
@end ifnottex

@menu
* Text and Markers::	Text fonts, text strings, and marker symbols
* Color Names::		Specifying colors by name
* Metafiles::           The device-independent GNU metafile format
* Auxiliary Software::  How to obtain auxiliary software
* Acknowledgements::    The Contributors
@end menu

@node Text and Markers, Color Names, Appendices, Appendices
@appendix Fonts, Strings, and Symbols 

The @code{libplot} library and applications linked with it, such as
@code{graph} and @code{plot}, can draw text strings in a wide variety of
fonts.  Text strings may include characters from more than one font in a
typeface, and may include superscripts, subscripts, and square roots.
@w{A wide} variety of plotting symbols can also be drawn.  The following
sections explain how to use these features.

@menu
* Text Fonts::		Available text fonts
* Text String Format::	Text string formatting (with escape sequences)
* Marker Symbols::	Available marker symbols
@end menu

@node Text Fonts, Text String Format, Text and Markers, Text and Markers
@appendixsection Available text fonts

The @code{libplot} library and applications linked with it, such as
@code{graph} and @code{plot}, can use many fonts.  These include 17
Hershey fonts, 35 Postscript fonts, and 45 @w{PCL 5} fonts.  We call
these 97 fonts the `built-in' fonts.  The Hershey fonts are so-called
vector fonts, constructed from stroked characters digitized @w{c.@:
1967} by Dr.@: @w{Allen V.} Hershey at the U.S. Naval Surface Weapons
Center in @w{Dahlgren, VA}.  The 35 Postscript fonts are the fonts
resident in all modern Postscript printers, and the 45 @w{PCL 5} fonts
are the fonts resident in modern Hewlett--Packard LaserJet printers and
plotters.  (The old LaserJet III, which was Hewlett--Packard's first
@w{PCL 5} printer, supported only 8 of the 45.)

The Hershey fonts may be used by all types of Plotter supported by
@code{libplot}, and the Postscript fonts may be used by all types of
Plotter except HP-GL and Tektronix.  So all variants of @code{graph} may
use the Hershey fonts, and all variants of @code{graph} except
@code{graph -T hpgl} and @code{graph -T tek} may use the Postscript
fonts.  The @w{PCL 5} fonts may be used only by HP-GL Plotters and
@code{graph -T hpgl}.

For the purpose of plotting text strings (@pxref{Text String Format}),
the built-in fonts are divided into typefaces.  The 17 Hershey fonts are
divided into typefaces as follows.

@itemize @bullet
@item HersheySerif

@enumerate
@item HersheySerif
@item HersheySerif-Italic
@item HersheySerif-Bold
@item HersheySerif-BoldItalic
@item HersheyCyrillic
@item HersheyEUC
@end enumerate

@item HersheySans

@enumerate
@item HersheySans
@item HersheySans-Oblique
@item HersheySans-Bold
@item HersheySans-BoldOblique
@end enumerate

@item HersheyScript

@enumerate
@item HersheyScript
@item HersheyScript
@item HersheyScript-Bold
@item HersheyScript-Bold
@end enumerate

@item HersheyGothic-English
@item HersheyGothic-German
@item HersheyGothic-Italian
@item HersheySerif-Symbol
@item HersheySans-Symbol
@end itemize

@noindent
The three HersheyGothic fonts are singletons: each is font #1 of its own
typeface.  The two symbol fonts play a special role.  By convention,
each Hershey typeface contains a symbol font (HersheySerif-Symbol or
HersheySans-Symbol, as appropriate) as @w{font #0}.

The 35 Postscript fonts are divided into typefaces as follows.

@itemize @bullet
@item Helvetica

@enumerate
@item	Helvetica
@item	Helvetica-Oblique
@item	Helvetica-Bold
@item	Helvetica-BoldOblique
@end enumerate

@item	Helvetica-Narrow

@enumerate
@item	Helvetica-Narrow
@item	Helvetica-Narrow-Oblique
@item	Helvetica-Narrow-Bold
@item	Helvetica-Narrow-BoldOblique
@end enumerate

@item   Times

@enumerate
@item	Times-Roman
@item	Times-Italic
@item	Times-Bold
@item	Times-BoldItalic
@end enumerate

@item AvantGarde

@enumerate
@item	AvantGarde-Book
@item	AvantGarde-BookOblique
@item	AvantGarde-Demi
@item	AvantGarde-DemiOblique
@end enumerate

@item Bookman

@enumerate
@item	Bookman-Light
@item	Bookman-LightItalic
@item	Bookman-Demi
@item	Bookman-DemiItalic
@end enumerate

@item Courier

@enumerate
@item	Courier
@item	Courier-Oblique
@item	Courier-Bold
@item	Courier-BoldOblique
@end enumerate

@item NewCenturySchlbk

@enumerate
@item	NewCenturySchlbk-Roman
@item	NewCenturySchlbk-Italic
@item	NewCenturySchlbk-Bold
@item	NewCenturySchlbk-BoldItalic
@end enumerate

@item Palatino

@enumerate
@item	Palatino-Roman
@item	Palatino-Italic
@item	Palatino-Bold
@item	Palatino-BoldItalic
@end enumerate

@item	ZapfChancery-MediumItalic
@item	ZapfDingbats
@item	Symbol
@end itemize

@noindent
The two Zapf fonts are singletons: each is font #1 of its own typeface.
The Symbol font plays a special role.  By convention, each Postscript
typeface contains the Symbol font as @w{font #0}.

The 45 @w{PCL 5} fonts are divided into typefaces as follows.

@itemize @bullet
@item Univers

@enumerate
@item	Univers
@item	Univers-Oblique
@item	Univers-Bold
@item	Univers-BoldOblique
@end enumerate

@item UniversCondensed

@enumerate
@item	UniversCondensed
@item	UniversCondensed-Oblique
@item	UniversCondensed-Bold
@item	UniversCondensed-BoldOblique
@end enumerate

@item   CGTimes

@enumerate
@item	CGTimes-Roman
@item	CGTimes-Italic
@item	CGTimes-Bold
@item	CGTimes-BoldItalic
@end enumerate

@item Albertus

@enumerate
@item	AlbertusMedium
@item	AlbertusMedium
@item	AlbertusExtraBold
@item	AlbertusExtraBold
@end enumerate

@item AntiqueOlive

@enumerate
@item AntiqueOlive
@item AntiqueOlive-Italic
@item AntiqueOlive-Bold
@end enumerate

@item   Arial

@enumerate
@item	Arial-Roman
@item	Arial-Italic
@item	Arial-Bold
@item	Arial-BoldItalic
@end enumerate

@item   ClarendonCondensed
@item   Coronet
@item Courier

@enumerate
@item	Courier
@item	Courier-Italic
@item	Courier-Bold
@item	Courier-BoldItalic
@end enumerate

@item Garamond

@enumerate
@item	Garamond
@item	Garamond-Italic
@item	Garamond-Bold
@item	Garamond-BoldItalic
@end enumerate

@item LetterGothic

@enumerate
@item	LetterGothic-Roman
@item	LetterGothic-Italic
@item	LetterGothic-Bold
@item	LetterGothic-BoldItalic
@end enumerate

@item   Marigold
@item CGOmega

@enumerate
@item	CGOmega-Roman
@item	CGOmega-Italic
@item	CGOmega-Bold
@item	CGOmega-BoldItalic
@end enumerate

@item TimesNewRoman

@enumerate
@item	TimesNewRoman
@item	TimesNewRoman-Italic
@item	TimesNewRoman-Bold
@item	TimesNewRoman-BoldItalic
@end enumerate

@item	Wingdings
@item	Symbol
@end itemize

@noindent
The ClarendonCondensed, Coronet, Marigold, and Wingdings fonts are
singletons: each is font #1 of its own typeface.  The Symbol font plays
a special role.  By convention, each @w{PCL 5} typeface contains the
Symbol font as @w{font #0}.

As you can see from the three preceding tables, our convention is that
in any typeface with more than a single font, font #1 is the normal
font, font #2 is italic or oblique, font #3 is bold, and font #4 is bold
italic or bold oblique.  Additional variants @w{(if any)} are numbered
#5 and higher.

Of the above built-in fonts, all except for the four Symbol fonts,
HersheyCyrillic, HersheyEUC, ZapfDingbats, and Wingdings are ISO-8859-1
fonts.  This means that they use the ISO-Latin-1 encoding, which is a
superset of ASCII@.  The four Symbol fonts use a special encoding, since
they consist of Greek characters and mathematical symbols.  The Symbol
encoding and the encoding used by the ZapfDingbats font are documented
in the @cite{Postscript Language Reference Manual}.

The HersheyCyrillic font uses an encoding known as KOI8-R, a superset of
ASCII which has become the @w{de facto} standard for Unix and networking
applications in the former Soviet Union.  Insofar as printable ASCII
characters go, it is the same as the HersheySerif font.  But its `8-bit'
characters are different.  The byte range @t{0xc0}@dots{}@t{0xdf}
contains lower-case Cyrillic characters and the byte range
@t{0xe0}@dots{}@t{0xff} contains upper case Cyrillic characters.
Additional Cyrillic characters are located at @t{0xa3} @w{and @t{0xb3}}.
For more on this encoding, see
@uref{http://www.nagual.pp.ru/~ache/koi8.html} and the document known as
Internet RFC 1489.

The HersheyEUC font is used for displaying Japanese.  EUC stands for
`extended Unix code', which is a scheme for encoding Japanese, and also
other character sets (e.g., Greek and Cyrillic) as multibyte character
strings.  The format of EUC strings is discussed in Ken Lunde's
@cite{Understanding Japanese Information Processing} (O'Reilly, 1993),
which contains much additional information on Japanese text processing.
See also @uref{http://www.ora.com/people/authors/lunde/cjk_inf.html, his
on-line supplement}.

In the HersheyEUC font, characters in the printable ASCII range,
@t{0x20}@dots{}@t{0x7e}, are similar to US ASCII (they are `JIS Roman',
an ASCII variant standardized by the Japanese Industrial Standards
Committee).  Each successive pair of bytes in the
@code{0xa1}@dots{}@code{0xfe} range defines a single character in the
JIS X0208 standard.  The characters in the JIS X0208 standard include
Japanese syllabic characters (Hiragana and Katakana), ideographic
characters (Kanji), Roman, Greek, and Cyrillic alphabets, punctuation
marks, and miscellaneous symbols.  For example, the JIS X0208 standard
indexes the 83 Hiragana as @code{0x2421}@dots{}@code{0x2453}.  @w{To
obtain} the EUC code for any JIS X0208 character, one adds @code{0x80}
to each byte (i.e., `sets the high bit' on each byte).  So the first of
the 83 Hiragana (@code{0x2421}) would be encoded as the successive pair
of bytes @code{0xa4} @w{and @code{0xa1}}.

The implementation of the JIS X0208 standard in the HersheyEUC font is
based on @w{Dr.@: Hershey's} digitizations, and is complete enough to be
useful.  All Hiragana and Katakana are available, though the little-used
`half-width Katakana' are not supported.  Also, 603 frequently used
Kanji are available.  The Hiragana, the Katakana, and the available
Kanji all have the same width.  The file @file{kanji.doc}, which is
distributed along with the GNU plotting utilities, lists the 603
available Kanji.  Each JIS X0208 character that is unavailable will be
drawn as an `undefined character' glyph (several horizontal lines).

To what extent do the fonts supported by @code{libplot} contain
ligatures?  The 35 Postscript fonts and 45 @w{PCL 5} fonts, as
implemented in @code{libplot}, do not contain ligatures.  However, four
of the 17 Hershey fonts contain ligatures.  The character combinations
"fi", "ff", "fl", "ffi", and "ffl" are automatically drawn as ligatures
in HersheySerif and HersheySerif-Italic.  (Also in HersheyCyrillic and
HersheyEUC, since insofar as printable ASCII characters are concerned,
they are identical [or almost identical] to HersheySerif.)  @w{In
addition}, "tz" and "ch" are ligatures in HersheyGothic-German.  The
German double-s @w{character `@ss{}'}, which is called an `eszet', is
not regarded as a ligature in any font.  To obtain an eszet, you must
either request one with the control @w{sequence "\ss"} (@pxref{Text
String Format}), or, if you have an 8-bit keyboard, type an eszet
explicitly.

The preceding discussions dealt with the built-in fonts: the 17 Hershey
fonts, the 35 Postscript fonts, and the 45 @w{PCL 5} fonts.  @w{In
fact}, the @w{X Plotters} supported by @code{libplot}, and @code{graph
-T X} (which is built on top of @code{libplot}) are not restricted to
the built-in fonts.  They can display text strings using certain @w{X
Window} System fonts @w{as well}.  Any scalable font which is available
on the current @w{X Window} System display, and which has a so-called
XLFD (@w{X Logical} Font Description) name, may be used.  For example,
the font "-monotype-gill
sans-ultrabold-r-condensed--0-0-0-0-p-0-iso8859-1" is available on some
@w{X displays}.  It would be referred to as "gill
sans-ultrabold-r-condensed".  The command

@example
echo 0 0 1 1 2 0 | graph -T X -F "gill sans-ultrabold-r-condensed"
@end example

@noindent
would draw a plot on an @w{X display}, in which all axis ticks are labeled
in this font.  

You may determine which fonts are available on an @w{X display} by using
the @code{xlsfonts} command.  Fonts whose names end in
"-0-0-0-0-p-0-iso8859-1" or "-0-0-0-0-m-0-iso8859-1" are scalable
ISO-Latin-1 fonts that may be used by @code{libplot}'s @w{X Plotters}
and by @code{graph @w{-T X}}.  The two sorts of font are variable-width and
fixed-width fonts, respectively.  Fonts whose names end in
"adobe-fontspecific" may also be used.  They are fonts that do not
employ the ISO-Latin-1 encoding.

The escape sequences which allow access to mathematical symbols and
Greek characters (@pxref{Text String Format}) may be employed when using
any @w{X Window} System font.  Also, the escape sequences which allow
access to the special non-ASCII characters in any of the built-in
ISO-Latin-1 fonts may be employed when using any ISO-Latin-1 @w{X
Window} System font.

@node Text String Format, Marker Symbols, Text Fonts, Text and Markers
@appendixsection Text string format and escape sequences

Text strings that are drawn by @code{libplot}, and by such applications
as @code{graph} that are built on @code{libplot}, must consist of
printable characters.  No embedded control characters, such as newlines
or carriage returns, are allowed.  Technically, a character is
`printable' if it comes from either of the two byte ranges
@t{0x20}@dots{}@t{0x7e} and @t{0xa0}@dots{}@t{0xff}.  The former is the
printable ASCII range.

Text strings may, however, include embedded `escape sequences' that
shift the font, append subscripts or superscripts, or include special
mathematical symbols.  As a consequence, the axis labels on a plot
prepared with @code{graph} may include such features.

The format of the escape sequences should look familiar to anyone who is
familiar with the @TeX{} or @code{groff} document formatters.  Each
escape sequence consists of three characters: @w{a backslash} and two
characters that specify the control code.  The most frequently used
escape sequences are as follows.

@table @asis
@item "\sp"
start superscript mode
@item "\ep"
end superscript mode
@item "\sb"
start subscript mode
@item "\eb"
end subscript mode
@item "\mk"
mark location 
@item "\rt"
return to marked location
@end table

@noindent
For example, the string "x\sp2\ep" would be interpreted as `x squared'.
Subscripts on subscripts, etc., are allowed.  Subscripts and
superscripts may be vertically aligned by judicious use of the "\mk" and
"\rt" escape sequences.  For example, "a\mk\sbi\eb\rt\sp2\ep" produces
"a sub i squared", with the exponent `2' placed immediately above the
subscript.

There are also escape sequences that switch from font to font within a
typeface.  For an enumeration of the fonts within each typeface, see
@ref{Text Fonts}.  Suppose for example that the current font is
`Times-Roman', which is font #1 in the `Times' typeface.  The string "A
\f2very\f1 well labeled axis" would be a string in which the word `very'
appears in Times-Italic rather than Times-Roman.  That is because
Times-Italic is the #2 font in the typeface.  Font-switching escape
sequences are of the form "\f@var{n}", where @var{n} is the number of
the font to be switched to, in the current font.  There is currently no
support for switching between fonts in different typefaces.

There are also a few escape sequences for horizontal shifts, which are
useful for improving horizontal alignment, such as when shifting between
fonts.  "\r1", "\r2", "\r4", "\r6", "\r8" are escape sequences that
shift right by 1 em, 1/2 em, 1/4 em, 1/6 em, and 1/8 em, respectively.
"\l1", "\l2", "\l4", "\l6", "\l8" are similar, but shift left instead of
right.  "A \f2very\r8\f1 well labeled axis" would look better than "A
\f2very\f1 well labeled axis".

Square roots are handled with the aid of a special pair of escape
sequences, together with the "\mk" and "\rt" sequences discussed above.
A square root symbol is begun with "\sr", and continued arbitrarily far
to the right with the overbar (`run') escape sequence, "\rn".  For
example, the string "\sr\mkab\rt\rn\rn" would be plotted as `the square
root of ab'.  To adjust the length of the overbar, you may need to
experiment with the number of times "\rn" appears.

To underline a string, you would use "\ul", the underline escape
sequence, one or more times.  The "\mk"@dots{}"\rt" trick would be
employed in the same way.  So, for example, "\mkabc\rt\ul\ul\ul" would
yield an underlined "ABC".  To adjust the length of the underline, you
may need to experiment with the number of times "\ul" appears.  You may
also need to use one or more of the abovementioned horizontal shifts.
For example, if the "HersheySerif" font were used,
"\mkabc\rt\ul\ul\l8\ul" would yield a better underline than
"\mkabc\rt\ul\ul\ul".

Besides the preceding escape sequences, there are also escape sequences
for the printable non-ASCII characters in each of the built-in
ISO-Latin-1 fonts (which means in every built-in font, except for the
symbol fonts, HersheyCyrillic, HersheyEUC, and ZapfDingbats).  Such
`8-bit' characters, in the @t{0xa0}@dots{}@t{0xff} byte range, may be
included directly in a text string.  But if your editor does not permit
this, you may use the escape sequences for them instead.  The useful
non-ASCII characters include accented characters, among others.

There are escape sequences for the mathematical symbols and Greek
characters in the symbol fonts, @w{as well}.  Which font the mathematical
symbols and Greek characters are taken from depends on whether your
current font is a Hershey font or a Postscript font.  The symbols are
taken from the HersheySerif-Symbol font or the HersheySans-Symbol font
in the former case, and from the Symbol font in the latter.

The following are the escape sequences that provide access to the
non-ASCII characters of the current font, provided that it is an
ISO-Latin-1 font.  Each escape sequence is followed by the position of
the corresponding character in the ISO-Latin-1 encoding (in decimal),
and the official Postscript name of the character.  Most names should be
self-explanatory.  For example, `eacute' is a lower-case `e', equipped
with an acute accent.

@table @asis
@item "\r!" 
[161] exclamdown
@item "\ct" 
[162] cent
@item "\Po" 
[163] sterling
@item "\Cs" 
[164] currency
@item "\Ye" 
[165] yen
@item "\bb" 
[166] brokenbar
@item "\sc" 
[167] section
@item "\ad" 
[168] dieresis
@item "\co" 
[169] copyright
@item "\Of" 
[170] ordfeminine
@item "\Fo" 
[171] guillemotleft
@item "\no" 
[172] logicalnot
@item "\hy" 
[173] hyphen
@item "\rg" 
[174] registered
@item "\a-" 
[175] macron
@item "\de" 
[176] degree
@item "\+-" 
[177] plusminus
@item "\S2" 
[178] twosuperior
@item "\S3" 
[179] threesuperior
@item "\aa" 
[180] acute
@item "\*m" 
[181] mu
@item "\ps" 
[182] paragraph
@item "\md" 
[183] periodcentered
@item "\ac" 
[184] cedilla
@item "\S1" 
[185] onesuperior
@item "\Om" 
[186] ordmasculine
@item "\Fc" 
[187] guillemotright
@item "\14" 
[188] onequarter
@item "\12" 
[189] onehalf
@item "\34" 
[190] threequarters
@item "\r?" 
[191] questiondown
@item "\`A" 
[192] Agrave
@item "\'A" 
[193] Aacute
@item "\^A" 
[194] Acircumflex
@item "\~A" 
[195] Atilde
@item "\:A" 
[196] Adieresis
@item "\oA" 
[197] Aring
@item "\AE" 
[198] AE
@item "\,C" 
[199] Ccedilla
@item "\`E" 
[200] Egrave
@item "\'E" 
[201] Eacute
@item "\^E" 
[202] Ecircumflex
@item "\:E" 
[203] Edieresis
@item "\`I" 
[204] Igrave
@item "\'I" 
[205] Iacute
@item "\^I" 
[206] Icircumflex
@item "\:I" 
[207] Idieresis
@item "\-D" 
[208] Eth
@item "\~N" 
[209] Ntilde
@item "\'O" 
[210] Ograve
@item "\'O" 
[211] Oacute
@item "\^O" 
[212] Ocircumflex
@item "\~O" 
[213] Otilde
@item "\:O" 
[214] Odieresis
@item "\mu" 
[215] multiply
@item "\/O" 
[216] Oslash
@item "\`U" 
[217] Ugrave
@item "\'U" 
[218] Uacute
@item "\^U" 
[219] Ucircumflex
@item "\:U" 
[220] Udieresis
@item "\'Y" 
[221] Yacute
@item "\TP" 
[222] Thorn
@item "\ss" 
[223] germandbls
@item "\`a" 
[224] agrave
@item "\'a" 
[225] aacute
@item "\^a" 
[226] acircumflex
@item "\~a" 
[227] atilde
@item "\:a" 
[228] adieresis
@item "\oa" 
[229] aring
@item "\ae" 
[230] ae
@item "\,c" 
[231] ccedilla
@item "\`e" 
[232] egrave
@item "\'e" 
[233] eacute
@item "\^e" 
[234] ecircumflex
@item "\:e" 
[235] edieresis
@item "\`i" 
[236] igrave
@item "\'i" 
[237] iacute
@item "\^i" 
[238] icircumflex
@item "\:i" 
[239] idieresis
@item "\Sd" 
[240] eth
@item "\~n" 
[241] ntilde
@item "\`o" 
[242] ograve
@item "\'o" 
[243] oacute
@item "\^o" 
[244] ocircumflex
@item "\~o" 
[245] otilde
@item "\:o" 
[246] odieresis
@item "\di" 
[247] divide
@item "\/o" 
[248] oslash
@item "\`u" 
[249] ugrave
@item "\'u" 
[250] uacute
@item "\^u" 
[251] ucircumflex
@item "\:u" 
[252] udieresis
@item "\'y" 
[253] yacute
@item "\Tp" 
[254] thorn
@item "\:y" 
[255] ydieresis
@end table

The following are the escape sequences that provide access to
mathematical symbols and Greek characters in the current symbol font,
whether HersheySerif-Symbol or HersheySans-Symbol (for Hershey fonts) or
Symbol (for Postscript fonts).  Each escape sequence is followed by the
position (in octal) of the corresponding character in the symbol
encoding, and the official Postscript name of the character.  Many
escape sequences and names should be self-explanatory.  "\*a" represents
a lower-case Greek alpha, for example.  For a table displaying each of
the characters below, see the @cite{Postscript Language Reference
Manual}.

@table @asis
@item "\fa" 
[0042] universal
@item "\te" 
[0044] existential
@item "\st" 
[0047] suchthat
@item "\**" 
[0052] asteriskmath
@item "\=~" 
[0100] congruent
@item "\*A" 
[0101] Alpha
@item "\*B" 
[0102] Beta
@item "\*X" 
[0103] Chi
@item "\*D" 
[0104] Delta
@item "\*E" 
[0105] Epsilon
@item "\*F" 
[0106] Phi
@item "\*G" 
[0107] Gamma
@item "\*Y" 
[0110] Eta
@item "\*I" 
[0111] Iota
@item "\+h" 
[0112] theta1
@item "\*K" 
[0113] Kappa
@item "\*L" 
[0114] Lambda
@item "\*M" 
[0115] Mu
@item "\*N" 
[0116] Nu
@item "\*O" 
[0117] Omicron
@item "\*P" 
[0120] Pi
@item "\*H" 
[0121] Theta
@item "\*R" 
[0122] Rho
@item "\*S" 
[0123] Sigma
@item "\*T" 
[0124] Tau
@item "\*U" 
[0125] Upsilon
@item "\ts" 
[0126] sigma1
@item "\*W" 
[0127] Omega
@item "\*C" 
[0130] Xi
@item "\*Q" 
[0131] Psi
@item "\*Z" 
[0132] Zeta
@item "\tf" 
[0134] therefore
@item "\pp" 
[0136] perpendicular
@item "\ul" 
[0137] underline
@item "\rx" 
[0140] radicalex
@item "\*a" 
[0141] alpha
@item "\*b" 
[0142] beta
@item "\*x" 
[0143] chi
@item "\*d" 
[0144] delta
@item "\*e" 
[0145] epsilon
@item "\*f" 
[0146] phi
@item "\*g" 
[0147] gamma
@item "\*y" 
[0150] eta
@item "\*i" 
[0151] iota
@item "\+f" 
[0152] phi1
@item "\*k" 
[0153] kappa
@item "\*l" 
[0154] lambda
@item "\*m" 
[0155] mu
@item "\*n" 
[0156] nu
@item "\*o" 
[0157] omicron
@item "\*p" 
[0160] pi
@item "\*h" 
[0161] theta
@item "\*r" 
[0162] rho
@item "\*s" 
[0163] sigma
@item "\*t" 
[0164] tau
@item "\*u" 
[0165] upsilon
@item "\+p" 
[0166] omega1
@item "\*w" 
[0167] omega
@item "\*c" 
[0170] xi
@item "\*q" 
[0171] psi
@item "\*z" 
[0172] zeta
@item "\ap" 
[0176] similar
@item "\+U" 
[0241] Upsilon1
@item "\fm" 
[0242] minute
@item "\<=" 
[0243] lessequal
@item "\f/" 
[0244] fraction
@item "\if" 
[0245] infinity
@item "\Fn" 
[0246] florin
@item "\CL" 
[0247] club
@item "\DI" 
[0250] diamond
@item "\HE" 
[0251] heart
@item "\SP" 
[0252] spade
@item "\<>" 
[0253] arrowboth
@item "\<-" 
[0254] arrowleft
@item "\ua" 
[0255] arrowup
@item "\->" 
[0256] arrowright
@item "\da" 
[0257] arrowdown
@item "\de" 
[0260] degree
@item "\+-" 
[0261] plusminus
@item "\sd" 
[0262] second
@item "\>=" 
[0263] greaterequal
@item "\mu" 
[0264] multiply
@item "\pt" 
[0265] proportional
@item "\pd" 
[0266] partialdiff
@item "\bu" 
[0267] bullet
@item "\di" 
[0270] divide
@item "\!=" 
[0271] notequal
@item "\==" 
[0272] equivalence
@item "\~~" 
[0273] approxequal
@item "\.." 
[0274] ellipsis
@item NONE 
[0275] arrowvertex
@item "\an" 
[0276] arrowhorizex
@item "\CR" 
[0277] carriagereturn
@item "\Ah" 
[0300] aleph
@item "\Im" 
[0301] Ifraktur
@item "\Re" 
[0302] Rfraktur
@item "\wp" 
[0303] weierstrass
@item "\c*" 
[0304] circlemultiply
@item "\c+" 
[0305] circleplus
@item "\es" 
[0306] emptyset
@item "\ca" 
[0307] cap
@item "\cu" 
[0310] cup
@item "\SS" 
[0311] superset
@item "\ip" 
[0312] reflexsuperset
@item "\n<" 
[0313] notsubset
@item "\SB" 
[0314] subset
@item "\ib" 
[0315] reflexsubset
@item "\mo" 
[0316] element
@item "\nm" 
[0317] notelement
@item "\/_" 
[0320] angle
@item "\gr" 
[0321] nabla
@item "\rg" 
[0322] registerserif
@item "\co" 
[0323] copyrightserif
@item "\tm" 
[0324] trademarkserif
@item "\PR" 
[0325] product
@item "\sr" 
[0326] radical
@item "\md" 
[0327] dotmath
@item "\no" 
[0330] logicalnot
@item "\AN" 
[0331] logicaland
@item "\OR" 
[0332] logicalor
@item "\hA" 
[0333] arrowdblboth
@item "\lA" 
[0334] arrowdblleft
@item "\uA" 
[0335] arrowdblup
@item "\rA" 
[0336] arrowdblright
@item "\dA" 
[0337] arrowdbldown
@item "\lz" 
[0340] lozenge
@item "\la" 
[0341] angleleft
@item "\RG" 
[0342] registersans
@item "\CO" 
[0343] copyrightsans
@item "\TM" 
[0344] trademarksans
@item "\SU" 
[0345] summation
@item NONE 
[0346] parenlefttp
@item NONE 
[0347] parenleftex
@item NONE 
[0350] parenleftbt
@item "\lc" 
[0351] bracketlefttp
@item NONE 
[0352] bracketleftex
@item "\lf" 
[0353] bracketleftbt
@item "\lt" 
[0354] bracelefttp
@item "\lk" 
[0355] braceleftmid
@item "\lb" 
[0356] braceleftbt
@item "\bv" 
[0357] braceex
@item "\eu"
[0360] euro
@item "\ra" 
[0361] angleright
@item "\is" 
[0362] integral
@item NONE 
[0363] integraltp
@item NONE 
[0364] integralex
@item NONE 
[0365] integralbt
@item NONE 
[0366] parenrighttp
@item NONE 
[0367] parenrightex
@item NONE 
[0370] parenrightbt
@item "\rc" 
[0371] bracketrighttp
@item NONE 
[0372] bracketrightex
@item "\rf" 
[0373] bracketrightbt
@item "\RT" 
[0374] bracerighttp
@item "\rk" 
[0375] bracerightmid
@item "\rb" 
[0376] bracerightbt
@end table

Finally, there are escape sequences that apply only if the current font
is a Hershey font.  Most of these escape sequences provide access to
special symbols that belong to no font, and are accessible by no other
means.  These symbols are of two sorts: miscellaneous and astronomical.
The escape sequences for the miscellaneous symbols are as follows.

@table @asis
@item "\dd"
daggerdbl
@item "\dg"
dagger
@item "\hb"
hbar
@item "\li"
lineintegral
@item "\IB"
interbang
@item "\Lb"
lambdabar
@item "\~-"
modifiedcongruent
@item "\-+"
minusplus
@item "\||"
parallel
@item "\s-"
[variant form of s]
@end table

@noindent
The final escape sequence in the table above, "\s-", yields a letter
rather than a symbol.  @w{It is} provided because in some Hershey fonts,
the shape of the lower-case @w{letter `s'} differs if it is the last
letter in a word.  This is the case for HersheyGothic-German.  The
German word "besonders", for example, should be written as "besonder\s-"
if it is to be rendered correctly in this font.  The same is true for
the two Hershey symbol fonts, with their Greek alphabets (in Greek text,
lower-case @w{final `s'} is different from lower-case @w{non-final
`s'}).  @w{In Hershey} fonts where there is no distinction between final
and @w{non-final `s'}, @w{"s" and "\s-"} are equivalent.

The escape sequences for the astronomical symbols are listed in the
following table.  We stress that that like the preceding miscellaneous
escape sequences, they apply only if the current font is a Hershey font.

@table @asis
@item "\SO"
sun
@item "\ME"
mercury
@item "\VE"
venus
@item "\EA"
earth
@item "\MA"
mars
@item "\JU"
jupiter
@item "\SA"
saturn
@item "\UR"
uranus
@item "\NE"
neptune
@item "\PL"
pluto
@item "\LU"
moon
@item "\CT"
comet
@item "\ST"
star
@item "\AS"
ascendingnode
@item "\DE"
descendingnode
@end table

The preceding miscellaneous and astronomical symbols are not the only
special non-font symbols that may be used if the current font is a
Hershey font.  The entire library of glyphs digitized by @w{Allen}
Hershey is built into GNU @code{libplot}.  @w{So text} strings may
include any Hershey glyph.  Each of the 1641 available Hershey glyphs is
identified by a four-digit number.  Standard Hershey @w{glyph #1} would
be specified as "\#H0001".  The standard Hershey glyphs range from
"\#H0001" to "\#H3999", with a number of gaps.  Some additional glyphs
designed by others appear in the "\#H4000"@dots{}"\#H4194" range.
Syllabic Japanese characters (Kana) are located in the
"\#H4195"@dots{}"\#H4399" range.

You may order a table of nearly all the Hershey glyphs in the
"\#H0001"@dots{}"\#H3999" range from the U.S. National Technical
Information Service, at @w{+1 703} 487 4650.  Ask for item number
PB251845; the current price is about US$40.  By way of example, the
string

@example
"\#H0744\#H0745\#H0001\#H0002\#H0003\#H0869\#H0907\#H2330\#H2331"
@end example

@noindent
when drawn will display a shamrock, a fleur-de-lys, cartographic (small)
letters @w{A, B, C}, @w{a bell,} @w{a large} circle, @w{a treble}
clef, and @w{a bass} clef.  Again, this assumes that the current font is
a Hershey font.

You may also use Japanese syllabic characters (Hiragana and Katakana)
and ideographic characters (Kanji) when drawing strings in any Hershey
font.  @w{In all}, 603 Kanji are available; these are the same Kanji
that are available in the HersheyEUC font.  The Japanese characters are
indexed according to the JIS X0208 standard for Japanese typography,
which represents each character by a two-byte sequence.  Each JIS X0208
character would be specified by an escape sequence which expresses this
two-byte sequence as four hexadecimal digits, such as "\#J357e".  Both
bytes must be in the @code{0x21}@dots{}@code{0x7e} range in order to
define a JIS X0208 character.  Kanji are located at "\#J3021" and above.
The file @file{kanji.doc}, which is distributed along with the GNU plotting
utilities, lists the available Kanji.

Characters appearing elsewhere in the JIS X0208 encoding may be accessed
similarly.  For example, Hiragana and Katakana are located in the
"\#J2421"@dots{}"\#J257e" range, and Roman characters are located in the
"\#J2300"@dots{}"\#J237e" range.  The file @file{kana.doc} lists the
encodings of the Hiragana and Katakana.  For more on the JIS X0208
standard, see Ken Lunde's @cite{Understanding Japanese Information
Processing} (O'Reilly, 1993), and
@uref{http://www.ora.com/people/authors/lunde/cjk_inf.html, his on-line
supplement}.

The Kanji numbering used in @w{A. N.} Nelson's @cite{Modern Reader's
Japanese-English Character Dictionary}, @w{a longtime} standard, is also
supported.  (This dictionary is published by @w{C. E.} Tuttle and Co.,
with ISBN 0-8048-0408-7.  @w{A revised} edition [ISBN 0-8048-2036-8]
appeared in 1997, but uses a different numbering.)  `Nelson' escape
sequences for Kanji are similar to JIS X0208 escape sequences, but use
four decimal instead of four hexadecimal digits.  The file
@file{kanji.doc} gives the correspondence between the JIS numbering
scheme and the Nelson numbering scheme.  For example, "\#N0001" is
equivalent to "\#J306c".  @w{It also} gives the positions of the
available Kanji in the Unicode encoding.

All available Kanji have the same width, which is the same as that of
the syllabic Japanese characters (Hiragana and Katakana).  Each Kanji
that is not available will print as an `undefined character' glyph (a
set of horizontal lines).  The same is true for non-Kanji JIS X0208
characters which are not available.

@node Marker Symbols, , Text String Format, Text and Markers
@appendixsection Available marker symbols

The GNU @code{libplot} library supports a standard set of marker
symbols, numbered 0 through 31.  These are the symbols that the
@code{graph} program will plot at each point of a dataset, if the
@samp{-S} option is used.  The list is as follows (by convention, marker
@w{symbol #0} means no symbol @w{at all}).

@enumerate
@item dot
@tex
($\thinspace\cdot\thinspace$)
@end tex
@item plus (@math{+})
@item asterisk (@math{*})
@item circle
@tex
($\circ$)
@end tex
@item cross
@tex
($\times$)
@end tex
@item square
@item triangle
@item diamond
@item star
@item inverted triangle
@item starburst
@item fancy plus
@item fancy cross
@item fancy square
@item fancy diamond
@item filled circle
@item filled square
@item filled triangle
@item filled diamond
@item filled inverted triangle
@item filled fancy square
@item filled fancy diamond
@item half filled circle
@item half filled square
@item half filled triangle
@item half filled diamond
@item half filled inverted triangle
@item half filled fancy square
@item half filled fancy diamond
@item octagon
@item filled octagon
@end enumerate

@noindent
The interpretation of marker symbols 1 through 5 is the same as in the
@w{well known} GKS (Graphical Kernel System).

Symbols 32 and up are interpreted as characters in a certain text font.
For @code{libplot}, it is the current font.  For @code{graph}, it is the
font selected with the @samp{--symbol-font-name} option.  By default,
this is the ZapfDingbats font except in @code{graph -T hpgl} and
@code{graph -T tek}.  @code{graph -T hpgl} and @code{graph -T tek}
currently have no access to Postscript fonts, so they use the
@code{HersheySerif} font instead.

Many of the characters in the ZapfDingbats font are suitable for use as
marker symbols.  For example, character #74 is the Texas star.  Doing

@example
echo 0 0 1 2 2 1 3 2 4 0 | graph -T ps -m 0 -S 74 0.1 > plot.ps
@end example

@noindent
will produce a Postscript plot consisting of five data points, not
joined by line segments.  Each data point will be marked by a Texas
star, of a large font size (0.1 times the width of the plotting box).

@node Color Names, Metafiles, Text and Markers, Appendices
@appendix Specifying Colors by Name

Many of the plotting utilities allow colors to be specified by name.
For example, @code{graph} supports the @samp{--frame-color} option.
@code{graph -T hpgl} and @code{plot -T hpgl} check the value of the
@code{HPGL_PENS} environment variable, as do the HP-GL Plotters
available in the @code{libplot} library (@w{on which} they are based).
Also, the @code{libplot} library includes the @t{pencolorname} and
@t{fillcolorname} functions.

In any of these contexts, 665 distinct color names are recognized,
including obscure ones like "dark magenta", "forest green", and "olive
drab".  Color names are case-insensitive, and spaces are ignored.  So,
for example, "RosyBrown" is equivalent to "rosy brown", and
"DarkGoldenrod3" to "dark goldenrod 3".

The file @file{colors.txt}, which is distributed along with the GNU
plotting utilities, lists the available color names.  They are
essentially the color names recognized by recent releases of the @w{X
Window} System, which on most machines are listed in the file
@file{/usr/lib/X11/rgb.txt}.  However, for every color name containing
the string "gray", @w{a version} containing "grey" has been included.
For example, both "dark slate gray 4" and "dark slate grey 4" are
recognized color names.

@node Metafiles, Auxiliary Software, Color Names, Appendices
@appendix The Graphics Metafile Format

A GNU graphics metafile is produced by raw @code{graph} or by any other
graphics application that uses the Metafile Plotter support contained in
@code{libplot}.  @w{It is} a sort of audit trail: @w{it contains} a
record of which @code{libplot} functions have been called, together with
their arguments.  @w{That is}, @w{it is} a sequence of plotting
commands, each of which may be followed by data.  Each plotting command
is an @w{`op code'}: @w{a single} ASCII character, indicating which
@code{libplot} function was called.  The data following the command are
the arguments of the function.

There are two sorts of GNU metafile: binary (the default) and portable
(human-readable).  If you wish to transfer GNU metafiles between
machines of different types, you should use portable rather than binary
format.  Portable metafiles are produced by raw @code{graph} when the
@samp{-O} option is specified, and by the metafile driver of
@code{libplot} when the @code{META_PORTABLE} parameter is set to "yes".
Both binary and portable may be translated to other formats by GNU
@code{plot}.  Binary metafiles begin with the magic string @code{#PLOT 1}, 
and portable metafiles with the magic string @code{#PLOT 2}.

In the portable format, the arguments (integers, floating point numbers,
or strings) are printed in a human-readable form, separated by spaces,
and each argument list ends with a newline.  In the binary format, the
arguments are represented as integers, single precision floating point
numbers, or newline-terminated ASCII strings.  The role played by the
newline character as a terminator is acceptable because each
@code{libplot} function includes a maximum of one string among its
arguments, and the string may not include a newline.  Moreover, the
string must come last among the arguments.

In the traditional plot(5) format produced by pre-GNU versions of
@code{graph}, command arguments were either two-byte integers or
newline-terminated strings.  @w{At the} time plot(5) format was
designed, `two-byte integer' was synonymous with `short integer', but
that is @w{no longer} the case.  GNU @code{plot} can convert metafiles
in the traditional format to GNU metafiles in either binary or portable
format.  The absence of a magic string makes it possible to distinguish
files in plot(5) format from GNU metafiles.

The following table lists some of the @w{op codes} that appear in either
version of GNU metafile format, i.e., the possible single-character
commands, followed by the name of the @code{libplot} function they
@w{stand for}.  All 79 basic @code{libplot} functions have a
corresponding @w{op code}, with the exception of @w{(1) the} setup
functions @code{flushpl} and @code{outfile}, @w{(2) the} functions
@code{havecap}, @code{labelwidth}, and @code{flabelwidth}, which return
information, and @w{(3) the} @code{pencolorname} and
@code{fillcolorname} functions, which are mapped to @code{pencolor} and
@code{fillcolor} internally.

@table @asis
@item Op Code
Function
@item @samp{a}
@code{arc}
@item @samp{c}
@code{circle}
@item @samp{e}
@code{erase}
@item @samp{f}
@code{linemod}
@item @samp{l}
@code{line}
@item @samp{m}
@code{move}
@item @samp{n}
@code{cont}
@item @samp{p}
@code{point}
@item @samp{s}
@code{space}
@item @samp{t}
@code{label}
@end table

@noindent
The op codes above are actually the op codes of the traditional plot(5)
format.  Since the GNU metafile format is compatible @w{with it}, they
are also used in GNU metafiles.  The other @w{op codes} of metafile
format are too numerous to list.  They are defined in the header file
@code{plot.h}, which is distributed along with the plotting utilities.

@node Auxiliary Software, Acknowledgements, Metafiles, Appendices
@appendix Obtaining Auxiliary Software

@menu
* idraw::	Obtaining the idraw drawing editor
* xfig::       	Obtaining the xfig drawing editor
@end menu

@node idraw, xfig, Auxiliary Software, Auxiliary Software
@section How to get @code{idraw}

The @code{idraw} utility mentioned several times in this documentation
is a freely distributable interactive drawing editor for the @w{X
Window} System.  @w{It may} be used to edit the output of @code{graph -T
ps}, or, in general, the output of any application that uses the
Postscript Plotter support contained in @code{libplot}.

The current version of @code{idraw} is maintained by Vectaport, Inc.,
and is available at @uref{http://www.vectaport.com, their Web site}.
@w{It is} part of the @code{ivtools} package, which is a framework for
building custom drawing editors.  @code{idraw} was originally part of
the @code{InterViews} package, developed by Stanford University and
Silicon Graphics.  The @code{InterViews} package is available at
@uref{ftp://interviews.stanford.edu, a distribution site} but is no
longer supported.  Retrieving the @code{ivtools} package instead is
recommended.

Also available at @uref{http://www.vectaport.com, Vectaport's Web site}
is an enhanced version of @code{idraw} called @code{drawtool}.  Unlike
@code{idraw}, @code{drawtool} can import bitmapped graphics in
PBM/PGM/PPM, TIFF, and X11 bitmap formats.

@node xfig, , idraw, Auxiliary Software
@section How to get @code{xfig}

The @code{xfig} utility mentioned several times in this documentation is
a freely distributable interactive drawing editor for the @w{X Window}
System.  @w{It may} be used to edit the output of @code{graph -T fig},
or @w{in general} the output of any application that uses the 
Fig Plotter support contained in @code{libplot}.

The current version is available at
@uref{ftp://ftp.x.org/contrib/applications/drawing_tools/}.  It can
import graphics in GIF, X11 bitmap, and Postscript formats.
Accompanying the editor is a package called @code{transfig}, which
allows @code{xfig} graphics to be exported in many formats.  GIF, X11
bitmap, La@TeX{}, and Postscript formats are supported.

@node Acknowledgements, , Auxiliary Software, Appendices
@unnumbered Acknowledgements

Several of the GNU plotting utilities were inspired by Unix plotting
utilities.  A @code{graph} utility and various plot filters were present
in the first releases of Unix from Bell Laboratories, going @w{at least}
as far back as the @w{Version 4} distribution (1973).  Most of the work
on tying them together and breaking out device-dependent versions of
@code{libplot} was performed by @email{llc@@research.att.com, Lorinda
Cherry}.  By the time of @w{Version 7} Unix (1979) and the subsequent
Berkeley releases, the package consisting of @code{graph}, @code{plot},
@code{spline}, and several device-dependent versions of @code{libplot}
was a standard Unix feature.  The first display device supported by the
package was a Versatec storage scope.  By the early 1980's, supported
devices included Tektronix storage scopes, 200@dmn{dpi} electrostatic
printer/plotters from Versatec and Varian, pen plotters from
Hewlett--Packard, and early graphics terminals.

In 1989, @email{rich@@freebsd.org, Rich Murphey} wrote the first GNU
versions of @code{graph}, @code{plot}, and @code{spline}, and the
earliest documentation.  Richard Stallman further directed development
of the programs and provided editorial support for the documentation.
@email{interran@@uluru.stanford.edu, John Interrante}, of the InterViews
team at Stanford, generously provided the @code{idraw} Postscript
prologue now included in @code{libplot}, and helpful comments.  The
package as it stood in 1991 was distributed under the name `GNU graphics'.

In 1995 @email{rsm@@math.arizona.edu, Robert Maier} took over
development of the package, and designed and wrote the current,
maximally device-independent, standalone version of @code{libplot}.
He also rewrote @code{graph} from scratch, turning it into a real-time
filter that would use the new library.  He fleshed out @code{spline}
too, by adding support for splines in tension, periodicity, and cubic
Bessel interpolation.

Most development work on @code{ode} was performed by
@email{nbt@@reed.edu, Nick Tufillaro} in 1978--1994, on a sequence of
platforms that extended back to a PDP-11 running @w{Version 4} Unix.
In 1997 Robert modified Nick's 1994 version to agree with GNU conventions
on coding and command-line parsing, extended it to support the full set
of special functions supported by @code{gnuplot}, and extended the
exception handling.

Many other people aided the development of the plotting utilities
package along the way.  The Hershey vector fonts now in @code{libplot}
are @w{of course} based on the characters digitized in the mid to late
1960's by @w{Allen V.} Hershey, who deserves a vote of thanks.
Additional characters and/or marker symbols were taken from the SLAC
Unified Graphics System developed by @w{Robert C.} Beach in the
mid-1970's, and from the fonts designed by
@email{wolff@@inf.fu-berlin.de, Thomas Wolff} for Ghostscript.  The
interpolation algorithms used in @code{spline} are based on the
algorithms of @email{cline@@cs.utexas.edu, @w{Alan K.} Cline}, as
described in his papers in the Apr.@: 1974 issue of @cite{Communications
of the ACM}.  The table-driven parser used in @code{tek2plot} was
written at Berkeley in the mid-1980's by @email{moy@@parc.xerox.com,
Edward Moy}.  The `sagitta' algorithm used in an extended form in
@code{libplot} for drawing circular and elliptic arcs was developed by
Peter Karnow of URW and @email{turk@@apple.com, Ken Turkowski} of Apple.
@email{toy@@rtp.ericsson.se, Ray Toy} helped with the tick mark spacing
code in @code{graph} and was the first to incorporate GNU @code{getopt}.
Arthur Smith, formerly of LASSP at Cornell, provided code for his
@code{xplot} utility.  @email{beebe@@math.utah.edu, Nelson Beebe}
exhaustively tested the package installation process.

Robert Maier wrote the documentation, which now incorporates Nick
Tufillaro's @code{ode} manual.  Julie Sussmann checked over the
documentation for style and clarity.

@contents
@bye
