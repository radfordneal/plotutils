APPLICATION PROGRAM INTERFACE TO EXACT SUMMATION FUNCTIONS.

Copyright 2015, 2018, 2021 Radford M. Neal

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


This is a guide to use of the 'xsum' package for exact summation from
a C program.

The 'xsum' package implements exact summation of double-precision
(IEEE) floating-point numbers, with the exact sum stored in a
"superaccumulator".  Both "small" and "large" superaccumulators are
implemented, with the large superaccumulator being more efficient when
many (over 1000) numbers are being summed.  The exact sum in a
superaccumulator can be used to produce a double-precision rounded
result, which is the exactly-correct rounding (to nearest, ties to
even) of the exact sum.  See the paper in xsum-paper.pdf (also at
https://arxiv.org/abs/1505.05571) for more details.

Declarations required for use of 'xsum' are in the xsum.h file, which
should be included in a C module that uses the functions.  The
functions themselves are in xsum.c, which should be compiled and
linked with the application program.  There are various options that
can be set in xsum.c, which may affect performance with a given
processor and compiler, but the settings in the released version
should be adequate.

Small and large superaccumulators are represented by the following C
structure types:

  xsum_small_accumulator
  xsum_large_accumulator

Space for values of these types may be allocated by just declaring
variables of one of these types, or by using 'calloc'.  No special
action is required to free space used by an superaccumulator - the
space is freed when the variable's scope is exitted, or when 'free' is
called on the value from 'calloc'.

A superaccumulator should not be used until it has been initialized
with one of the following procedures:

  xsum_small_init (pointer_to_small_accumulator)
  xsum_large_init (pointer_to_large_accumulator)

These routines set the value stored in the superaccumulator to zero.
If desired, the initialization routine can be called later to reset
the value to zero.

After initialization, double-precision floating-point values can be
added to a small or large superaccumulator using one of the following
procedures:

  xsum_small_add1 (pointer_to_small_accumulator, value)
  xsum_large_add1 (pointer_to_large_accumulator, value)

  xsum_small_addv (pointer_to_small_accumulator, array, length)
  xsum_large_addv (pointer_to_large_accumulator, array, length)

The '...add1' procedures add a single double-precision value to the
given small or large superaccumulator.  The '...addv' procedures add
the elements in an array of double-precision values, with length given
by 'length' (of type 'int').

After adding values to a superaccumulator, the correct rounding of the
value it contains to a double-precision value can be obtained with one
of the following functions:

  xsum_small_round (pointer_to_small_accumulator)
  xsum_large_round (pointer_to_small_accumulator)

The value stored in the superaccumulator is not changed by these
functions.  Additional values can be added to the superaccumulator,
and then the result of rounding it can again be obtained, etc.

The value in a large superaccumulator can be stored in a small
superaccumulator with the following procedure:

  xsum_large_to_small_accumulator (pointer_to_small_accumulator,
                                   pointer_to_large_accumulator)

The value in the large accumulator is stored in the small accumulator,
replacing any value it previously contained.  The value in the large
accumulator is not changed.

The value in one small or large accumulator can be added to another
of the same type with the following procedures:

  xsum_small_add_accumulator (pointer_to_destination_accumulator,
                              pointer_to_source_accumulator)
  xsum_large_add_accumulator (pointer_to_destination_accumulator,
                              pointer_to_source_accumulator)

The value in the destination is modified by adding the value in the
source; the value in the source is not changed.

A small or large superaccumulator can be copied by simply assigning it
to another variable of the same type.

Some additional procedures are declared in xsum.h and implemented in
xsum.c.  They are mainly meant for debugging and for producing results
in the paper, but the procedures for adding a vector dot product or
squared vector norm to a superaccumulator may be of use for
applications.
